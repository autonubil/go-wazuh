// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen v1.8.3 DO NOT EDIT.
package rest

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHttpRequestDoer(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DefaultControllerDefaultInfo request
	DefaultControllerDefaultInfo(ctx context.Context, params *DefaultControllerDefaultInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActiveResponseControllerRunCommand request with any body
	ActiveResponseControllerRunCommandWithBody(ctx context.Context, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActiveResponseControllerRunCommand(ctx context.Context, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerDeleteAgents request
	AgentControllerDeleteAgents(ctx context.Context, params *AgentControllerDeleteAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgents request
	AgentControllerGetAgents(ctx context.Context, params *AgentControllerGetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerAddAgent request with any body
	AgentControllerAddAgentWithBody(ctx context.Context, params *AgentControllerAddAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AgentControllerAddAgent(ctx context.Context, params *AgentControllerAddAgentParams, body AgentControllerAddAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerDeleteMultipleAgentSingleGroup request
	AgentControllerDeleteMultipleAgentSingleGroup(ctx context.Context, params *AgentControllerDeleteMultipleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerPutMultipleAgentSingleGroup request
	AgentControllerPutMultipleAgentSingleGroup(ctx context.Context, params *AgentControllerPutMultipleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerRestartAgentsByGroup request
	AgentControllerRestartAgentsByGroup(ctx context.Context, groupId GroupId, params *AgentControllerRestartAgentsByGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerInsertAgent request with any body
	AgentControllerInsertAgentWithBody(ctx context.Context, params *AgentControllerInsertAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AgentControllerInsertAgent(ctx context.Context, params *AgentControllerInsertAgentParams, body AgentControllerInsertAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerPostNewAgent request
	AgentControllerPostNewAgent(ctx context.Context, params *AgentControllerPostNewAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgentNoGroup request
	AgentControllerGetAgentNoGroup(ctx context.Context, params *AgentControllerGetAgentNoGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerRestartAgentsByNode request
	AgentControllerRestartAgentsByNode(ctx context.Context, nodeId NodeId, params *AgentControllerRestartAgentsByNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgentOutdated request
	AgentControllerGetAgentOutdated(ctx context.Context, params *AgentControllerGetAgentOutdatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerReconnectAgents request
	AgentControllerReconnectAgents(ctx context.Context, params *AgentControllerReconnectAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerRestartAgents request
	AgentControllerRestartAgents(ctx context.Context, params *AgentControllerRestartAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgentFields request
	AgentControllerGetAgentFields(ctx context.Context, params *AgentControllerGetAgentFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgentSummaryOs request
	AgentControllerGetAgentSummaryOs(ctx context.Context, params *AgentControllerGetAgentSummaryOsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgentSummaryStatus request
	AgentControllerGetAgentSummaryStatus(ctx context.Context, params *AgentControllerGetAgentSummaryStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerPutUpgradeAgents request
	AgentControllerPutUpgradeAgents(ctx context.Context, params *AgentControllerPutUpgradeAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerPutUpgradeCustomAgents request
	AgentControllerPutUpgradeCustomAgents(ctx context.Context, params *AgentControllerPutUpgradeCustomAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgentUpgrade request
	AgentControllerGetAgentUpgrade(ctx context.Context, params *AgentControllerGetAgentUpgradeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgentConfig request
	AgentControllerGetAgentConfig(ctx context.Context, agentId AgentId, component AgentControllerGetAgentConfigParamsComponent, configuration AgentControllerGetAgentConfigParamsConfiguration, params *AgentControllerGetAgentConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetDaemonStats request
	AgentControllerGetDaemonStats(ctx context.Context, agentId AgentId, params *AgentControllerGetDaemonStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerDeleteSingleAgentMultipleGroups request
	AgentControllerDeleteSingleAgentMultipleGroups(ctx context.Context, agentId AgentId, params *AgentControllerDeleteSingleAgentMultipleGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetSyncAgent request
	AgentControllerGetSyncAgent(ctx context.Context, agentId AgentId, params *AgentControllerGetSyncAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerDeleteSingleAgentSingleGroup request
	AgentControllerDeleteSingleAgentSingleGroup(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentControllerDeleteSingleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerPutAgentSingleGroup request
	AgentControllerPutAgentSingleGroup(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentControllerPutAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgentKey request
	AgentControllerGetAgentKey(ctx context.Context, agentId AgentId, params *AgentControllerGetAgentKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerRestartAgent request
	AgentControllerRestartAgent(ctx context.Context, agentId AgentId, params *AgentControllerRestartAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetComponentStats request
	AgentControllerGetComponentStats(ctx context.Context, agentId AgentId, component AgentControllerGetComponentStatsParamsComponent, params *AgentControllerGetComponentStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiscatControllerGetAgentsCiscatResults request
	CiscatControllerGetAgentsCiscatResults(ctx context.Context, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetApiConfig request
	ClusterControllerGetApiConfig(ctx context.Context, params *ClusterControllerGetApiConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetConfValidation request
	ClusterControllerGetConfValidation(ctx context.Context, params *ClusterControllerGetConfValidationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetHealthcheck request
	ClusterControllerGetHealthcheck(ctx context.Context, params *ClusterControllerGetHealthcheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetConfig request
	ClusterControllerGetConfig(ctx context.Context, params *ClusterControllerGetConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetClusterNode request
	ClusterControllerGetClusterNode(ctx context.Context, params *ClusterControllerGetClusterNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetClusterNodes request
	ClusterControllerGetClusterNodes(ctx context.Context, params *ClusterControllerGetClusterNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerPutRestart request
	ClusterControllerPutRestart(ctx context.Context, params *ClusterControllerPutRestartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetNodesRulesetSyncStatus request
	ClusterControllerGetNodesRulesetSyncStatus(ctx context.Context, params *ClusterControllerGetNodesRulesetSyncStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetStatus request
	ClusterControllerGetStatus(ctx context.Context, params *ClusterControllerGetStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetConfigurationNode request
	ClusterControllerGetConfigurationNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerUpdateConfiguration request with any body
	ClusterControllerUpdateConfigurationWithBody(ctx context.Context, nodeId NodeId, params *ClusterControllerUpdateConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetNodeConfig request
	ClusterControllerGetNodeConfig(ctx context.Context, nodeId NodeId, component ClusterControllerGetNodeConfigParamsComponent, configuration ClusterControllerGetNodeConfigParamsConfiguration, params *ClusterControllerGetNodeConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetDaemonStatsNode request
	ClusterControllerGetDaemonStatsNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetDaemonStatsNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetInfoNode request
	ClusterControllerGetInfoNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetInfoNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetLogNode request
	ClusterControllerGetLogNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetLogSummaryNode request
	ClusterControllerGetLogSummaryNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetStatsNode request
	ClusterControllerGetStatsNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetStatsAnalysisdNode request
	ClusterControllerGetStatsAnalysisdNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetStatsHourlyNode request
	ClusterControllerGetStatsHourlyNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetStatsRemotedNode request
	ClusterControllerGetStatsRemotedNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetStatsWeeklyNode request
	ClusterControllerGetStatsWeeklyNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterControllerGetStatusNode request
	ClusterControllerGetStatusNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatusNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecoderControllerGetDecoders request
	DecoderControllerGetDecoders(ctx context.Context, params *DecoderControllerGetDecodersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecoderControllerGetDecodersFiles request
	DecoderControllerGetDecodersFiles(ctx context.Context, params *DecoderControllerGetDecodersFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecoderControllerDeleteFile request
	DecoderControllerDeleteFile(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecoderControllerGetFile request
	DecoderControllerGetFile(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerGetFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecoderControllerPutFile request with any body
	DecoderControllerPutFileWithBody(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecoderControllerGetDecodersParents request
	DecoderControllerGetDecodersParents(ctx context.Context, params *DecoderControllerGetDecodersParentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventControllerForwardEvent request with any body
	EventControllerForwardEventWithBody(ctx context.Context, params *EventControllerForwardEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventControllerForwardEvent(ctx context.Context, params *EventControllerForwardEventParams, body EventControllerForwardEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetCisCatResults request
	ExperimentalControllerGetCisCatResults(ctx context.Context, params *ExperimentalControllerGetCisCatResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerClearRootcheckDatabase request
	ExperimentalControllerClearRootcheckDatabase(ctx context.Context, params *ExperimentalControllerClearRootcheckDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerClearSyscheckDatabase request
	ExperimentalControllerClearSyscheckDatabase(ctx context.Context, params *ExperimentalControllerClearSyscheckDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetHardwareInfo request
	ExperimentalControllerGetHardwareInfo(ctx context.Context, params *ExperimentalControllerGetHardwareInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetHotfixesInfo request
	ExperimentalControllerGetHotfixesInfo(ctx context.Context, params *ExperimentalControllerGetHotfixesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetNetworkAddressInfo request
	ExperimentalControllerGetNetworkAddressInfo(ctx context.Context, params *ExperimentalControllerGetNetworkAddressInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetNetworkInterfaceInfo request
	ExperimentalControllerGetNetworkInterfaceInfo(ctx context.Context, params *ExperimentalControllerGetNetworkInterfaceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetNetworkProtocolInfo request
	ExperimentalControllerGetNetworkProtocolInfo(ctx context.Context, params *ExperimentalControllerGetNetworkProtocolInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetOsInfo request
	ExperimentalControllerGetOsInfo(ctx context.Context, params *ExperimentalControllerGetOsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetPackagesInfo request
	ExperimentalControllerGetPackagesInfo(ctx context.Context, params *ExperimentalControllerGetPackagesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetPortsInfo request
	ExperimentalControllerGetPortsInfo(ctx context.Context, params *ExperimentalControllerGetPortsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExperimentalControllerGetProcessesInfo request
	ExperimentalControllerGetProcessesInfo(ctx context.Context, params *ExperimentalControllerGetProcessesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerDeleteGroups request
	AgentControllerDeleteGroups(ctx context.Context, params *AgentControllerDeleteGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetListGroup request
	AgentControllerGetListGroup(ctx context.Context, params *AgentControllerGetListGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerPostGroup request with any body
	AgentControllerPostGroupWithBody(ctx context.Context, params *AgentControllerPostGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AgentControllerPostGroup(ctx context.Context, params *AgentControllerPostGroupParams, body AgentControllerPostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetAgentsInGroup request
	AgentControllerGetAgentsInGroup(ctx context.Context, groupId GroupId, params *AgentControllerGetAgentsInGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetGroupConfig request
	AgentControllerGetGroupConfig(ctx context.Context, groupId GroupId, params *AgentControllerGetGroupConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerPutGroupConfig request with any body
	AgentControllerPutGroupConfigWithBody(ctx context.Context, groupId GroupId, params *AgentControllerPutGroupConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetGroupFiles request
	AgentControllerGetGroupFiles(ctx context.Context, groupId GroupId, params *AgentControllerGetGroupFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetGroupFileJson request
	AgentControllerGetGroupFileJson(ctx context.Context, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentControllerGetGroupFileXml request
	AgentControllerGetGroupFileXml(ctx context.Context, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileXmlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CdbListControllerGetLists request
	CdbListControllerGetLists(ctx context.Context, params *CdbListControllerGetListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CdbListControllerGetListsFiles request
	CdbListControllerGetListsFiles(ctx context.Context, params *CdbListControllerGetListsFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CdbListControllerDeleteFile request
	CdbListControllerDeleteFile(ctx context.Context, filename ListFilenamePath, params *CdbListControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CdbListControllerGetFile request
	CdbListControllerGetFile(ctx context.Context, filename ListFilenamePath, params *CdbListControllerGetFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CdbListControllerPutFile request with any body
	CdbListControllerPutFileWithBody(ctx context.Context, filename ListFilenamePath, params *CdbListControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogtestControllerRunLogtestTool request with any body
	LogtestControllerRunLogtestToolWithBody(ctx context.Context, params *LogtestControllerRunLogtestToolParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LogtestControllerRunLogtestTool(ctx context.Context, params *LogtestControllerRunLogtestToolParams, body LogtestControllerRunLogtestToolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogtestControllerEndLogtestSession request
	LogtestControllerEndLogtestSession(ctx context.Context, token LogtestToken, params *LogtestControllerEndLogtestSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetApiConfig request
	ManagerControllerGetApiConfig(ctx context.Context, params *ManagerControllerGetApiConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetConfiguration request
	ManagerControllerGetConfiguration(ctx context.Context, params *ManagerControllerGetConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerUpdateConfiguration request with any body
	ManagerControllerUpdateConfigurationWithBody(ctx context.Context, params *ManagerControllerUpdateConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetConfValidation request
	ManagerControllerGetConfValidation(ctx context.Context, params *ManagerControllerGetConfValidationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetManagerConfigOndemand request
	ManagerControllerGetManagerConfigOndemand(ctx context.Context, component ManagerControllerGetManagerConfigOndemandParamsComponent, configuration ManagerControllerGetManagerConfigOndemandParamsConfiguration, params *ManagerControllerGetManagerConfigOndemandParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetDaemonStats request
	ManagerControllerGetDaemonStats(ctx context.Context, params *ManagerControllerGetDaemonStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetInfo request
	ManagerControllerGetInfo(ctx context.Context, params *ManagerControllerGetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetLog request
	ManagerControllerGetLog(ctx context.Context, params *ManagerControllerGetLogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetLogSummary request
	ManagerControllerGetLogSummary(ctx context.Context, params *ManagerControllerGetLogSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerPutRestart request
	ManagerControllerPutRestart(ctx context.Context, params *ManagerControllerPutRestartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetStats request
	ManagerControllerGetStats(ctx context.Context, params *ManagerControllerGetStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetStatsAnalysisd request
	ManagerControllerGetStatsAnalysisd(ctx context.Context, params *ManagerControllerGetStatsAnalysisdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetStatsHourly request
	ManagerControllerGetStatsHourly(ctx context.Context, params *ManagerControllerGetStatsHourlyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetStatsRemoted request
	ManagerControllerGetStatsRemoted(ctx context.Context, params *ManagerControllerGetStatsRemotedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetStatsWeekly request
	ManagerControllerGetStatsWeekly(ctx context.Context, params *ManagerControllerGetStatsWeeklyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerGetStatus request
	ManagerControllerGetStatus(ctx context.Context, params *ManagerControllerGetStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagerControllerCheckAvailableVersion request
	ManagerControllerCheckAvailableVersion(ctx context.Context, params *ManagerControllerCheckAvailableVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitreControllerGetGroups request
	MitreControllerGetGroups(ctx context.Context, params *MitreControllerGetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitreControllerGetMetadata request
	MitreControllerGetMetadata(ctx context.Context, params *MitreControllerGetMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitreControllerGetMitigations request
	MitreControllerGetMitigations(ctx context.Context, params *MitreControllerGetMitigationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitreControllerGetReferences request
	MitreControllerGetReferences(ctx context.Context, params *MitreControllerGetReferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitreControllerGetSoftware request
	MitreControllerGetSoftware(ctx context.Context, params *MitreControllerGetSoftwareParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitreControllerGetTactics request
	MitreControllerGetTactics(ctx context.Context, params *MitreControllerGetTacticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitreControllerGetTechniques request
	MitreControllerGetTechniques(ctx context.Context, params *MitreControllerGetTechniquesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OverviewControllerGetOverviewAgents request
	OverviewControllerGetOverviewAgents(ctx context.Context, params *OverviewControllerGetOverviewAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RootcheckControllerPutRootcheck request
	RootcheckControllerPutRootcheck(ctx context.Context, params *RootcheckControllerPutRootcheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RootcheckControllerDeleteRootcheck request
	RootcheckControllerDeleteRootcheck(ctx context.Context, agentId AgentId, params *RootcheckControllerDeleteRootcheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RootcheckControllerGetRootcheckAgent request
	RootcheckControllerGetRootcheckAgent(ctx context.Context, agentId AgentId, params *RootcheckControllerGetRootcheckAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RootcheckControllerGetLastScanAgent request
	RootcheckControllerGetLastScanAgent(ctx context.Context, agentId AgentId, params *RootcheckControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleControllerGetRules request
	RuleControllerGetRules(ctx context.Context, params *RuleControllerGetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleControllerGetRulesFiles request
	RuleControllerGetRulesFiles(ctx context.Context, params *RuleControllerGetRulesFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleControllerDeleteFile request
	RuleControllerDeleteFile(ctx context.Context, filename XmlFilenamePath, params *RuleControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleControllerGetFile request
	RuleControllerGetFile(ctx context.Context, filename XmlFilenamePath, params *RuleControllerGetFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleControllerPutFile request with any body
	RuleControllerPutFileWithBody(ctx context.Context, filename XmlFilenamePath, params *RuleControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleControllerGetRulesGroups request
	RuleControllerGetRulesGroups(ctx context.Context, params *RuleControllerGetRulesGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleControllerGetRulesRequirement request
	RuleControllerGetRulesRequirement(ctx context.Context, requirement RuleControllerGetRulesRequirementParamsRequirement, params *RuleControllerGetRulesRequirementParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScaControllerGetScaAgent request
	ScaControllerGetScaAgent(ctx context.Context, agentId AgentId, params *ScaControllerGetScaAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScaControllerGetScaChecks request
	ScaControllerGetScaChecks(ctx context.Context, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerGetRbacActions request
	SecurityControllerGetRbacActions(ctx context.Context, params *SecurityControllerGetRbacActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerDeleteSecurityConfig request
	SecurityControllerDeleteSecurityConfig(ctx context.Context, params *SecurityControllerDeleteSecurityConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerGetSecurityConfig request
	SecurityControllerGetSecurityConfig(ctx context.Context, params *SecurityControllerGetSecurityConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerPutSecurityConfig request with any body
	SecurityControllerPutSecurityConfigWithBody(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerPutSecurityConfig(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerRemovePolicies request
	SecurityControllerRemovePolicies(ctx context.Context, params *SecurityControllerRemovePoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerGetPolicies request
	SecurityControllerGetPolicies(ctx context.Context, params *SecurityControllerGetPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerAddPolicy request with any body
	SecurityControllerAddPolicyWithBody(ctx context.Context, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerAddPolicy(ctx context.Context, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerUpdatePolicy request with any body
	SecurityControllerUpdatePolicyWithBody(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerUpdatePolicy(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerGetRbacResources request
	SecurityControllerGetRbacResources(ctx context.Context, params *SecurityControllerGetRbacResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerRemoveRoles request
	SecurityControllerRemoveRoles(ctx context.Context, params *SecurityControllerRemoveRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerGetRoles request
	SecurityControllerGetRoles(ctx context.Context, params *SecurityControllerGetRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerAddRole request with any body
	SecurityControllerAddRoleWithBody(ctx context.Context, params *SecurityControllerAddRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerAddRole(ctx context.Context, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerUpdateRole request with any body
	SecurityControllerUpdateRoleWithBody(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerUpdateRole(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerRemoveRolePolicy request
	SecurityControllerRemoveRolePolicy(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerSetRolePolicy request
	SecurityControllerSetRolePolicy(ctx context.Context, roleId RoleId, params *SecurityControllerSetRolePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerRemoveRoleRule request
	SecurityControllerRemoveRoleRule(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerSetRoleRule request
	SecurityControllerSetRoleRule(ctx context.Context, roleId RoleId, params *SecurityControllerSetRoleRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerRemoveRules request
	SecurityControllerRemoveRules(ctx context.Context, params *SecurityControllerRemoveRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerGetRules request
	SecurityControllerGetRules(ctx context.Context, params *SecurityControllerGetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerAddRule request with any body
	SecurityControllerAddRuleWithBody(ctx context.Context, params *SecurityControllerAddRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerAddRule(ctx context.Context, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerUpdateRule request with any body
	SecurityControllerUpdateRuleWithBody(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerUpdateRule(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerLogoutUser request
	SecurityControllerLogoutUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerDeprecatedLoginUser request
	SecurityControllerDeprecatedLoginUser(ctx context.Context, params *SecurityControllerDeprecatedLoginUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerLoginUser request
	SecurityControllerLoginUser(ctx context.Context, params *SecurityControllerLoginUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerRunAsLogin request with any body
	SecurityControllerRunAsLoginWithBody(ctx context.Context, params *SecurityControllerRunAsLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerRunAsLogin(ctx context.Context, params *SecurityControllerRunAsLoginParams, body SecurityControllerRunAsLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerRevokeAllTokens request
	SecurityControllerRevokeAllTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerDeleteUsers request
	SecurityControllerDeleteUsers(ctx context.Context, params *SecurityControllerDeleteUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerGetUsers request
	SecurityControllerGetUsers(ctx context.Context, params *SecurityControllerGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerCreateUser request with any body
	SecurityControllerCreateUserWithBody(ctx context.Context, params *SecurityControllerCreateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerCreateUser(ctx context.Context, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerGetUserMe request
	SecurityControllerGetUserMe(ctx context.Context, params *SecurityControllerGetUserMeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerGetUserMePolicies request
	SecurityControllerGetUserMePolicies(ctx context.Context, params *SecurityControllerGetUserMePoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerUpdateUser request with any body
	SecurityControllerUpdateUserWithBody(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecurityControllerUpdateUser(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerRemoveUserRole request
	SecurityControllerRemoveUserRole(ctx context.Context, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerSetUserRole request
	SecurityControllerSetUserRole(ctx context.Context, userId UserIdRequired, params *SecurityControllerSetUserRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecurityControllerEditRunAs request
	SecurityControllerEditRunAs(ctx context.Context, userId UserIdRequired, params *SecurityControllerEditRunAsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscheckControllerPutSyscheck request
	SyscheckControllerPutSyscheck(ctx context.Context, params *SyscheckControllerPutSyscheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscheckControllerDeleteSyscheckAgent request
	SyscheckControllerDeleteSyscheckAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscheckControllerGetSyscheckAgent request
	SyscheckControllerGetSyscheckAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscheckControllerGetLastScanAgent request
	SyscheckControllerGetLastScanAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscollectorControllerGetHardwareInfo request
	SyscollectorControllerGetHardwareInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscollectorControllerGetHotfixInfo request
	SyscollectorControllerGetHotfixInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscollectorControllerGetNetworkAddressInfo request
	SyscollectorControllerGetNetworkAddressInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscollectorControllerGetNetworkInterfaceInfo request
	SyscollectorControllerGetNetworkInterfaceInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscollectorControllerGetNetworkProtocolInfo request
	SyscollectorControllerGetNetworkProtocolInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscollectorControllerGetOsInfo request
	SyscollectorControllerGetOsInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetOsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscollectorControllerGetPackagesInfo request
	SyscollectorControllerGetPackagesInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscollectorControllerGetPortsInfo request
	SyscollectorControllerGetPortsInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyscollectorControllerGetProcessesInfo request
	SyscollectorControllerGetProcessesInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TaskControllerGetTasksStatus request
	TaskControllerGetTasksStatus(ctx context.Context, params *TaskControllerGetTasksStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VulnerabilityControllerGetVulnerabilityAgent request
	VulnerabilityControllerGetVulnerabilityAgent(ctx context.Context, agentId AgentId, params *VulnerabilityControllerGetVulnerabilityAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VulnerabilityControllerGetLastScanAgent request
	VulnerabilityControllerGetLastScanAgent(ctx context.Context, agentId AgentId, params *VulnerabilityControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VulnerabilityControllerGetVulnerabilitiesFieldSummary request
	VulnerabilityControllerGetVulnerabilitiesFieldSummary(ctx context.Context, agentId AgentId, field VulnerabilityControllerGetVulnerabilitiesFieldSummaryParamsField, params *VulnerabilityControllerGetVulnerabilitiesFieldSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DefaultControllerDefaultInfo(ctx context.Context, params *DefaultControllerDefaultInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersDefaultControllerDefaultInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActiveResponseControllerRunCommandWithBody(ctx context.Context, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersActiveResponseControllerRunCommandRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActiveResponseControllerRunCommand(ctx context.Context, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersActiveResponseControllerRunCommandRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerDeleteAgents(ctx context.Context, params *AgentControllerDeleteAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerDeleteAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgents(ctx context.Context, params *AgentControllerGetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerAddAgentWithBody(ctx context.Context, params *AgentControllerAddAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerAddAgentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerAddAgent(ctx context.Context, params *AgentControllerAddAgentParams, body AgentControllerAddAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerAddAgentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerDeleteMultipleAgentSingleGroup(ctx context.Context, params *AgentControllerDeleteMultipleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerDeleteMultipleAgentSingleGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerPutMultipleAgentSingleGroup(ctx context.Context, params *AgentControllerPutMultipleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerPutMultipleAgentSingleGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerRestartAgentsByGroup(ctx context.Context, groupId GroupId, params *AgentControllerRestartAgentsByGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerRestartAgentsByGroupRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerInsertAgentWithBody(ctx context.Context, params *AgentControllerInsertAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerInsertAgentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerInsertAgent(ctx context.Context, params *AgentControllerInsertAgentParams, body AgentControllerInsertAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerInsertAgentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerPostNewAgent(ctx context.Context, params *AgentControllerPostNewAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerPostNewAgentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgentNoGroup(ctx context.Context, params *AgentControllerGetAgentNoGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentNoGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerRestartAgentsByNode(ctx context.Context, nodeId NodeId, params *AgentControllerRestartAgentsByNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerRestartAgentsByNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgentOutdated(ctx context.Context, params *AgentControllerGetAgentOutdatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentOutdatedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerReconnectAgents(ctx context.Context, params *AgentControllerReconnectAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerReconnectAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerRestartAgents(ctx context.Context, params *AgentControllerRestartAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerRestartAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgentFields(ctx context.Context, params *AgentControllerGetAgentFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgentSummaryOs(ctx context.Context, params *AgentControllerGetAgentSummaryOsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentSummaryOsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgentSummaryStatus(ctx context.Context, params *AgentControllerGetAgentSummaryStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentSummaryStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerPutUpgradeAgents(ctx context.Context, params *AgentControllerPutUpgradeAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerPutUpgradeAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerPutUpgradeCustomAgents(ctx context.Context, params *AgentControllerPutUpgradeCustomAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerPutUpgradeCustomAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgentUpgrade(ctx context.Context, params *AgentControllerGetAgentUpgradeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentUpgradeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgentConfig(ctx context.Context, agentId AgentId, component AgentControllerGetAgentConfigParamsComponent, configuration AgentControllerGetAgentConfigParamsConfiguration, params *AgentControllerGetAgentConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentConfigRequest(c.Server, agentId, component, configuration, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetDaemonStats(ctx context.Context, agentId AgentId, params *AgentControllerGetDaemonStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetDaemonStatsRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerDeleteSingleAgentMultipleGroups(ctx context.Context, agentId AgentId, params *AgentControllerDeleteSingleAgentMultipleGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerDeleteSingleAgentMultipleGroupsRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetSyncAgent(ctx context.Context, agentId AgentId, params *AgentControllerGetSyncAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetSyncAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerDeleteSingleAgentSingleGroup(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentControllerDeleteSingleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerDeleteSingleAgentSingleGroupRequest(c.Server, agentId, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerPutAgentSingleGroup(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentControllerPutAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerPutAgentSingleGroupRequest(c.Server, agentId, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgentKey(ctx context.Context, agentId AgentId, params *AgentControllerGetAgentKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentKeyRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerRestartAgent(ctx context.Context, agentId AgentId, params *AgentControllerRestartAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerRestartAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetComponentStats(ctx context.Context, agentId AgentId, component AgentControllerGetComponentStatsParamsComponent, params *AgentControllerGetComponentStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetComponentStatsRequest(c.Server, agentId, component, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiscatControllerGetAgentsCiscatResults(ctx context.Context, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersCiscatControllerGetAgentsCiscatResultsRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetApiConfig(ctx context.Context, params *ClusterControllerGetApiConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetApiConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetConfValidation(ctx context.Context, params *ClusterControllerGetConfValidationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetConfValidationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetHealthcheck(ctx context.Context, params *ClusterControllerGetHealthcheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetHealthcheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetConfig(ctx context.Context, params *ClusterControllerGetConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetClusterNode(ctx context.Context, params *ClusterControllerGetClusterNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetClusterNodeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetClusterNodes(ctx context.Context, params *ClusterControllerGetClusterNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetClusterNodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerPutRestart(ctx context.Context, params *ClusterControllerPutRestartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerPutRestartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetNodesRulesetSyncStatus(ctx context.Context, params *ClusterControllerGetNodesRulesetSyncStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetNodesRulesetSyncStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatus(ctx context.Context, params *ClusterControllerGetStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetConfigurationNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetConfigurationNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerUpdateConfigurationWithBody(ctx context.Context, nodeId NodeId, params *ClusterControllerUpdateConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerUpdateConfigurationRequestWithBody(c.Server, nodeId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetNodeConfig(ctx context.Context, nodeId NodeId, component ClusterControllerGetNodeConfigParamsComponent, configuration ClusterControllerGetNodeConfigParamsConfiguration, params *ClusterControllerGetNodeConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetNodeConfigRequest(c.Server, nodeId, component, configuration, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetDaemonStatsNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetDaemonStatsNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetDaemonStatsNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetInfoNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetInfoNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetInfoNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetLogNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetLogNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetLogSummaryNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetLogSummaryNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetStatsNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsAnalysisdNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetStatsAnalysisdNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsHourlyNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetStatsHourlyNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsRemotedNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetStatsRemotedNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsWeeklyNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetStatsWeeklyNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatusNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatusNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersClusterControllerGetStatusNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecoderControllerGetDecoders(ctx context.Context, params *DecoderControllerGetDecodersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersDecoderControllerGetDecodersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecoderControllerGetDecodersFiles(ctx context.Context, params *DecoderControllerGetDecodersFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersDecoderControllerGetDecodersFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecoderControllerDeleteFile(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersDecoderControllerDeleteFileRequest(c.Server, filename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecoderControllerGetFile(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerGetFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersDecoderControllerGetFileRequest(c.Server, filename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecoderControllerPutFileWithBody(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersDecoderControllerPutFileRequestWithBody(c.Server, filename, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecoderControllerGetDecodersParents(ctx context.Context, params *DecoderControllerGetDecodersParentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersDecoderControllerGetDecodersParentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventControllerForwardEventWithBody(ctx context.Context, params *EventControllerForwardEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersEventControllerForwardEventRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventControllerForwardEvent(ctx context.Context, params *EventControllerForwardEventParams, body EventControllerForwardEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersEventControllerForwardEventRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetCisCatResults(ctx context.Context, params *ExperimentalControllerGetCisCatResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetCisCatResultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerClearRootcheckDatabase(ctx context.Context, params *ExperimentalControllerClearRootcheckDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerClearRootcheckDatabaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerClearSyscheckDatabase(ctx context.Context, params *ExperimentalControllerClearSyscheckDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerClearSyscheckDatabaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetHardwareInfo(ctx context.Context, params *ExperimentalControllerGetHardwareInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetHardwareInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetHotfixesInfo(ctx context.Context, params *ExperimentalControllerGetHotfixesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetHotfixesInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetNetworkAddressInfo(ctx context.Context, params *ExperimentalControllerGetNetworkAddressInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetNetworkAddressInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetNetworkInterfaceInfo(ctx context.Context, params *ExperimentalControllerGetNetworkInterfaceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetNetworkProtocolInfo(ctx context.Context, params *ExperimentalControllerGetNetworkProtocolInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetNetworkProtocolInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetOsInfo(ctx context.Context, params *ExperimentalControllerGetOsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetOsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetPackagesInfo(ctx context.Context, params *ExperimentalControllerGetPackagesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetPackagesInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetPortsInfo(ctx context.Context, params *ExperimentalControllerGetPortsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetPortsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetProcessesInfo(ctx context.Context, params *ExperimentalControllerGetProcessesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersExperimentalControllerGetProcessesInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerDeleteGroups(ctx context.Context, params *AgentControllerDeleteGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerDeleteGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetListGroup(ctx context.Context, params *AgentControllerGetListGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetListGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerPostGroupWithBody(ctx context.Context, params *AgentControllerPostGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerPostGroupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerPostGroup(ctx context.Context, params *AgentControllerPostGroupParams, body AgentControllerPostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerPostGroupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetAgentsInGroup(ctx context.Context, groupId GroupId, params *AgentControllerGetAgentsInGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetAgentsInGroupRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetGroupConfig(ctx context.Context, groupId GroupId, params *AgentControllerGetGroupConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetGroupConfigRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerPutGroupConfigWithBody(ctx context.Context, groupId GroupId, params *AgentControllerPutGroupConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerPutGroupConfigRequestWithBody(c.Server, groupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetGroupFiles(ctx context.Context, groupId GroupId, params *AgentControllerGetGroupFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetGroupFilesRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetGroupFileJson(ctx context.Context, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetGroupFileJsonRequest(c.Server, groupId, fileName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentControllerGetGroupFileXml(ctx context.Context, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileXmlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersAgentControllerGetGroupFileXmlRequest(c.Server, groupId, fileName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CdbListControllerGetLists(ctx context.Context, params *CdbListControllerGetListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersCdbListControllerGetListsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CdbListControllerGetListsFiles(ctx context.Context, params *CdbListControllerGetListsFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersCdbListControllerGetListsFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CdbListControllerDeleteFile(ctx context.Context, filename ListFilenamePath, params *CdbListControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersCdbListControllerDeleteFileRequest(c.Server, filename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CdbListControllerGetFile(ctx context.Context, filename ListFilenamePath, params *CdbListControllerGetFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersCdbListControllerGetFileRequest(c.Server, filename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CdbListControllerPutFileWithBody(ctx context.Context, filename ListFilenamePath, params *CdbListControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersCdbListControllerPutFileRequestWithBody(c.Server, filename, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogtestControllerRunLogtestToolWithBody(ctx context.Context, params *LogtestControllerRunLogtestToolParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersLogtestControllerRunLogtestToolRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogtestControllerRunLogtestTool(ctx context.Context, params *LogtestControllerRunLogtestToolParams, body LogtestControllerRunLogtestToolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersLogtestControllerRunLogtestToolRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogtestControllerEndLogtestSession(ctx context.Context, token LogtestToken, params *LogtestControllerEndLogtestSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersLogtestControllerEndLogtestSessionRequest(c.Server, token, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetApiConfig(ctx context.Context, params *ManagerControllerGetApiConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetApiConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetConfiguration(ctx context.Context, params *ManagerControllerGetConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetConfigurationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerUpdateConfigurationWithBody(ctx context.Context, params *ManagerControllerUpdateConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerUpdateConfigurationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetConfValidation(ctx context.Context, params *ManagerControllerGetConfValidationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetConfValidationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetManagerConfigOndemand(ctx context.Context, component ManagerControllerGetManagerConfigOndemandParamsComponent, configuration ManagerControllerGetManagerConfigOndemandParamsConfiguration, params *ManagerControllerGetManagerConfigOndemandParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetManagerConfigOndemandRequest(c.Server, component, configuration, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetDaemonStats(ctx context.Context, params *ManagerControllerGetDaemonStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetDaemonStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetInfo(ctx context.Context, params *ManagerControllerGetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetLog(ctx context.Context, params *ManagerControllerGetLogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetLogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetLogSummary(ctx context.Context, params *ManagerControllerGetLogSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetLogSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerPutRestart(ctx context.Context, params *ManagerControllerPutRestartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerPutRestartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStats(ctx context.Context, params *ManagerControllerGetStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatsAnalysisd(ctx context.Context, params *ManagerControllerGetStatsAnalysisdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetStatsAnalysisdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatsHourly(ctx context.Context, params *ManagerControllerGetStatsHourlyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetStatsHourlyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatsRemoted(ctx context.Context, params *ManagerControllerGetStatsRemotedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetStatsRemotedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatsWeekly(ctx context.Context, params *ManagerControllerGetStatsWeeklyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetStatsWeeklyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatus(ctx context.Context, params *ManagerControllerGetStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerGetStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerCheckAvailableVersion(ctx context.Context, params *ManagerControllerCheckAvailableVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersManagerControllerCheckAvailableVersionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitreControllerGetGroups(ctx context.Context, params *MitreControllerGetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersMitreControllerGetGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitreControllerGetMetadata(ctx context.Context, params *MitreControllerGetMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersMitreControllerGetMetadataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitreControllerGetMitigations(ctx context.Context, params *MitreControllerGetMitigationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersMitreControllerGetMitigationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitreControllerGetReferences(ctx context.Context, params *MitreControllerGetReferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersMitreControllerGetReferencesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitreControllerGetSoftware(ctx context.Context, params *MitreControllerGetSoftwareParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersMitreControllerGetSoftwareRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitreControllerGetTactics(ctx context.Context, params *MitreControllerGetTacticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersMitreControllerGetTacticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitreControllerGetTechniques(ctx context.Context, params *MitreControllerGetTechniquesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersMitreControllerGetTechniquesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverviewControllerGetOverviewAgents(ctx context.Context, params *OverviewControllerGetOverviewAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersOverviewControllerGetOverviewAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RootcheckControllerPutRootcheck(ctx context.Context, params *RootcheckControllerPutRootcheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRootcheckControllerPutRootcheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RootcheckControllerDeleteRootcheck(ctx context.Context, agentId AgentId, params *RootcheckControllerDeleteRootcheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRootcheckControllerDeleteRootcheckRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RootcheckControllerGetRootcheckAgent(ctx context.Context, agentId AgentId, params *RootcheckControllerGetRootcheckAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRootcheckControllerGetRootcheckAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RootcheckControllerGetLastScanAgent(ctx context.Context, agentId AgentId, params *RootcheckControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRootcheckControllerGetLastScanAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleControllerGetRules(ctx context.Context, params *RuleControllerGetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRuleControllerGetRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleControllerGetRulesFiles(ctx context.Context, params *RuleControllerGetRulesFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRuleControllerGetRulesFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleControllerDeleteFile(ctx context.Context, filename XmlFilenamePath, params *RuleControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRuleControllerDeleteFileRequest(c.Server, filename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleControllerGetFile(ctx context.Context, filename XmlFilenamePath, params *RuleControllerGetFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRuleControllerGetFileRequest(c.Server, filename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleControllerPutFileWithBody(ctx context.Context, filename XmlFilenamePath, params *RuleControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRuleControllerPutFileRequestWithBody(c.Server, filename, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleControllerGetRulesGroups(ctx context.Context, params *RuleControllerGetRulesGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRuleControllerGetRulesGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleControllerGetRulesRequirement(ctx context.Context, requirement RuleControllerGetRulesRequirementParamsRequirement, params *RuleControllerGetRulesRequirementParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersRuleControllerGetRulesRequirementRequest(c.Server, requirement, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaControllerGetScaAgent(ctx context.Context, agentId AgentId, params *ScaControllerGetScaAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersScaControllerGetScaAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaControllerGetScaChecks(ctx context.Context, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersScaControllerGetScaChecksRequest(c.Server, agentId, policyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetRbacActions(ctx context.Context, params *SecurityControllerGetRbacActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerGetRbacActionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerDeleteSecurityConfig(ctx context.Context, params *SecurityControllerDeleteSecurityConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerDeleteSecurityConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetSecurityConfig(ctx context.Context, params *SecurityControllerGetSecurityConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerGetSecurityConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerPutSecurityConfigWithBody(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerPutSecurityConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerPutSecurityConfig(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerPutSecurityConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemovePolicies(ctx context.Context, params *SecurityControllerRemovePoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerRemovePoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetPolicies(ctx context.Context, params *SecurityControllerGetPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerGetPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddPolicyWithBody(ctx context.Context, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerAddPolicyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddPolicy(ctx context.Context, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerAddPolicyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdatePolicyWithBody(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerUpdatePolicyRequestWithBody(c.Server, policyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdatePolicy(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerUpdatePolicyRequest(c.Server, policyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetRbacResources(ctx context.Context, params *SecurityControllerGetRbacResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerGetRbacResourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveRoles(ctx context.Context, params *SecurityControllerRemoveRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerRemoveRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetRoles(ctx context.Context, params *SecurityControllerGetRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerGetRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddRoleWithBody(ctx context.Context, params *SecurityControllerAddRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerAddRoleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddRole(ctx context.Context, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerAddRoleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateRoleWithBody(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerUpdateRoleRequestWithBody(c.Server, roleId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateRole(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerUpdateRoleRequest(c.Server, roleId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveRolePolicy(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerRemoveRolePolicyRequest(c.Server, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerSetRolePolicy(ctx context.Context, roleId RoleId, params *SecurityControllerSetRolePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerSetRolePolicyRequest(c.Server, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveRoleRule(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerRemoveRoleRuleRequest(c.Server, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerSetRoleRule(ctx context.Context, roleId RoleId, params *SecurityControllerSetRoleRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerSetRoleRuleRequest(c.Server, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveRules(ctx context.Context, params *SecurityControllerRemoveRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerRemoveRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetRules(ctx context.Context, params *SecurityControllerGetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerGetRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddRuleWithBody(ctx context.Context, params *SecurityControllerAddRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerAddRuleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddRule(ctx context.Context, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerAddRuleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateRuleWithBody(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerUpdateRuleRequestWithBody(c.Server, ruleId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateRule(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerUpdateRuleRequest(c.Server, ruleId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerLogoutUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerLogoutUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerDeprecatedLoginUser(ctx context.Context, params *SecurityControllerDeprecatedLoginUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerDeprecatedLoginUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerLoginUser(ctx context.Context, params *SecurityControllerLoginUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerLoginUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRunAsLoginWithBody(ctx context.Context, params *SecurityControllerRunAsLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerRunAsLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRunAsLogin(ctx context.Context, params *SecurityControllerRunAsLoginParams, body SecurityControllerRunAsLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerRunAsLoginRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRevokeAllTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerRevokeAllTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerDeleteUsers(ctx context.Context, params *SecurityControllerDeleteUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerDeleteUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetUsers(ctx context.Context, params *SecurityControllerGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerCreateUserWithBody(ctx context.Context, params *SecurityControllerCreateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerCreateUserRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerCreateUser(ctx context.Context, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerCreateUserRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetUserMe(ctx context.Context, params *SecurityControllerGetUserMeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerGetUserMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetUserMePolicies(ctx context.Context, params *SecurityControllerGetUserMePoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerGetUserMePoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateUserWithBody(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerUpdateUserRequestWithBody(c.Server, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateUser(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerUpdateUserRequest(c.Server, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveUserRole(ctx context.Context, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerRemoveUserRoleRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerSetUserRole(ctx context.Context, userId UserIdRequired, params *SecurityControllerSetUserRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerSetUserRoleRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerEditRunAs(ctx context.Context, userId UserIdRequired, params *SecurityControllerEditRunAsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSecurityControllerEditRunAsRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscheckControllerPutSyscheck(ctx context.Context, params *SyscheckControllerPutSyscheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscheckControllerPutSyscheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscheckControllerDeleteSyscheckAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscheckControllerDeleteSyscheckAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscheckControllerGetSyscheckAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscheckControllerGetSyscheckAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscheckControllerGetLastScanAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscheckControllerGetLastScanAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetHardwareInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscollectorControllerGetHardwareInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetHotfixInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscollectorControllerGetHotfixInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetNetworkAddressInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscollectorControllerGetNetworkAddressInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetNetworkInterfaceInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetNetworkProtocolInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetOsInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetOsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscollectorControllerGetOsInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetPackagesInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscollectorControllerGetPackagesInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetPortsInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscollectorControllerGetPortsInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetProcessesInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersSyscollectorControllerGetProcessesInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TaskControllerGetTasksStatus(ctx context.Context, params *TaskControllerGetTasksStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersTaskControllerGetTasksStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VulnerabilityControllerGetVulnerabilityAgent(ctx context.Context, agentId AgentId, params *VulnerabilityControllerGetVulnerabilityAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersVulnerabilityControllerGetVulnerabilityAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VulnerabilityControllerGetLastScanAgent(ctx context.Context, agentId AgentId, params *VulnerabilityControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersVulnerabilityControllerGetLastScanAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VulnerabilityControllerGetVulnerabilitiesFieldSummary(ctx context.Context, agentId AgentId, field VulnerabilityControllerGetVulnerabilitiesFieldSummaryParamsField, params *VulnerabilityControllerGetVulnerabilitiesFieldSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiControllersVulnerabilityControllerGetVulnerabilitiesFieldSummaryRequest(c.Server, agentId, field, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApiControllersDefaultControllerDefaultInfoRequest generates requests for DefaultControllerDefaultInfo
func NewApiControllersDefaultControllerDefaultInfoRequest(server string, params *DefaultControllerDefaultInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersActiveResponseControllerRunCommandRequest calls the generic ActiveResponseControllerRunCommand builder with application/json body
func NewApiControllersActiveResponseControllerRunCommandRequest(server string, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersActiveResponseControllerRunCommandRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersActiveResponseControllerRunCommandRequestWithBody generates requests for ActiveResponseControllerRunCommand with any type of body
func NewApiControllersActiveResponseControllerRunCommandRequestWithBody(server string, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/active-response")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersAgentControllerDeleteAgentsRequest generates requests for AgentControllerDeleteAgents
func NewApiControllersAgentControllerDeleteAgentsRequest(server string, params *AgentControllerDeleteAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, params.AgentsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Purge != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge", runtime.ParamLocationQuery, *params.Purge); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.OlderThan != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "older_than", runtime.ParamLocationQuery, *params.OlderThan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.platform", runtime.ParamLocationQuery, *params.OsPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.version", runtime.ParamLocationQuery, *params.OsVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.name", runtime.ParamLocationQuery, *params.OsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manager != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manager", runtime.ParamLocationQuery, *params.Manager); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_name", runtime.ParamLocationQuery, *params.NodeName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, *params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisterIP != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registerIP", runtime.ParamLocationQuery, *params.RegisterIP); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetAgentsRequest generates requests for AgentControllerGetAgents
func NewApiControllersAgentControllerGetAgentsRequest(server string, params *AgentControllerGetAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OlderThan != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "older_than", runtime.ParamLocationQuery, *params.OlderThan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.platform", runtime.ParamLocationQuery, *params.OsPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.version", runtime.ParamLocationQuery, *params.OsVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.name", runtime.ParamLocationQuery, *params.OsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manager != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manager", runtime.ParamLocationQuery, *params.Manager); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_name", runtime.ParamLocationQuery, *params.NodeName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, *params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisterIP != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registerIP", runtime.ParamLocationQuery, *params.RegisterIP); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerAddAgentRequest calls the generic AgentControllerAddAgent builder with application/json body
func NewApiControllersAgentControllerAddAgentRequest(server string, params *AgentControllerAddAgentParams, body AgentControllerAddAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersAgentControllerAddAgentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersAgentControllerAddAgentRequestWithBody generates requests for AgentControllerAddAgent with any type of body
func NewApiControllersAgentControllerAddAgentRequestWithBody(server string, params *AgentControllerAddAgentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersAgentControllerDeleteMultipleAgentSingleGroupRequest generates requests for AgentControllerDeleteMultipleAgentSingleGroup
func NewApiControllersAgentControllerDeleteMultipleAgentSingleGroupRequest(server string, params *AgentControllerDeleteMultipleAgentSingleGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, params.AgentsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, params.GroupId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerPutMultipleAgentSingleGroupRequest generates requests for AgentControllerPutMultipleAgentSingleGroup
func NewApiControllersAgentControllerPutMultipleAgentSingleGroupRequest(server string, params *AgentControllerPutMultipleAgentSingleGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, params.GroupId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ForceSingleGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_single_group", runtime.ParamLocationQuery, *params.ForceSingleGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerRestartAgentsByGroupRequest generates requests for AgentControllerRestartAgentsByGroup
func NewApiControllersAgentControllerRestartAgentsByGroupRequest(server string, groupId GroupId, params *AgentControllerRestartAgentsByGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/group/%s/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerInsertAgentRequest calls the generic AgentControllerInsertAgent builder with application/json body
func NewApiControllersAgentControllerInsertAgentRequest(server string, params *AgentControllerInsertAgentParams, body AgentControllerInsertAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersAgentControllerInsertAgentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersAgentControllerInsertAgentRequestWithBody generates requests for AgentControllerInsertAgent with any type of body
func NewApiControllersAgentControllerInsertAgentRequestWithBody(server string, params *AgentControllerInsertAgentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/insert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersAgentControllerPostNewAgentRequest generates requests for AgentControllerPostNewAgent
func NewApiControllersAgentControllerPostNewAgentRequest(server string, params *AgentControllerPostNewAgentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/insert/quick")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agent_name", runtime.ParamLocationQuery, params.AgentName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetAgentNoGroupRequest generates requests for AgentControllerGetAgentNoGroup
func NewApiControllersAgentControllerGetAgentNoGroupRequest(server string, params *AgentControllerGetAgentNoGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/no_group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerRestartAgentsByNodeRequest generates requests for AgentControllerRestartAgentsByNode
func NewApiControllersAgentControllerRestartAgentsByNodeRequest(server string, nodeId NodeId, params *AgentControllerRestartAgentsByNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/node/%s/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetAgentOutdatedRequest generates requests for AgentControllerGetAgentOutdated
func NewApiControllersAgentControllerGetAgentOutdatedRequest(server string, params *AgentControllerGetAgentOutdatedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/outdated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerReconnectAgentsRequest generates requests for AgentControllerReconnectAgents
func NewApiControllersAgentControllerReconnectAgentsRequest(server string, params *AgentControllerReconnectAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/reconnect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerRestartAgentsRequest generates requests for AgentControllerRestartAgents
func NewApiControllersAgentControllerRestartAgentsRequest(server string, params *AgentControllerRestartAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetAgentFieldsRequest generates requests for AgentControllerGetAgentFields
func NewApiControllersAgentControllerGetAgentFieldsRequest(server string, params *AgentControllerGetAgentFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/stats/distinct")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetAgentSummaryOsRequest generates requests for AgentControllerGetAgentSummaryOs
func NewApiControllersAgentControllerGetAgentSummaryOsRequest(server string, params *AgentControllerGetAgentSummaryOsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/summary/os")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetAgentSummaryStatusRequest generates requests for AgentControllerGetAgentSummaryStatus
func NewApiControllersAgentControllerGetAgentSummaryStatusRequest(server string, params *AgentControllerGetAgentSummaryStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/summary/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerPutUpgradeAgentsRequest generates requests for AgentControllerPutUpgradeAgents
func NewApiControllersAgentControllerPutUpgradeAgentsRequest(server string, params *AgentControllerPutUpgradeAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/upgrade")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, params.AgentsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.WpkRepo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wpk_repo", runtime.ParamLocationQuery, *params.WpkRepo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpgradeVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upgrade_version", runtime.ParamLocationQuery, *params.UpgradeVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UseHttp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "use_http", runtime.ParamLocationQuery, *params.UseHttp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Force != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.platform", runtime.ParamLocationQuery, *params.OsPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.version", runtime.ParamLocationQuery, *params.OsVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.name", runtime.ParamLocationQuery, *params.OsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manager != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manager", runtime.ParamLocationQuery, *params.Manager); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_name", runtime.ParamLocationQuery, *params.NodeName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, *params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisterIP != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registerIP", runtime.ParamLocationQuery, *params.RegisterIP); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerPutUpgradeCustomAgentsRequest generates requests for AgentControllerPutUpgradeCustomAgents
func NewApiControllersAgentControllerPutUpgradeCustomAgentsRequest(server string, params *AgentControllerPutUpgradeCustomAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/upgrade_custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, params.AgentsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_path", runtime.ParamLocationQuery, params.FilePath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Installer != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installer", runtime.ParamLocationQuery, *params.Installer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.platform", runtime.ParamLocationQuery, *params.OsPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.version", runtime.ParamLocationQuery, *params.OsVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.name", runtime.ParamLocationQuery, *params.OsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manager != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manager", runtime.ParamLocationQuery, *params.Manager); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_name", runtime.ParamLocationQuery, *params.NodeName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, *params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisterIP != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registerIP", runtime.ParamLocationQuery, *params.RegisterIP); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetAgentUpgradeRequest generates requests for AgentControllerGetAgentUpgrade
func NewApiControllersAgentControllerGetAgentUpgradeRequest(server string, params *AgentControllerGetAgentUpgradeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/upgrade_result")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.platform", runtime.ParamLocationQuery, *params.OsPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.version", runtime.ParamLocationQuery, *params.OsVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.name", runtime.ParamLocationQuery, *params.OsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manager != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manager", runtime.ParamLocationQuery, *params.Manager); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_name", runtime.ParamLocationQuery, *params.NodeName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, *params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisterIP != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registerIP", runtime.ParamLocationQuery, *params.RegisterIP); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetAgentConfigRequest generates requests for AgentControllerGetAgentConfig
func NewApiControllersAgentControllerGetAgentConfigRequest(server string, agentId AgentId, component AgentControllerGetAgentConfigParamsComponent, configuration AgentControllerGetAgentConfigParamsConfiguration, params *AgentControllerGetAgentConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "configuration", runtime.ParamLocationPath, configuration)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/config/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentControllerGetDaemonStatsRequest generates requests for AgentControllerGetDaemonStats
func NewApiControllersAgentControllerGetDaemonStatsRequest(server string, agentId AgentId, params *AgentControllerGetDaemonStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/daemons/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DaemonsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemons_list", runtime.ParamLocationQuery, *params.DaemonsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerDeleteSingleAgentMultipleGroupsRequest generates requests for AgentControllerDeleteSingleAgentMultipleGroups
func NewApiControllersAgentControllerDeleteSingleAgentMultipleGroupsRequest(server string, agentId AgentId, params *AgentControllerDeleteSingleAgentMultipleGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/group", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groups_list", runtime.ParamLocationQuery, *params.GroupsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetSyncAgentRequest generates requests for AgentControllerGetSyncAgent
func NewApiControllersAgentControllerGetSyncAgentRequest(server string, agentId AgentId, params *AgentControllerGetSyncAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/group/is_sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerDeleteSingleAgentSingleGroupRequest generates requests for AgentControllerDeleteSingleAgentSingleGroup
func NewApiControllersAgentControllerDeleteSingleAgentSingleGroupRequest(server string, agentId AgentId, groupId GroupId, params *AgentControllerDeleteSingleAgentSingleGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/group/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerPutAgentSingleGroupRequest generates requests for AgentControllerPutAgentSingleGroup
func NewApiControllersAgentControllerPutAgentSingleGroupRequest(server string, agentId AgentId, groupId GroupId, params *AgentControllerPutAgentSingleGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/group/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ForceSingleGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_single_group", runtime.ParamLocationQuery, *params.ForceSingleGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetAgentKeyRequest generates requests for AgentControllerGetAgentKey
func NewApiControllersAgentControllerGetAgentKeyRequest(server string, agentId AgentId, params *AgentControllerGetAgentKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerRestartAgentRequest generates requests for AgentControllerRestartAgent
func NewApiControllersAgentControllerRestartAgentRequest(server string, agentId AgentId, params *AgentControllerRestartAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetComponentStatsRequest generates requests for AgentControllerGetComponentStats
func NewApiControllersAgentControllerGetComponentStatsRequest(server string, agentId AgentId, component AgentControllerGetComponentStatsParamsComponent, params *AgentControllerGetComponentStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/stats/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersCiscatControllerGetAgentsCiscatResultsRequest generates requests for CiscatControllerGetAgentsCiscatResults
func NewApiControllersCiscatControllerGetAgentsCiscatResultsRequest(server string, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciscat/%s/results", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Benchmark != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "benchmark", runtime.ParamLocationQuery, *params.Benchmark); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Profile != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "profile", runtime.ParamLocationQuery, *params.Profile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pass != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pass", runtime.ParamLocationQuery, *params.Pass); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fail != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fail", runtime.ParamLocationQuery, *params.Fail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Error != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error", runtime.ParamLocationQuery, *params.Error); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Notchecked != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notchecked", runtime.ParamLocationQuery, *params.Notchecked); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unknown != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unknown", runtime.ParamLocationQuery, *params.Unknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Score != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score", runtime.ParamLocationQuery, *params.Score); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetApiConfigRequest generates requests for ClusterControllerGetApiConfig
func NewApiControllersClusterControllerGetApiConfigRequest(server string, params *ClusterControllerGetApiConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/api/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodes_list", runtime.ParamLocationQuery, *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetConfValidationRequest generates requests for ClusterControllerGetConfValidation
func NewApiControllersClusterControllerGetConfValidationRequest(server string, params *ClusterControllerGetConfValidationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/configuration/validation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodes_list", runtime.ParamLocationQuery, *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetHealthcheckRequest generates requests for ClusterControllerGetHealthcheck
func NewApiControllersClusterControllerGetHealthcheckRequest(server string, params *ClusterControllerGetHealthcheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/healthcheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodes_list", runtime.ParamLocationQuery, *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetConfigRequest generates requests for ClusterControllerGetConfig
func NewApiControllersClusterControllerGetConfigRequest(server string, params *ClusterControllerGetConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/local/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetClusterNodeRequest generates requests for ClusterControllerGetClusterNode
func NewApiControllersClusterControllerGetClusterNodeRequest(server string, params *ClusterControllerGetClusterNodeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/local/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetClusterNodesRequest generates requests for ClusterControllerGetClusterNodes
func NewApiControllersClusterControllerGetClusterNodesRequest(server string, params *ClusterControllerGetClusterNodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodes_list", runtime.ParamLocationQuery, *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}

		}
	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerPutRestartRequest generates requests for ClusterControllerPutRestart
func NewApiControllersClusterControllerPutRestartRequest(server string, params *ClusterControllerPutRestartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodes_list", runtime.ParamLocationQuery, *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetNodesRulesetSyncStatusRequest generates requests for ClusterControllerGetNodesRulesetSyncStatus
func NewApiControllersClusterControllerGetNodesRulesetSyncStatusRequest(server string, params *ClusterControllerGetNodesRulesetSyncStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/ruleset/synchronization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodes_list", runtime.ParamLocationQuery, *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetStatusRequest generates requests for ClusterControllerGetStatus
func NewApiControllersClusterControllerGetStatusRequest(server string, params *ClusterControllerGetStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetConfigurationNodeRequest generates requests for ClusterControllerGetConfigurationNode
func NewApiControllersClusterControllerGetConfigurationNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raw", runtime.ParamLocationQuery, *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Section != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "section", runtime.ParamLocationQuery, *params.Section); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Field != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "field", runtime.ParamLocationQuery, *params.Field); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerUpdateConfigurationRequestWithBody generates requests for ClusterControllerUpdateConfiguration with any type of body
func NewApiControllersClusterControllerUpdateConfigurationRequestWithBody(server string, nodeId NodeId, params *ClusterControllerUpdateConfigurationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersClusterControllerGetNodeConfigRequest generates requests for ClusterControllerGetNodeConfig
func NewApiControllersClusterControllerGetNodeConfigRequest(server string, nodeId NodeId, component ClusterControllerGetNodeConfigParamsComponent, configuration ClusterControllerGetNodeConfigParamsConfiguration, params *ClusterControllerGetNodeConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "configuration", runtime.ParamLocationPath, configuration)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/configuration/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetDaemonStatsNodeRequest generates requests for ClusterControllerGetDaemonStatsNode
func NewApiControllersClusterControllerGetDaemonStatsNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetDaemonStatsNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/daemons/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DaemonsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemons_list", runtime.ParamLocationQuery, *params.DaemonsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetInfoNodeRequest generates requests for ClusterControllerGetInfoNode
func NewApiControllersClusterControllerGetInfoNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetInfoNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetLogNodeRequest generates requests for ClusterControllerGetLogNode
func NewApiControllersClusterControllerGetLogNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetLogNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Level != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetLogSummaryNodeRequest generates requests for ClusterControllerGetLogSummaryNode
func NewApiControllersClusterControllerGetLogSummaryNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/logs/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetStatsNodeRequest generates requests for ClusterControllerGetStatsNode
func NewApiControllersClusterControllerGetStatsNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetStatsAnalysisdNodeRequest generates requests for ClusterControllerGetStatsAnalysisdNode
func NewApiControllersClusterControllerGetStatsAnalysisdNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/stats/analysisd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetStatsHourlyNodeRequest generates requests for ClusterControllerGetStatsHourlyNode
func NewApiControllersClusterControllerGetStatsHourlyNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/stats/hourly", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetStatsRemotedNodeRequest generates requests for ClusterControllerGetStatsRemotedNode
func NewApiControllersClusterControllerGetStatsRemotedNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/stats/remoted", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetStatsWeeklyNodeRequest generates requests for ClusterControllerGetStatsWeeklyNode
func NewApiControllersClusterControllerGetStatsWeeklyNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/stats/weekly", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersClusterControllerGetStatusNodeRequest generates requests for ClusterControllerGetStatusNode
func NewApiControllersClusterControllerGetStatusNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatusNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersDecoderControllerGetDecodersRequest generates requests for DecoderControllerGetDecoders
func NewApiControllersDecoderControllerGetDecodersRequest(server string, params *DecoderControllerGetDecodersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decoders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DecoderNames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "decoder_names", runtime.ParamLocationQuery, *params.DecoderNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersDecoderControllerGetDecodersFilesRequest generates requests for DecoderControllerGetDecodersFiles
func NewApiControllersDecoderControllerGetDecodersFilesRequest(server string, params *DecoderControllerGetDecodersFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decoders/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersDecoderControllerDeleteFileRequest generates requests for DecoderControllerDeleteFile
func NewApiControllersDecoderControllerDeleteFileRequest(server string, filename XmlFilenamePath, params *DecoderControllerDeleteFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decoders/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersDecoderControllerGetFileRequest generates requests for DecoderControllerGetFile
func NewApiControllersDecoderControllerGetFileRequest(server string, filename XmlFilenamePath, params *DecoderControllerGetFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decoders/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raw", runtime.ParamLocationQuery, *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersDecoderControllerPutFileRequestWithBody generates requests for DecoderControllerPutFile with any type of body
func NewApiControllersDecoderControllerPutFileRequestWithBody(server string, filename XmlFilenamePath, params *DecoderControllerPutFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decoders/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Overwrite != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overwrite", runtime.ParamLocationQuery, *params.Overwrite); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersDecoderControllerGetDecodersParentsRequest generates requests for DecoderControllerGetDecodersParents
func NewApiControllersDecoderControllerGetDecodersParentsRequest(server string, params *DecoderControllerGetDecodersParentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decoders/parents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersEventControllerForwardEventRequest calls the generic EventControllerForwardEvent builder with application/json body
func NewApiControllersEventControllerForwardEventRequest(server string, params *EventControllerForwardEventParams, body EventControllerForwardEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersEventControllerForwardEventRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersEventControllerForwardEventRequestWithBody generates requests for EventControllerForwardEvent with any type of body
func NewApiControllersEventControllerForwardEventRequestWithBody(server string, params *EventControllerForwardEventParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersExperimentalControllerGetCisCatResultsRequest generates requests for ExperimentalControllerGetCisCatResults
func NewApiControllersExperimentalControllerGetCisCatResultsRequest(server string, params *ExperimentalControllerGetCisCatResultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/ciscat/results")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Benchmark != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "benchmark", runtime.ParamLocationQuery, *params.Benchmark); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Profile != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "profile", runtime.ParamLocationQuery, *params.Profile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pass != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pass", runtime.ParamLocationQuery, *params.Pass); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fail != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fail", runtime.ParamLocationQuery, *params.Fail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Error != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error", runtime.ParamLocationQuery, *params.Error); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Notchecked != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notchecked", runtime.ParamLocationQuery, *params.Notchecked); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unknown != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unknown", runtime.ParamLocationQuery, *params.Unknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Score != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score", runtime.ParamLocationQuery, *params.Score); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerClearRootcheckDatabaseRequest generates requests for ExperimentalControllerClearRootcheckDatabase
func NewApiControllersExperimentalControllerClearRootcheckDatabaseRequest(server string, params *ExperimentalControllerClearRootcheckDatabaseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/rootcheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, params.AgentsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerClearSyscheckDatabaseRequest generates requests for ExperimentalControllerClearSyscheckDatabase
func NewApiControllersExperimentalControllerClearSyscheckDatabaseRequest(server string, params *ExperimentalControllerClearSyscheckDatabaseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, params.AgentsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerGetHardwareInfoRequest generates requests for ExperimentalControllerGetHardwareInfo
func NewApiControllersExperimentalControllerGetHardwareInfoRequest(server string, params *ExperimentalControllerGetHardwareInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscollector/hardware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RamFree != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ram.free", runtime.ParamLocationQuery, *params.RamFree); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RamTotal != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ram.total", runtime.ParamLocationQuery, *params.RamTotal); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CpuCores != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cpu.cores", runtime.ParamLocationQuery, *params.CpuCores); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CpuMhz != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cpu.mhz", runtime.ParamLocationQuery, *params.CpuMhz); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CpuName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cpu.name", runtime.ParamLocationQuery, *params.CpuName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BoardSerial != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "board_serial", runtime.ParamLocationQuery, *params.BoardSerial); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerGetHotfixesInfoRequest generates requests for ExperimentalControllerGetHotfixesInfo
func NewApiControllersExperimentalControllerGetHotfixesInfoRequest(server string, params *ExperimentalControllerGetHotfixesInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscollector/hotfixes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hotfix != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hotfix", runtime.ParamLocationQuery, *params.Hotfix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerGetNetworkAddressInfoRequest generates requests for ExperimentalControllerGetNetworkAddressInfo
func NewApiControllersExperimentalControllerGetNetworkAddressInfoRequest(server string, params *ExperimentalControllerGetNetworkAddressInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscollector/netaddr")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Proto != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "proto", runtime.ParamLocationQuery, *params.Proto); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Address != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, *params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Broadcast != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "broadcast", runtime.ParamLocationQuery, *params.Broadcast); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Netmask != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "netmask", runtime.ParamLocationQuery, *params.Netmask); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest generates requests for ExperimentalControllerGetNetworkInterfaceInfo
func NewApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest(server string, params *ExperimentalControllerGetNetworkInterfaceInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscollector/netiface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Adapter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adapter", runtime.ParamLocationQuery, *params.Adapter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Mtu != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mtu", runtime.ParamLocationQuery, *params.Mtu); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxPackets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx.packets", runtime.ParamLocationQuery, *params.TxPackets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxPackets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rx.packets", runtime.ParamLocationQuery, *params.RxPackets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxBytes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx.bytes", runtime.ParamLocationQuery, *params.TxBytes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxBytes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rx.bytes", runtime.ParamLocationQuery, *params.RxBytes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxErrors != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx.errors", runtime.ParamLocationQuery, *params.TxErrors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxErrors != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rx.errors", runtime.ParamLocationQuery, *params.RxErrors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxDropped != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx.dropped", runtime.ParamLocationQuery, *params.TxDropped); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxDropped != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rx.dropped", runtime.ParamLocationQuery, *params.RxDropped); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerGetNetworkProtocolInfoRequest generates requests for ExperimentalControllerGetNetworkProtocolInfo
func NewApiControllersExperimentalControllerGetNetworkProtocolInfoRequest(server string, params *ExperimentalControllerGetNetworkProtocolInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscollector/netproto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Iface != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iface", runtime.ParamLocationQuery, *params.Iface); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gateway != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway", runtime.ParamLocationQuery, *params.Gateway); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Dhcp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dhcp", runtime.ParamLocationQuery, *params.Dhcp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerGetOsInfoRequest generates requests for ExperimentalControllerGetOsInfo
func NewApiControllersExperimentalControllerGetOsInfoRequest(server string, params *ExperimentalControllerGetOsInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscollector/os")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.name", runtime.ParamLocationQuery, *params.OsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Architecture != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "architecture", runtime.ParamLocationQuery, *params.Architecture); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os.version", runtime.ParamLocationQuery, *params.OsVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Release != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "release", runtime.ParamLocationQuery, *params.Release); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerGetPackagesInfoRequest generates requests for ExperimentalControllerGetPackagesInfo
func NewApiControllersExperimentalControllerGetPackagesInfoRequest(server string, params *ExperimentalControllerGetPackagesInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscollector/packages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vendor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vendor", runtime.ParamLocationQuery, *params.Vendor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Architecture != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "architecture", runtime.ParamLocationQuery, *params.Architecture); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerGetPortsInfoRequest generates requests for ExperimentalControllerGetPortsInfo
func NewApiControllersExperimentalControllerGetPortsInfoRequest(server string, params *ExperimentalControllerGetPortsInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscollector/ports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pid", runtime.ParamLocationQuery, *params.Pid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Protocol != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protocol", runtime.ParamLocationQuery, *params.Protocol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocalIp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local.ip", runtime.ParamLocationQuery, *params.LocalIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocalPort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local.port", runtime.ParamLocationQuery, *params.LocalPort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RemoteIp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote.ip", runtime.ParamLocationQuery, *params.RemoteIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxQueue != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx_queue", runtime.ParamLocationQuery, *params.TxQueue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Process != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "process", runtime.ParamLocationQuery, *params.Process); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersExperimentalControllerGetProcessesInfoRequest generates requests for ExperimentalControllerGetProcessesInfo
func NewApiControllersExperimentalControllerGetProcessesInfoRequest(server string, params *ExperimentalControllerGetProcessesInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experimental/syscollector/processes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pid", runtime.ParamLocationQuery, *params.Pid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ppid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ppid", runtime.ParamLocationQuery, *params.Ppid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Egroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "egroup", runtime.ParamLocationQuery, *params.Egroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Euser != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "euser", runtime.ParamLocationQuery, *params.Euser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fgroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fgroup", runtime.ParamLocationQuery, *params.Fgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Nlwp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nlwp", runtime.ParamLocationQuery, *params.Nlwp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pgrp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pgrp", runtime.ParamLocationQuery, *params.Pgrp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Priority != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "priority", runtime.ParamLocationQuery, *params.Priority); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Rgroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rgroup", runtime.ParamLocationQuery, *params.Rgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ruser != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruser", runtime.ParamLocationQuery, *params.Ruser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sgroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sgroup", runtime.ParamLocationQuery, *params.Sgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Suser != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "suser", runtime.ParamLocationQuery, *params.Suser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerDeleteGroupsRequest generates requests for AgentControllerDeleteGroups
func NewApiControllersAgentControllerDeleteGroupsRequest(server string, params *AgentControllerDeleteGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groups_list", runtime.ParamLocationQuery, params.GroupsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetListGroupRequest generates requests for AgentControllerGetListGroup
func NewApiControllersAgentControllerGetListGroupRequest(server string, params *AgentControllerGetListGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groups_list", runtime.ParamLocationQuery, *params.GroupsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hash != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, *params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerPostGroupRequest calls the generic AgentControllerPostGroup builder with application/json body
func NewApiControllersAgentControllerPostGroupRequest(server string, params *AgentControllerPostGroupParams, body AgentControllerPostGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersAgentControllerPostGroupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersAgentControllerPostGroupRequestWithBody generates requests for AgentControllerPostGroup with any type of body
func NewApiControllersAgentControllerPostGroupRequestWithBody(server string, params *AgentControllerPostGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersAgentControllerGetAgentsInGroupRequest generates requests for AgentControllerGetAgentsInGroup
func NewApiControllersAgentControllerGetAgentsInGroupRequest(server string, groupId GroupId, params *AgentControllerGetAgentsInGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/agents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetGroupConfigRequest generates requests for AgentControllerGetGroupConfig
func NewApiControllersAgentControllerGetGroupConfigRequest(server string, groupId GroupId, params *AgentControllerGetGroupConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerPutGroupConfigRequestWithBody generates requests for AgentControllerPutGroupConfig with any type of body
func NewApiControllersAgentControllerPutGroupConfigRequestWithBody(server string, groupId GroupId, params *AgentControllerPutGroupConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersAgentControllerGetGroupFilesRequest generates requests for AgentControllerGetGroupFiles
func NewApiControllersAgentControllerGetGroupFilesRequest(server string, groupId GroupId, params *AgentControllerGetGroupFilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/files", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hash != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, *params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetGroupFileJsonRequest generates requests for AgentControllerGetGroupFileJson
func NewApiControllersAgentControllerGetGroupFileJsonRequest(server string, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileJsonParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_name", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/files/%s/json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersAgentControllerGetGroupFileXmlRequest generates requests for AgentControllerGetGroupFileXml
func NewApiControllersAgentControllerGetGroupFileXmlRequest(server string, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileXmlParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_name", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/files/%s/xml", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	//if params.Raw != nil {
	//	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raw", runtime.ParamLocationQuery, *params.Raw); err != nil {
	//		return nil, err
	//	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
	//		return nil, err
	//	} else {
	//		for k, v := range parsed {
	//			for _, v2 := range v {
	//				queryValues.Add(k, v2)
	//			}
	//		}
	//	}
	//}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersCdbListControllerGetListsRequest generates requests for CdbListControllerGetLists
func NewApiControllersCdbListControllerGetListsRequest(server string, params *CdbListControllerGetListsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersCdbListControllerGetListsFilesRequest generates requests for CdbListControllerGetListsFiles
func NewApiControllersCdbListControllerGetListsFilesRequest(server string, params *CdbListControllerGetListsFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersCdbListControllerDeleteFileRequest generates requests for CdbListControllerDeleteFile
func NewApiControllersCdbListControllerDeleteFileRequest(server string, filename ListFilenamePath, params *CdbListControllerDeleteFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersCdbListControllerGetFileRequest generates requests for CdbListControllerGetFile
func NewApiControllersCdbListControllerGetFileRequest(server string, filename ListFilenamePath, params *CdbListControllerGetFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raw", runtime.ParamLocationQuery, *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersCdbListControllerPutFileRequestWithBody generates requests for CdbListControllerPutFile with any type of body
func NewApiControllersCdbListControllerPutFileRequestWithBody(server string, filename ListFilenamePath, params *CdbListControllerPutFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Overwrite != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overwrite", runtime.ParamLocationQuery, *params.Overwrite); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersLogtestControllerRunLogtestToolRequest calls the generic LogtestControllerRunLogtestTool builder with application/json body
func NewApiControllersLogtestControllerRunLogtestToolRequest(server string, params *LogtestControllerRunLogtestToolParams, body LogtestControllerRunLogtestToolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersLogtestControllerRunLogtestToolRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersLogtestControllerRunLogtestToolRequestWithBody generates requests for LogtestControllerRunLogtestTool with any type of body
func NewApiControllersLogtestControllerRunLogtestToolRequestWithBody(server string, params *LogtestControllerRunLogtestToolParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logtest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersLogtestControllerEndLogtestSessionRequest generates requests for LogtestControllerEndLogtestSession
func NewApiControllersLogtestControllerEndLogtestSessionRequest(server string, token LogtestToken, params *LogtestControllerEndLogtestSessionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logtest/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetApiConfigRequest generates requests for ManagerControllerGetApiConfig
func NewApiControllersManagerControllerGetApiConfigRequest(server string, params *ManagerControllerGetApiConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/api/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetConfigurationRequest generates requests for ManagerControllerGetConfiguration
func NewApiControllersManagerControllerGetConfigurationRequest(server string, params *ManagerControllerGetConfigurationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raw", runtime.ParamLocationQuery, *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Section != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "section", runtime.ParamLocationQuery, *params.Section); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Field != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "field", runtime.ParamLocationQuery, *params.Field); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerUpdateConfigurationRequestWithBody generates requests for ManagerControllerUpdateConfiguration with any type of body
func NewApiControllersManagerControllerUpdateConfigurationRequestWithBody(server string, params *ManagerControllerUpdateConfigurationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersManagerControllerGetConfValidationRequest generates requests for ManagerControllerGetConfValidation
func NewApiControllersManagerControllerGetConfValidationRequest(server string, params *ManagerControllerGetConfValidationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/configuration/validation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetManagerConfigOndemandRequest generates requests for ManagerControllerGetManagerConfigOndemand
func NewApiControllersManagerControllerGetManagerConfigOndemandRequest(server string, component ManagerControllerGetManagerConfigOndemandParamsComponent, configuration ManagerControllerGetManagerConfigOndemandParamsConfiguration, params *ManagerControllerGetManagerConfigOndemandParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configuration", runtime.ParamLocationPath, configuration)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/configuration/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetDaemonStatsRequest generates requests for ManagerControllerGetDaemonStats
func NewApiControllersManagerControllerGetDaemonStatsRequest(server string, params *ManagerControllerGetDaemonStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/daemons/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DaemonsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemons_list", runtime.ParamLocationQuery, *params.DaemonsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetInfoRequest generates requests for ManagerControllerGetInfo
func NewApiControllersManagerControllerGetInfoRequest(server string, params *ManagerControllerGetInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetLogRequest generates requests for ManagerControllerGetLog
func NewApiControllersManagerControllerGetLogRequest(server string, params *ManagerControllerGetLogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Level != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetLogSummaryRequest generates requests for ManagerControllerGetLogSummary
func NewApiControllersManagerControllerGetLogSummaryRequest(server string, params *ManagerControllerGetLogSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/logs/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerPutRestartRequest generates requests for ManagerControllerPutRestart
func NewApiControllersManagerControllerPutRestartRequest(server string, params *ManagerControllerPutRestartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetStatsRequest generates requests for ManagerControllerGetStats
func NewApiControllersManagerControllerGetStatsRequest(server string, params *ManagerControllerGetStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetStatsAnalysisdRequest generates requests for ManagerControllerGetStatsAnalysisd
func NewApiControllersManagerControllerGetStatsAnalysisdRequest(server string, params *ManagerControllerGetStatsAnalysisdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/stats/analysisd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetStatsHourlyRequest generates requests for ManagerControllerGetStatsHourly
func NewApiControllersManagerControllerGetStatsHourlyRequest(server string, params *ManagerControllerGetStatsHourlyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/stats/hourly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetStatsRemotedRequest generates requests for ManagerControllerGetStatsRemoted
func NewApiControllersManagerControllerGetStatsRemotedRequest(server string, params *ManagerControllerGetStatsRemotedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/stats/remoted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetStatsWeeklyRequest generates requests for ManagerControllerGetStatsWeekly
func NewApiControllersManagerControllerGetStatsWeeklyRequest(server string, params *ManagerControllerGetStatsWeeklyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/stats/weekly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerGetStatusRequest generates requests for ManagerControllerGetStatus
func NewApiControllersManagerControllerGetStatusRequest(server string, params *ManagerControllerGetStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersManagerControllerCheckAvailableVersionRequest generates requests for ManagerControllerCheckAvailableVersion
func NewApiControllersManagerControllerCheckAvailableVersionRequest(server string, params *ManagerControllerCheckAvailableVersionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manager/version/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ForceQuery != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_query", runtime.ParamLocationQuery, *params.ForceQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersMitreControllerGetGroupsRequest generates requests for MitreControllerGetGroups
func NewApiControllersMitreControllerGetGroupsRequest(server string, params *MitreControllerGetGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mitre/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.GroupIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_ids", runtime.ParamLocationQuery, *params.GroupIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersMitreControllerGetMetadataRequest generates requests for MitreControllerGetMetadata
func NewApiControllersMitreControllerGetMetadataRequest(server string, params *MitreControllerGetMetadataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mitre/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersMitreControllerGetMitigationsRequest generates requests for MitreControllerGetMitigations
func NewApiControllersMitreControllerGetMitigationsRequest(server string, params *MitreControllerGetMitigationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mitre/mitigations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.MitigationIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigation_ids", runtime.ParamLocationQuery, *params.MitigationIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersMitreControllerGetReferencesRequest generates requests for MitreControllerGetReferences
func NewApiControllersMitreControllerGetReferencesRequest(server string, params *MitreControllerGetReferencesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mitre/references")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ReferenceIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference_ids", runtime.ParamLocationQuery, *params.ReferenceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersMitreControllerGetSoftwareRequest generates requests for MitreControllerGetSoftware
func NewApiControllersMitreControllerGetSoftwareRequest(server string, params *MitreControllerGetSoftwareParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mitre/software")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SoftwareIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "software_ids", runtime.ParamLocationQuery, *params.SoftwareIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersMitreControllerGetTacticsRequest generates requests for MitreControllerGetTactics
func NewApiControllersMitreControllerGetTacticsRequest(server string, params *MitreControllerGetTacticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mitre/tactics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TacticIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tactic_ids", runtime.ParamLocationQuery, *params.TacticIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersMitreControllerGetTechniquesRequest generates requests for MitreControllerGetTechniques
func NewApiControllersMitreControllerGetTechniquesRequest(server string, params *MitreControllerGetTechniquesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mitre/techniques")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TechniqueIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "technique_ids", runtime.ParamLocationQuery, *params.TechniqueIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersOverviewControllerGetOverviewAgentsRequest generates requests for OverviewControllerGetOverviewAgents
func NewApiControllersOverviewControllerGetOverviewAgentsRequest(server string, params *OverviewControllerGetOverviewAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/overview/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRootcheckControllerPutRootcheckRequest generates requests for RootcheckControllerPutRootcheck
func NewApiControllersRootcheckControllerPutRootcheckRequest(server string, params *RootcheckControllerPutRootcheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rootcheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRootcheckControllerDeleteRootcheckRequest generates requests for RootcheckControllerDeleteRootcheck
func NewApiControllersRootcheckControllerDeleteRootcheckRequest(server string, agentId AgentId, params *RootcheckControllerDeleteRootcheckParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rootcheck/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRootcheckControllerGetRootcheckAgentRequest generates requests for RootcheckControllerGetRootcheckAgent
func NewApiControllersRootcheckControllerGetRootcheckAgentRequest(server string, agentId AgentId, params *RootcheckControllerGetRootcheckAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rootcheck/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PciDss != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pci_dss", runtime.ParamLocationQuery, *params.PciDss); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cis != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cis", runtime.ParamLocationQuery, *params.Cis); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRootcheckControllerGetLastScanAgentRequest generates requests for RootcheckControllerGetLastScanAgent
func NewApiControllersRootcheckControllerGetLastScanAgentRequest(server string, agentId AgentId, params *RootcheckControllerGetLastScanAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rootcheck/%s/last_scan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRuleControllerGetRulesRequest generates requests for RuleControllerGetRules
func NewApiControllersRuleControllerGetRulesRequest(server string, params *RuleControllerGetRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RuleIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_ids", runtime.ParamLocationQuery, *params.RuleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Level != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PciDss != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pci_dss", runtime.ParamLocationQuery, *params.PciDss); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gdpr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gdpr", runtime.ParamLocationQuery, *params.Gdpr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gpg13 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gpg13", runtime.ParamLocationQuery, *params.Gpg13); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hipaa != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hipaa", runtime.ParamLocationQuery, *params.Hipaa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Nist80053 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nist-800-53", runtime.ParamLocationQuery, *params.Nist80053); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tsc != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tsc", runtime.ParamLocationQuery, *params.Tsc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Mitre != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitre", runtime.ParamLocationQuery, *params.Mitre); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRuleControllerGetRulesFilesRequest generates requests for RuleControllerGetRulesFiles
func NewApiControllersRuleControllerGetRulesFilesRequest(server string, params *RuleControllerGetRulesFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRuleControllerDeleteFileRequest generates requests for RuleControllerDeleteFile
func NewApiControllersRuleControllerDeleteFileRequest(server string, filename XmlFilenamePath, params *RuleControllerDeleteFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRuleControllerGetFileRequest generates requests for RuleControllerGetFile
func NewApiControllersRuleControllerGetFileRequest(server string, filename XmlFilenamePath, params *RuleControllerGetFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raw", runtime.ParamLocationQuery, *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRuleControllerPutFileRequestWithBody generates requests for RuleControllerPutFile with any type of body
func NewApiControllersRuleControllerPutFileRequestWithBody(server string, filename XmlFilenamePath, params *RuleControllerPutFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Overwrite != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overwrite", runtime.ParamLocationQuery, *params.Overwrite); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_dirname", runtime.ParamLocationQuery, *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersRuleControllerGetRulesGroupsRequest generates requests for RuleControllerGetRulesGroups
func NewApiControllersRuleControllerGetRulesGroupsRequest(server string, params *RuleControllerGetRulesGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersRuleControllerGetRulesRequirementRequest generates requests for RuleControllerGetRulesRequirement
func NewApiControllersRuleControllerGetRulesRequirementRequest(server string, requirement RuleControllerGetRulesRequirementParamsRequirement, params *RuleControllerGetRulesRequirementParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requirement", runtime.ParamLocationPath, requirement)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/requirement/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersScaControllerGetScaAgentRequest generates requests for ScaControllerGetScaAgent
func NewApiControllersScaControllerGetScaAgentRequest(server string, agentId AgentId, params *ScaControllerGetScaAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sca/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.References != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "references", runtime.ParamLocationQuery, *params.References); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersScaControllerGetScaChecksRequest generates requests for ScaControllerGetScaChecks
func NewApiControllersScaControllerGetScaChecksRequest(server string, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sca/%s/checks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Title != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Rationale != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rationale", runtime.ParamLocationQuery, *params.Rationale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Remediation != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remediation", runtime.ParamLocationQuery, *params.Remediation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Command != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "command", runtime.ParamLocationQuery, *params.Command); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Reason != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reason", runtime.ParamLocationQuery, *params.Reason); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.File != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Process != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "process", runtime.ParamLocationQuery, *params.Process); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Directory != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "directory", runtime.ParamLocationQuery, *params.Directory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Registry != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry", runtime.ParamLocationQuery, *params.Registry); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.References != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "references", runtime.ParamLocationQuery, *params.References); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Result != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "result", runtime.ParamLocationQuery, *params.Result); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Condition != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "condition", runtime.ParamLocationQuery, *params.Condition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerGetRbacActionsRequest generates requests for SecurityControllerGetRbacActions
func NewApiControllersSecurityControllerGetRbacActionsRequest(server string, params *SecurityControllerGetRbacActionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Endpoint != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint", runtime.ParamLocationQuery, *params.Endpoint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerDeleteSecurityConfigRequest generates requests for SecurityControllerDeleteSecurityConfig
func NewApiControllersSecurityControllerDeleteSecurityConfigRequest(server string, params *SecurityControllerDeleteSecurityConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerGetSecurityConfigRequest generates requests for SecurityControllerGetSecurityConfig
func NewApiControllersSecurityControllerGetSecurityConfigRequest(server string, params *SecurityControllerGetSecurityConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerPutSecurityConfigRequest calls the generic SecurityControllerPutSecurityConfig builder with application/json body
func NewApiControllersSecurityControllerPutSecurityConfigRequest(server string, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerPutSecurityConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerPutSecurityConfigRequestWithBody generates requests for SecurityControllerPutSecurityConfig with any type of body
func NewApiControllersSecurityControllerPutSecurityConfigRequestWithBody(server string, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerRemovePoliciesRequest generates requests for SecurityControllerRemovePolicies
func NewApiControllersSecurityControllerRemovePoliciesRequest(server string, params *SecurityControllerRemovePoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policy_ids", runtime.ParamLocationQuery, params.PolicyIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerGetPoliciesRequest generates requests for SecurityControllerGetPolicies
func NewApiControllersSecurityControllerGetPoliciesRequest(server string, params *SecurityControllerGetPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PolicyIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policy_ids", runtime.ParamLocationQuery, *params.PolicyIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerAddPolicyRequest calls the generic SecurityControllerAddPolicy builder with application/json body
func NewApiControllersSecurityControllerAddPolicyRequest(server string, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerAddPolicyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerAddPolicyRequestWithBody generates requests for SecurityControllerAddPolicy with any type of body
func NewApiControllersSecurityControllerAddPolicyRequestWithBody(server string, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerUpdatePolicyRequest calls the generic SecurityControllerUpdatePolicy builder with application/json body
func NewApiControllersSecurityControllerUpdatePolicyRequest(server string, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerUpdatePolicyRequestWithBody(server, policyId, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerUpdatePolicyRequestWithBody generates requests for SecurityControllerUpdatePolicy with any type of body
func NewApiControllersSecurityControllerUpdatePolicyRequestWithBody(server string, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerGetRbacResourcesRequest generates requests for SecurityControllerGetRbacResources
func NewApiControllersSecurityControllerGetRbacResourcesRequest(server string, params *SecurityControllerGetRbacResourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Resource != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, *params.Resource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerRemoveRolesRequest generates requests for SecurityControllerRemoveRoles
func NewApiControllersSecurityControllerRemoveRolesRequest(server string, params *SecurityControllerRemoveRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role_ids", runtime.ParamLocationQuery, params.RoleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerGetRolesRequest generates requests for SecurityControllerGetRoles
func NewApiControllersSecurityControllerGetRolesRequest(server string, params *SecurityControllerGetRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RoleIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role_ids", runtime.ParamLocationQuery, *params.RoleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerAddRoleRequest calls the generic SecurityControllerAddRole builder with application/json body
func NewApiControllersSecurityControllerAddRoleRequest(server string, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerAddRoleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerAddRoleRequestWithBody generates requests for SecurityControllerAddRole with any type of body
func NewApiControllersSecurityControllerAddRoleRequestWithBody(server string, params *SecurityControllerAddRoleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerUpdateRoleRequest calls the generic SecurityControllerUpdateRole builder with application/json body
func NewApiControllersSecurityControllerUpdateRoleRequest(server string, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerUpdateRoleRequestWithBody(server, roleId, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerUpdateRoleRequestWithBody generates requests for SecurityControllerUpdateRole with any type of body
func NewApiControllersSecurityControllerUpdateRoleRequestWithBody(server string, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerRemoveRolePolicyRequest generates requests for SecurityControllerRemoveRolePolicy
func NewApiControllersSecurityControllerRemoveRolePolicyRequest(server string, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/roles/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policy_ids", runtime.ParamLocationQuery, params.PolicyIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerSetRolePolicyRequest generates requests for SecurityControllerSetRolePolicy
func NewApiControllersSecurityControllerSetRolePolicyRequest(server string, roleId RoleId, params *SecurityControllerSetRolePolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/roles/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policy_ids", runtime.ParamLocationQuery, params.PolicyIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Position != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "position", runtime.ParamLocationQuery, *params.Position); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerRemoveRoleRuleRequest generates requests for SecurityControllerRemoveRoleRule
func NewApiControllersSecurityControllerRemoveRoleRuleRequest(server string, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/roles/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_ids", runtime.ParamLocationQuery, params.RuleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerSetRoleRuleRequest generates requests for SecurityControllerSetRoleRule
func NewApiControllersSecurityControllerSetRoleRuleRequest(server string, roleId RoleId, params *SecurityControllerSetRoleRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/roles/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_ids", runtime.ParamLocationQuery, params.RuleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerRemoveRulesRequest generates requests for SecurityControllerRemoveRules
func NewApiControllersSecurityControllerRemoveRulesRequest(server string, params *SecurityControllerRemoveRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_ids", runtime.ParamLocationQuery, params.RuleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerGetRulesRequest generates requests for SecurityControllerGetRules
func NewApiControllersSecurityControllerGetRulesRequest(server string, params *SecurityControllerGetRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RuleIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_ids", runtime.ParamLocationQuery, *params.RuleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerAddRuleRequest calls the generic SecurityControllerAddRule builder with application/json body
func NewApiControllersSecurityControllerAddRuleRequest(server string, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerAddRuleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerAddRuleRequestWithBody generates requests for SecurityControllerAddRule with any type of body
func NewApiControllersSecurityControllerAddRuleRequestWithBody(server string, params *SecurityControllerAddRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerUpdateRuleRequest calls the generic SecurityControllerUpdateRule builder with application/json body
func NewApiControllersSecurityControllerUpdateRuleRequest(server string, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerUpdateRuleRequestWithBody(server, ruleId, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerUpdateRuleRequestWithBody generates requests for SecurityControllerUpdateRule with any type of body
func NewApiControllersSecurityControllerUpdateRuleRequestWithBody(server string, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerLogoutUserRequest generates requests for SecurityControllerLogoutUser
func NewApiControllersSecurityControllerLogoutUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/user/authenticate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerDeprecatedLoginUserRequest generates requests for SecurityControllerDeprecatedLoginUser
func NewApiControllersSecurityControllerDeprecatedLoginUserRequest(server string, params *SecurityControllerDeprecatedLoginUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/user/authenticate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raw", runtime.ParamLocationQuery, *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerLoginUserRequest generates requests for SecurityControllerLoginUser
func NewApiControllersSecurityControllerLoginUserRequest(server string, params *SecurityControllerLoginUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/user/authenticate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raw", runtime.ParamLocationQuery, *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerRunAsLoginRequest calls the generic SecurityControllerRunAsLogin builder with application/json body
func NewApiControllersSecurityControllerRunAsLoginRequest(server string, params *SecurityControllerRunAsLoginParams, body SecurityControllerRunAsLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerRunAsLoginRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerRunAsLoginRequestWithBody generates requests for SecurityControllerRunAsLogin with any type of body
func NewApiControllersSecurityControllerRunAsLoginRequestWithBody(server string, params *SecurityControllerRunAsLoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/user/authenticate/run_as")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raw", runtime.ParamLocationQuery, *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerRevokeAllTokensRequest generates requests for SecurityControllerRevokeAllTokens
func NewApiControllersSecurityControllerRevokeAllTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/user/revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerDeleteUsersRequest generates requests for SecurityControllerDeleteUsers
func NewApiControllersSecurityControllerDeleteUsersRequest(server string, params *SecurityControllerDeleteUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_ids", runtime.ParamLocationQuery, params.UserIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerGetUsersRequest generates requests for SecurityControllerGetUsers
func NewApiControllersSecurityControllerGetUsersRequest(server string, params *SecurityControllerGetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UserIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_ids", runtime.ParamLocationQuery, *params.UserIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerCreateUserRequest calls the generic SecurityControllerCreateUser builder with application/json body
func NewApiControllersSecurityControllerCreateUserRequest(server string, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerCreateUserRequestWithBody(server, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerCreateUserRequestWithBody generates requests for SecurityControllerCreateUser with any type of body
func NewApiControllersSecurityControllerCreateUserRequestWithBody(server string, params *SecurityControllerCreateUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerGetUserMeRequest generates requests for SecurityControllerGetUserMe
func NewApiControllersSecurityControllerGetUserMeRequest(server string, params *SecurityControllerGetUserMeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerGetUserMePoliciesRequest generates requests for SecurityControllerGetUserMePolicies
func NewApiControllersSecurityControllerGetUserMePoliciesRequest(server string, params *SecurityControllerGetUserMePoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/users/me/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerUpdateUserRequest calls the generic SecurityControllerUpdateUser builder with application/json body
func NewApiControllersSecurityControllerUpdateUserRequest(server string, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiControllersSecurityControllerUpdateUserRequestWithBody(server, userId, params, "application/json", bodyReader)
}

// NewApiControllersSecurityControllerUpdateUserRequestWithBody generates requests for SecurityControllerUpdateUser with any type of body
func NewApiControllersSecurityControllerUpdateUserRequestWithBody(server string, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiControllersSecurityControllerRemoveUserRoleRequest generates requests for SecurityControllerRemoveUserRole
func NewApiControllersSecurityControllerRemoveUserRoleRequest(server string, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/users/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role_ids", runtime.ParamLocationQuery, params.RoleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerSetUserRoleRequest generates requests for SecurityControllerSetUserRole
func NewApiControllersSecurityControllerSetUserRoleRequest(server string, userId UserIdRequired, params *SecurityControllerSetUserRoleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/users/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role_ids", runtime.ParamLocationQuery, params.RoleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Position != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "position", runtime.ParamLocationQuery, *params.Position); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSecurityControllerEditRunAsRequest generates requests for SecurityControllerEditRunAs
func NewApiControllersSecurityControllerEditRunAsRequest(server string, userId UserIdRequired, params *SecurityControllerEditRunAsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/users/%s/run_as", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AllowRunAs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allow_run_as", runtime.ParamLocationQuery, *params.AllowRunAs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscheckControllerPutSyscheckRequest generates requests for SyscheckControllerPutSyscheck
func NewApiControllersSyscheckControllerPutSyscheckRequest(server string, params *SyscheckControllerPutSyscheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscheckControllerDeleteSyscheckAgentRequest generates requests for SyscheckControllerDeleteSyscheckAgent
func NewApiControllersSyscheckControllerDeleteSyscheckAgentRequest(server string, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscheck/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscheckControllerGetSyscheckAgentRequest generates requests for SyscheckControllerGetSyscheckAgent
func NewApiControllersSyscheckControllerGetSyscheckAgentRequest(server string, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscheck/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.File != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Arch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "arch", runtime.ParamLocationQuery, *params.Arch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ValueName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value.name", runtime.ParamLocationQuery, *params.ValueName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ValueType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value.type", runtime.ParamLocationQuery, *params.ValueType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Summary != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summary", runtime.ParamLocationQuery, *params.Summary); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Md5 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "md5", runtime.ParamLocationQuery, *params.Md5); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha1 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha1", runtime.ParamLocationQuery, *params.Sha1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha256 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha256", runtime.ParamLocationQuery, *params.Sha256); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hash != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, *params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscheckControllerGetLastScanAgentRequest generates requests for SyscheckControllerGetLastScanAgent
func NewApiControllersSyscheckControllerGetLastScanAgentRequest(server string, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscheck/%s/last_scan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscollectorControllerGetHardwareInfoRequest generates requests for SyscollectorControllerGetHardwareInfo
func NewApiControllersSyscollectorControllerGetHardwareInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscollector/%s/hardware", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscollectorControllerGetHotfixInfoRequest generates requests for SyscollectorControllerGetHotfixInfo
func NewApiControllersSyscollectorControllerGetHotfixInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscollector/%s/hotfixes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hotfix != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hotfix", runtime.ParamLocationQuery, *params.Hotfix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscollectorControllerGetNetworkAddressInfoRequest generates requests for SyscollectorControllerGetNetworkAddressInfo
func NewApiControllersSyscollectorControllerGetNetworkAddressInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscollector/%s/netaddr", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Iface != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iface", runtime.ParamLocationQuery, *params.Iface); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Proto != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "proto", runtime.ParamLocationQuery, *params.Proto); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Address != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, *params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Broadcast != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "broadcast", runtime.ParamLocationQuery, *params.Broadcast); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Netmask != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "netmask", runtime.ParamLocationQuery, *params.Netmask); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest generates requests for SyscollectorControllerGetNetworkInterfaceInfo
func NewApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscollector/%s/netiface", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Adapter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adapter", runtime.ParamLocationQuery, *params.Adapter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Mtu != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mtu", runtime.ParamLocationQuery, *params.Mtu); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxPackets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx.packets", runtime.ParamLocationQuery, *params.TxPackets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxPackets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rx.packets", runtime.ParamLocationQuery, *params.RxPackets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxBytes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx.bytes", runtime.ParamLocationQuery, *params.TxBytes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxBytes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rx.bytes", runtime.ParamLocationQuery, *params.RxBytes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxErrors != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx.errors", runtime.ParamLocationQuery, *params.TxErrors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxErrors != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rx.errors", runtime.ParamLocationQuery, *params.RxErrors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxDropped != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx.dropped", runtime.ParamLocationQuery, *params.TxDropped); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxDropped != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rx.dropped", runtime.ParamLocationQuery, *params.RxDropped); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest generates requests for SyscollectorControllerGetNetworkProtocolInfo
func NewApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscollector/%s/netproto", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Iface != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iface", runtime.ParamLocationQuery, *params.Iface); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gateway != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway", runtime.ParamLocationQuery, *params.Gateway); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Dhcp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dhcp", runtime.ParamLocationQuery, *params.Dhcp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscollectorControllerGetOsInfoRequest generates requests for SyscollectorControllerGetOsInfo
func NewApiControllersSyscollectorControllerGetOsInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetOsInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscollector/%s/os", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscollectorControllerGetPackagesInfoRequest generates requests for SyscollectorControllerGetPackagesInfo
func NewApiControllersSyscollectorControllerGetPackagesInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscollector/%s/packages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vendor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vendor", runtime.ParamLocationQuery, *params.Vendor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Architecture != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "architecture", runtime.ParamLocationQuery, *params.Architecture); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscollectorControllerGetPortsInfoRequest generates requests for SyscollectorControllerGetPortsInfo
func NewApiControllersSyscollectorControllerGetPortsInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscollector/%s/ports", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pid", runtime.ParamLocationQuery, *params.Pid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Protocol != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protocol", runtime.ParamLocationQuery, *params.Protocol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocalIp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local.ip", runtime.ParamLocationQuery, *params.LocalIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocalPort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local.port", runtime.ParamLocationQuery, *params.LocalPort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RemoteIp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote.ip", runtime.ParamLocationQuery, *params.RemoteIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxQueue != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx_queue", runtime.ParamLocationQuery, *params.TxQueue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Process != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "process", runtime.ParamLocationQuery, *params.Process); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersSyscollectorControllerGetProcessesInfoRequest generates requests for SyscollectorControllerGetProcessesInfo
func NewApiControllersSyscollectorControllerGetProcessesInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/syscollector/%s/processes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pid", runtime.ParamLocationQuery, *params.Pid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ppid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ppid", runtime.ParamLocationQuery, *params.Ppid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Egroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "egroup", runtime.ParamLocationQuery, *params.Egroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Euser != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "euser", runtime.ParamLocationQuery, *params.Euser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fgroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fgroup", runtime.ParamLocationQuery, *params.Fgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Nlwp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nlwp", runtime.ParamLocationQuery, *params.Nlwp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pgrp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pgrp", runtime.ParamLocationQuery, *params.Pgrp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Priority != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "priority", runtime.ParamLocationQuery, *params.Priority); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Rgroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rgroup", runtime.ParamLocationQuery, *params.Rgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ruser != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruser", runtime.ParamLocationQuery, *params.Ruser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sgroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sgroup", runtime.ParamLocationQuery, *params.Sgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Suser != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "suser", runtime.ParamLocationQuery, *params.Suser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersTaskControllerGetTasksStatusRequest generates requests for TaskControllerGetTasksStatus
func NewApiControllersTaskControllerGetTasksStatusRequest(server string, params *TaskControllerGetTasksStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agents_list", runtime.ParamLocationQuery, *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TasksList != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tasks_list", runtime.ParamLocationQuery, *params.TasksList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Command != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "command", runtime.ParamLocationQuery, *params.Command); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Node != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node", runtime.ParamLocationQuery, *params.Node); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Module != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "module", runtime.ParamLocationQuery, *params.Module); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersVulnerabilityControllerGetVulnerabilityAgentRequest generates requests for VulnerabilityControllerGetVulnerabilityAgent
func NewApiControllersVulnerabilityControllerGetVulnerabilityAgentRequest(server string, agentId AgentId, params *VulnerabilityControllerGetVulnerabilityAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vulnerability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distinct", runtime.ParamLocationQuery, *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Architecture != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "architecture", runtime.ParamLocationQuery, *params.Architecture); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cve != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cve", runtime.ParamLocationQuery, *params.Cve); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Severity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersVulnerabilityControllerGetLastScanAgentRequest generates requests for VulnerabilityControllerGetLastScanAgent
func NewApiControllersVulnerabilityControllerGetLastScanAgentRequest(server string, agentId AgentId, params *VulnerabilityControllerGetLastScanAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vulnerability/%s/last_scan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiControllersVulnerabilityControllerGetVulnerabilitiesFieldSummaryRequest generates requests for VulnerabilityControllerGetVulnerabilitiesFieldSummary
func NewApiControllersVulnerabilityControllerGetVulnerabilitiesFieldSummaryRequest(server string, agentId AgentId, field VulnerabilityControllerGetVulnerabilitiesFieldSummaryParamsField, params *VulnerabilityControllerGetVulnerabilitiesFieldSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field", runtime.ParamLocationPath, field)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vulnerability/%s/summary/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for_complete", runtime.ParamLocationQuery, *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DefaultControllerDefaultInfo request
	DefaultControllerDefaultInfoWithResponse(ctx context.Context, params *DefaultControllerDefaultInfoParams, reqEditors ...RequestEditorFn) (*DefaultControllerDefaultInfoResponse, error)

	// ActiveResponseControllerRunCommand request with any body
	ActiveResponseControllerRunCommandWithBodyWithResponse(ctx context.Context, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActiveResponseControllerRunCommandResponse, error)

	ActiveResponseControllerRunCommandWithResponse(ctx context.Context, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*ActiveResponseControllerRunCommandResponse, error)

	// AgentControllerDeleteAgents request
	AgentControllerDeleteAgentsWithResponse(ctx context.Context, params *AgentControllerDeleteAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteAgentsResponse, error)

	// AgentControllerGetAgents request
	AgentControllerGetAgentsWithResponse(ctx context.Context, params *AgentControllerGetAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentsResponse, error)

	// AgentControllerAddAgent request with any body
	AgentControllerAddAgentWithBodyWithResponse(ctx context.Context, params *AgentControllerAddAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentControllerAddAgentResponse, error)

	AgentControllerAddAgentWithResponse(ctx context.Context, params *AgentControllerAddAgentParams, body AgentControllerAddAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentControllerAddAgentResponse, error)

	// AgentControllerDeleteMultipleAgentSingleGroup request
	AgentControllerDeleteMultipleAgentSingleGroupWithResponse(ctx context.Context, params *AgentControllerDeleteMultipleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteMultipleAgentSingleGroupResponse, error)

	// AgentControllerPutMultipleAgentSingleGroup request
	AgentControllerPutMultipleAgentSingleGroupWithResponse(ctx context.Context, params *AgentControllerPutMultipleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerPutMultipleAgentSingleGroupResponse, error)

	// AgentControllerRestartAgentsByGroup request
	AgentControllerRestartAgentsByGroupWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerRestartAgentsByGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerRestartAgentsByGroupResponse, error)

	// AgentControllerInsertAgent request with any body
	AgentControllerInsertAgentWithBodyWithResponse(ctx context.Context, params *AgentControllerInsertAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentControllerInsertAgentResponse, error)

	AgentControllerInsertAgentWithResponse(ctx context.Context, params *AgentControllerInsertAgentParams, body AgentControllerInsertAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentControllerInsertAgentResponse, error)

	// AgentControllerPostNewAgent request
	AgentControllerPostNewAgentWithResponse(ctx context.Context, params *AgentControllerPostNewAgentParams, reqEditors ...RequestEditorFn) (*AgentControllerPostNewAgentResponse, error)

	// AgentControllerGetAgentNoGroup request
	AgentControllerGetAgentNoGroupWithResponse(ctx context.Context, params *AgentControllerGetAgentNoGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentNoGroupResponse, error)

	// AgentControllerRestartAgentsByNode request
	AgentControllerRestartAgentsByNodeWithResponse(ctx context.Context, nodeId NodeId, params *AgentControllerRestartAgentsByNodeParams, reqEditors ...RequestEditorFn) (*AgentControllerRestartAgentsByNodeResponse, error)

	// AgentControllerGetAgentOutdated request
	AgentControllerGetAgentOutdatedWithResponse(ctx context.Context, params *AgentControllerGetAgentOutdatedParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentOutdatedResponse, error)

	// AgentControllerReconnectAgents request
	AgentControllerReconnectAgentsWithResponse(ctx context.Context, params *AgentControllerReconnectAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerReconnectAgentsResponse, error)

	// AgentControllerRestartAgents request
	AgentControllerRestartAgentsWithResponse(ctx context.Context, params *AgentControllerRestartAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerRestartAgentsResponse, error)

	// AgentControllerGetAgentFields request
	AgentControllerGetAgentFieldsWithResponse(ctx context.Context, params *AgentControllerGetAgentFieldsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentFieldsResponse, error)

	// AgentControllerGetAgentSummaryOs request
	AgentControllerGetAgentSummaryOsWithResponse(ctx context.Context, params *AgentControllerGetAgentSummaryOsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentSummaryOsResponse, error)

	// AgentControllerGetAgentSummaryStatus request
	AgentControllerGetAgentSummaryStatusWithResponse(ctx context.Context, params *AgentControllerGetAgentSummaryStatusParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentSummaryStatusResponse, error)

	// AgentControllerPutUpgradeAgents request
	AgentControllerPutUpgradeAgentsWithResponse(ctx context.Context, params *AgentControllerPutUpgradeAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerPutUpgradeAgentsResponse, error)

	// AgentControllerPutUpgradeCustomAgents request
	AgentControllerPutUpgradeCustomAgentsWithResponse(ctx context.Context, params *AgentControllerPutUpgradeCustomAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerPutUpgradeCustomAgentsResponse, error)

	// AgentControllerGetAgentUpgrade request
	AgentControllerGetAgentUpgradeWithResponse(ctx context.Context, params *AgentControllerGetAgentUpgradeParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentUpgradeResponse, error)

	// AgentControllerGetAgentConfig request
	AgentControllerGetAgentConfigWithResponse(ctx context.Context, agentId AgentId, component AgentControllerGetAgentConfigParamsComponent, configuration AgentControllerGetAgentConfigParamsConfiguration, params *AgentControllerGetAgentConfigParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentConfigResponse, error)

	// AgentControllerGetDaemonStats request
	AgentControllerGetDaemonStatsWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerGetDaemonStatsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetDaemonStatsResponse, error)

	// AgentControllerDeleteSingleAgentMultipleGroups request
	AgentControllerDeleteSingleAgentMultipleGroupsWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerDeleteSingleAgentMultipleGroupsParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteSingleAgentMultipleGroupsResponse, error)

	// AgentControllerGetSyncAgent request
	AgentControllerGetSyncAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerGetSyncAgentParams, reqEditors ...RequestEditorFn) (*AgentControllerGetSyncAgentResponse, error)

	// AgentControllerDeleteSingleAgentSingleGroup request
	AgentControllerDeleteSingleAgentSingleGroupWithResponse(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentControllerDeleteSingleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteSingleAgentSingleGroupResponse, error)

	// AgentControllerPutAgentSingleGroup request
	AgentControllerPutAgentSingleGroupWithResponse(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentControllerPutAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerPutAgentSingleGroupResponse, error)

	// AgentControllerGetAgentKey request
	AgentControllerGetAgentKeyWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerGetAgentKeyParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentKeyResponse, error)

	// AgentControllerRestartAgent request
	AgentControllerRestartAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerRestartAgentParams, reqEditors ...RequestEditorFn) (*AgentControllerRestartAgentResponse, error)

	// AgentControllerGetComponentStats request
	AgentControllerGetComponentStatsWithResponse(ctx context.Context, agentId AgentId, component AgentControllerGetComponentStatsParamsComponent, params *AgentControllerGetComponentStatsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetComponentStatsResponse, error)

	// CiscatControllerGetAgentsCiscatResults request
	CiscatControllerGetAgentsCiscatResultsWithResponse(ctx context.Context, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams, reqEditors ...RequestEditorFn) (*CiscatControllerGetAgentsCiscatResultsResponse, error)

	// ClusterControllerGetApiConfig request
	ClusterControllerGetApiConfigWithResponse(ctx context.Context, params *ClusterControllerGetApiConfigParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetApiConfigResponse, error)

	// ClusterControllerGetConfValidation request
	ClusterControllerGetConfValidationWithResponse(ctx context.Context, params *ClusterControllerGetConfValidationParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetConfValidationResponse, error)

	// ClusterControllerGetHealthcheck request
	ClusterControllerGetHealthcheckWithResponse(ctx context.Context, params *ClusterControllerGetHealthcheckParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetHealthcheckResponse, error)

	// ClusterControllerGetConfig request
	ClusterControllerGetConfigWithResponse(ctx context.Context, params *ClusterControllerGetConfigParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetConfigResponse, error)

	// ClusterControllerGetClusterNode request
	ClusterControllerGetClusterNodeWithResponse(ctx context.Context, params *ClusterControllerGetClusterNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetClusterNodeResponse, error)

	// ClusterControllerGetClusterNodes request
	ClusterControllerGetClusterNodesWithResponse(ctx context.Context, params *ClusterControllerGetClusterNodesParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetClusterNodesResponse, error)

	// ClusterControllerPutRestart request
	ClusterControllerPutRestartWithResponse(ctx context.Context, params *ClusterControllerPutRestartParams, reqEditors ...RequestEditorFn) (*ClusterControllerPutRestartResponse, error)

	// ClusterControllerGetNodesRulesetSyncStatus request
	ClusterControllerGetNodesRulesetSyncStatusWithResponse(ctx context.Context, params *ClusterControllerGetNodesRulesetSyncStatusParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetNodesRulesetSyncStatusResponse, error)

	// ClusterControllerGetStatus request
	ClusterControllerGetStatusWithResponse(ctx context.Context, params *ClusterControllerGetStatusParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatusResponse, error)

	// ClusterControllerGetConfigurationNode request
	ClusterControllerGetConfigurationNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetConfigurationNodeResponse, error)

	// ClusterControllerUpdateConfiguration request with any body
	ClusterControllerUpdateConfigurationWithBodyWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerUpdateConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterControllerUpdateConfigurationResponse, error)

	// ClusterControllerGetNodeConfig request
	ClusterControllerGetNodeConfigWithResponse(ctx context.Context, nodeId NodeId, component ClusterControllerGetNodeConfigParamsComponent, configuration ClusterControllerGetNodeConfigParamsConfiguration, params *ClusterControllerGetNodeConfigParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetNodeConfigResponse, error)

	// ClusterControllerGetDaemonStatsNode request
	ClusterControllerGetDaemonStatsNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetDaemonStatsNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetDaemonStatsNodeResponse, error)

	// ClusterControllerGetInfoNode request
	ClusterControllerGetInfoNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetInfoNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetInfoNodeResponse, error)

	// ClusterControllerGetLogNode request
	ClusterControllerGetLogNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetLogNodeResponse, error)

	// ClusterControllerGetLogSummaryNode request
	ClusterControllerGetLogSummaryNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetLogSummaryNodeResponse, error)

	// ClusterControllerGetStatsNode request
	ClusterControllerGetStatsNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsNodeResponse, error)

	// ClusterControllerGetStatsAnalysisdNode request
	ClusterControllerGetStatsAnalysisdNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsAnalysisdNodeResponse, error)

	// ClusterControllerGetStatsHourlyNode request
	ClusterControllerGetStatsHourlyNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsHourlyNodeResponse, error)

	// ClusterControllerGetStatsRemotedNode request
	ClusterControllerGetStatsRemotedNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsRemotedNodeResponse, error)

	// ClusterControllerGetStatsWeeklyNode request
	ClusterControllerGetStatsWeeklyNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsWeeklyNodeResponse, error)

	// ClusterControllerGetStatusNode request
	ClusterControllerGetStatusNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatusNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatusNodeResponse, error)

	// DecoderControllerGetDecoders request
	DecoderControllerGetDecodersWithResponse(ctx context.Context, params *DecoderControllerGetDecodersParams, reqEditors ...RequestEditorFn) (*DecoderControllerGetDecodersResponse, error)

	// DecoderControllerGetDecodersFiles request
	DecoderControllerGetDecodersFilesWithResponse(ctx context.Context, params *DecoderControllerGetDecodersFilesParams, reqEditors ...RequestEditorFn) (*DecoderControllerGetDecodersFilesResponse, error)

	// DecoderControllerDeleteFile request
	DecoderControllerDeleteFileWithResponse(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*DecoderControllerDeleteFileResponse, error)

	// DecoderControllerGetFile request
	DecoderControllerGetFileWithResponse(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerGetFileParams, reqEditors ...RequestEditorFn) (*DecoderControllerGetFileResponse, error)

	// DecoderControllerPutFile request with any body
	DecoderControllerPutFileWithBodyWithResponse(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecoderControllerPutFileResponse, error)

	// DecoderControllerGetDecodersParents request
	DecoderControllerGetDecodersParentsWithResponse(ctx context.Context, params *DecoderControllerGetDecodersParentsParams, reqEditors ...RequestEditorFn) (*DecoderControllerGetDecodersParentsResponse, error)

	// EventControllerForwardEvent request with any body
	EventControllerForwardEventWithBodyWithResponse(ctx context.Context, params *EventControllerForwardEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventControllerForwardEventResponse, error)

	EventControllerForwardEventWithResponse(ctx context.Context, params *EventControllerForwardEventParams, body EventControllerForwardEventJSONRequestBody, reqEditors ...RequestEditorFn) (*EventControllerForwardEventResponse, error)

	// ExperimentalControllerGetCisCatResults request
	ExperimentalControllerGetCisCatResultsWithResponse(ctx context.Context, params *ExperimentalControllerGetCisCatResultsParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetCisCatResultsResponse, error)

	// ExperimentalControllerClearRootcheckDatabase request
	ExperimentalControllerClearRootcheckDatabaseWithResponse(ctx context.Context, params *ExperimentalControllerClearRootcheckDatabaseParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerClearRootcheckDatabaseResponse, error)

	// ExperimentalControllerClearSyscheckDatabase request
	ExperimentalControllerClearSyscheckDatabaseWithResponse(ctx context.Context, params *ExperimentalControllerClearSyscheckDatabaseParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerClearSyscheckDatabaseResponse, error)

	// ExperimentalControllerGetHardwareInfo request
	ExperimentalControllerGetHardwareInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetHardwareInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetHardwareInfoResponse, error)

	// ExperimentalControllerGetHotfixesInfo request
	ExperimentalControllerGetHotfixesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetHotfixesInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetHotfixesInfoResponse, error)

	// ExperimentalControllerGetNetworkAddressInfo request
	ExperimentalControllerGetNetworkAddressInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkAddressInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetNetworkAddressInfoResponse, error)

	// ExperimentalControllerGetNetworkInterfaceInfo request
	ExperimentalControllerGetNetworkInterfaceInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkInterfaceInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetNetworkInterfaceInfoResponse, error)

	// ExperimentalControllerGetNetworkProtocolInfo request
	ExperimentalControllerGetNetworkProtocolInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkProtocolInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetNetworkProtocolInfoResponse, error)

	// ExperimentalControllerGetOsInfo request
	ExperimentalControllerGetOsInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetOsInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetOsInfoResponse, error)

	// ExperimentalControllerGetPackagesInfo request
	ExperimentalControllerGetPackagesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetPackagesInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetPackagesInfoResponse, error)

	// ExperimentalControllerGetPortsInfo request
	ExperimentalControllerGetPortsInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetPortsInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetPortsInfoResponse, error)

	// ExperimentalControllerGetProcessesInfo request
	ExperimentalControllerGetProcessesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetProcessesInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetProcessesInfoResponse, error)

	// AgentControllerDeleteGroups request
	AgentControllerDeleteGroupsWithResponse(ctx context.Context, params *AgentControllerDeleteGroupsParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteGroupsResponse, error)

	// AgentControllerGetListGroup request
	AgentControllerGetListGroupWithResponse(ctx context.Context, params *AgentControllerGetListGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerGetListGroupResponse, error)

	// AgentControllerPostGroup request with any body
	AgentControllerPostGroupWithBodyWithResponse(ctx context.Context, params *AgentControllerPostGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentControllerPostGroupResponse, error)

	AgentControllerPostGroupWithResponse(ctx context.Context, params *AgentControllerPostGroupParams, body AgentControllerPostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentControllerPostGroupResponse, error)

	// AgentControllerGetAgentsInGroup request
	AgentControllerGetAgentsInGroupWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerGetAgentsInGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentsInGroupResponse, error)

	// AgentControllerGetGroupConfig request
	AgentControllerGetGroupConfigWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerGetGroupConfigParams, reqEditors ...RequestEditorFn) (*AgentControllerGetGroupConfigResponse, error)

	// AgentControllerPutGroupConfig request with any body
	AgentControllerPutGroupConfigWithBodyWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerPutGroupConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentControllerPutGroupConfigResponse, error)

	// AgentControllerGetGroupFiles request
	AgentControllerGetGroupFilesWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerGetGroupFilesParams, reqEditors ...RequestEditorFn) (*AgentControllerGetGroupFilesResponse, error)

	// AgentControllerGetGroupFileJson request
	AgentControllerGetGroupFileJsonWithResponse(ctx context.Context, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileJsonParams, reqEditors ...RequestEditorFn) (*AgentControllerGetGroupFileJsonResponse, error)

	// AgentControllerGetGroupFileXml request
	AgentControllerGetGroupFileXmlWithResponse(ctx context.Context, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileXmlParams, reqEditors ...RequestEditorFn) (*AgentControllerGetGroupFileXmlResponse, error)

	// CdbListControllerGetLists request
	CdbListControllerGetListsWithResponse(ctx context.Context, params *CdbListControllerGetListsParams, reqEditors ...RequestEditorFn) (*CdbListControllerGetListsResponse, error)

	// CdbListControllerGetListsFiles request
	CdbListControllerGetListsFilesWithResponse(ctx context.Context, params *CdbListControllerGetListsFilesParams, reqEditors ...RequestEditorFn) (*CdbListControllerGetListsFilesResponse, error)

	// CdbListControllerDeleteFile request
	CdbListControllerDeleteFileWithResponse(ctx context.Context, filename ListFilenamePath, params *CdbListControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*CdbListControllerDeleteFileResponse, error)

	// CdbListControllerGetFile request
	CdbListControllerGetFileWithResponse(ctx context.Context, filename ListFilenamePath, params *CdbListControllerGetFileParams, reqEditors ...RequestEditorFn) (*CdbListControllerGetFileResponse, error)

	// CdbListControllerPutFile request with any body
	CdbListControllerPutFileWithBodyWithResponse(ctx context.Context, filename ListFilenamePath, params *CdbListControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CdbListControllerPutFileResponse, error)

	// LogtestControllerRunLogtestTool request with any body
	LogtestControllerRunLogtestToolWithBodyWithResponse(ctx context.Context, params *LogtestControllerRunLogtestToolParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogtestControllerRunLogtestToolResponse, error)

	LogtestControllerRunLogtestToolWithResponse(ctx context.Context, params *LogtestControllerRunLogtestToolParams, body LogtestControllerRunLogtestToolJSONRequestBody, reqEditors ...RequestEditorFn) (*LogtestControllerRunLogtestToolResponse, error)

	// LogtestControllerEndLogtestSession request
	LogtestControllerEndLogtestSessionWithResponse(ctx context.Context, token LogtestToken, params *LogtestControllerEndLogtestSessionParams, reqEditors ...RequestEditorFn) (*LogtestControllerEndLogtestSessionResponse, error)

	// ManagerControllerGetApiConfig request
	ManagerControllerGetApiConfigWithResponse(ctx context.Context, params *ManagerControllerGetApiConfigParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetApiConfigResponse, error)

	// ManagerControllerGetConfiguration request
	ManagerControllerGetConfigurationWithResponse(ctx context.Context, params *ManagerControllerGetConfigurationParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetConfigurationResponse, error)

	// ManagerControllerUpdateConfiguration request with any body
	ManagerControllerUpdateConfigurationWithBodyWithResponse(ctx context.Context, params *ManagerControllerUpdateConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagerControllerUpdateConfigurationResponse, error)

	// ManagerControllerGetConfValidation request
	ManagerControllerGetConfValidationWithResponse(ctx context.Context, params *ManagerControllerGetConfValidationParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetConfValidationResponse, error)

	// ManagerControllerGetManagerConfigOndemand request
	ManagerControllerGetManagerConfigOndemandWithResponse(ctx context.Context, component ManagerControllerGetManagerConfigOndemandParamsComponent, configuration ManagerControllerGetManagerConfigOndemandParamsConfiguration, params *ManagerControllerGetManagerConfigOndemandParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetManagerConfigOndemandResponse, error)

	// ManagerControllerGetDaemonStats request
	ManagerControllerGetDaemonStatsWithResponse(ctx context.Context, params *ManagerControllerGetDaemonStatsParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetDaemonStatsResponse, error)

	// ManagerControllerGetInfo request
	ManagerControllerGetInfoWithResponse(ctx context.Context, params *ManagerControllerGetInfoParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetInfoResponse, error)

	// ManagerControllerGetLog request
	ManagerControllerGetLogWithResponse(ctx context.Context, params *ManagerControllerGetLogParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetLogResponse, error)

	// ManagerControllerGetLogSummary request
	ManagerControllerGetLogSummaryWithResponse(ctx context.Context, params *ManagerControllerGetLogSummaryParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetLogSummaryResponse, error)

	// ManagerControllerPutRestart request
	ManagerControllerPutRestartWithResponse(ctx context.Context, params *ManagerControllerPutRestartParams, reqEditors ...RequestEditorFn) (*ManagerControllerPutRestartResponse, error)

	// ManagerControllerGetStats request
	ManagerControllerGetStatsWithResponse(ctx context.Context, params *ManagerControllerGetStatsParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsResponse, error)

	// ManagerControllerGetStatsAnalysisd request
	ManagerControllerGetStatsAnalysisdWithResponse(ctx context.Context, params *ManagerControllerGetStatsAnalysisdParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsAnalysisdResponse, error)

	// ManagerControllerGetStatsHourly request
	ManagerControllerGetStatsHourlyWithResponse(ctx context.Context, params *ManagerControllerGetStatsHourlyParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsHourlyResponse, error)

	// ManagerControllerGetStatsRemoted request
	ManagerControllerGetStatsRemotedWithResponse(ctx context.Context, params *ManagerControllerGetStatsRemotedParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsRemotedResponse, error)

	// ManagerControllerGetStatsWeekly request
	ManagerControllerGetStatsWeeklyWithResponse(ctx context.Context, params *ManagerControllerGetStatsWeeklyParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsWeeklyResponse, error)

	// ManagerControllerGetStatus request
	ManagerControllerGetStatusWithResponse(ctx context.Context, params *ManagerControllerGetStatusParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatusResponse, error)

	// ManagerControllerCheckAvailableVersion request
	ManagerControllerCheckAvailableVersionWithResponse(ctx context.Context, params *ManagerControllerCheckAvailableVersionParams, reqEditors ...RequestEditorFn) (*ManagerControllerCheckAvailableVersionResponse, error)

	// MitreControllerGetGroups request
	MitreControllerGetGroupsWithResponse(ctx context.Context, params *MitreControllerGetGroupsParams, reqEditors ...RequestEditorFn) (*MitreControllerGetGroupsResponse, error)

	// MitreControllerGetMetadata request
	MitreControllerGetMetadataWithResponse(ctx context.Context, params *MitreControllerGetMetadataParams, reqEditors ...RequestEditorFn) (*MitreControllerGetMetadataResponse, error)

	// MitreControllerGetMitigations request
	MitreControllerGetMitigationsWithResponse(ctx context.Context, params *MitreControllerGetMitigationsParams, reqEditors ...RequestEditorFn) (*MitreControllerGetMitigationsResponse, error)

	// MitreControllerGetReferences request
	MitreControllerGetReferencesWithResponse(ctx context.Context, params *MitreControllerGetReferencesParams, reqEditors ...RequestEditorFn) (*MitreControllerGetReferencesResponse, error)

	// MitreControllerGetSoftware request
	MitreControllerGetSoftwareWithResponse(ctx context.Context, params *MitreControllerGetSoftwareParams, reqEditors ...RequestEditorFn) (*MitreControllerGetSoftwareResponse, error)

	// MitreControllerGetTactics request
	MitreControllerGetTacticsWithResponse(ctx context.Context, params *MitreControllerGetTacticsParams, reqEditors ...RequestEditorFn) (*MitreControllerGetTacticsResponse, error)

	// MitreControllerGetTechniques request
	MitreControllerGetTechniquesWithResponse(ctx context.Context, params *MitreControllerGetTechniquesParams, reqEditors ...RequestEditorFn) (*MitreControllerGetTechniquesResponse, error)

	// OverviewControllerGetOverviewAgents request
	OverviewControllerGetOverviewAgentsWithResponse(ctx context.Context, params *OverviewControllerGetOverviewAgentsParams, reqEditors ...RequestEditorFn) (*OverviewControllerGetOverviewAgentsResponse, error)

	// RootcheckControllerPutRootcheck request
	RootcheckControllerPutRootcheckWithResponse(ctx context.Context, params *RootcheckControllerPutRootcheckParams, reqEditors ...RequestEditorFn) (*RootcheckControllerPutRootcheckResponse, error)

	// RootcheckControllerDeleteRootcheck request
	RootcheckControllerDeleteRootcheckWithResponse(ctx context.Context, agentId AgentId, params *RootcheckControllerDeleteRootcheckParams, reqEditors ...RequestEditorFn) (*RootcheckControllerDeleteRootcheckResponse, error)

	// RootcheckControllerGetRootcheckAgent request
	RootcheckControllerGetRootcheckAgentWithResponse(ctx context.Context, agentId AgentId, params *RootcheckControllerGetRootcheckAgentParams, reqEditors ...RequestEditorFn) (*RootcheckControllerGetRootcheckAgentResponse, error)

	// RootcheckControllerGetLastScanAgent request
	RootcheckControllerGetLastScanAgentWithResponse(ctx context.Context, agentId AgentId, params *RootcheckControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*RootcheckControllerGetLastScanAgentResponse, error)

	// RuleControllerGetRules request
	RuleControllerGetRulesWithResponse(ctx context.Context, params *RuleControllerGetRulesParams, reqEditors ...RequestEditorFn) (*RuleControllerGetRulesResponse, error)

	// RuleControllerGetRulesFiles request
	RuleControllerGetRulesFilesWithResponse(ctx context.Context, params *RuleControllerGetRulesFilesParams, reqEditors ...RequestEditorFn) (*RuleControllerGetRulesFilesResponse, error)

	// RuleControllerDeleteFile request
	RuleControllerDeleteFileWithResponse(ctx context.Context, filename XmlFilenamePath, params *RuleControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*RuleControllerDeleteFileResponse, error)

	// RuleControllerGetFile request
	RuleControllerGetFileWithResponse(ctx context.Context, filename XmlFilenamePath, params *RuleControllerGetFileParams, reqEditors ...RequestEditorFn) (*RuleControllerGetFileResponse, error)

	// RuleControllerPutFile request with any body
	RuleControllerPutFileWithBodyWithResponse(ctx context.Context, filename XmlFilenamePath, params *RuleControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleControllerPutFileResponse, error)

	// RuleControllerGetRulesGroups request
	RuleControllerGetRulesGroupsWithResponse(ctx context.Context, params *RuleControllerGetRulesGroupsParams, reqEditors ...RequestEditorFn) (*RuleControllerGetRulesGroupsResponse, error)

	// RuleControllerGetRulesRequirement request
	RuleControllerGetRulesRequirementWithResponse(ctx context.Context, requirement RuleControllerGetRulesRequirementParamsRequirement, params *RuleControllerGetRulesRequirementParams, reqEditors ...RequestEditorFn) (*RuleControllerGetRulesRequirementResponse, error)

	// ScaControllerGetScaAgent request
	ScaControllerGetScaAgentWithResponse(ctx context.Context, agentId AgentId, params *ScaControllerGetScaAgentParams, reqEditors ...RequestEditorFn) (*ScaControllerGetScaAgentResponse, error)

	// ScaControllerGetScaChecks request
	ScaControllerGetScaChecksWithResponse(ctx context.Context, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams, reqEditors ...RequestEditorFn) (*ScaControllerGetScaChecksResponse, error)

	// SecurityControllerGetRbacActions request
	SecurityControllerGetRbacActionsWithResponse(ctx context.Context, params *SecurityControllerGetRbacActionsParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetRbacActionsResponse, error)

	// SecurityControllerDeleteSecurityConfig request
	SecurityControllerDeleteSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerDeleteSecurityConfigParams, reqEditors ...RequestEditorFn) (*SecurityControllerDeleteSecurityConfigResponse, error)

	// SecurityControllerGetSecurityConfig request
	SecurityControllerGetSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerGetSecurityConfigParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetSecurityConfigResponse, error)

	// SecurityControllerPutSecurityConfig request with any body
	SecurityControllerPutSecurityConfigWithBodyWithResponse(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerPutSecurityConfigResponse, error)

	SecurityControllerPutSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerPutSecurityConfigResponse, error)

	// SecurityControllerRemovePolicies request
	SecurityControllerRemovePoliciesWithResponse(ctx context.Context, params *SecurityControllerRemovePoliciesParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemovePoliciesResponse, error)

	// SecurityControllerGetPolicies request
	SecurityControllerGetPoliciesWithResponse(ctx context.Context, params *SecurityControllerGetPoliciesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetPoliciesResponse, error)

	// SecurityControllerAddPolicy request with any body
	SecurityControllerAddPolicyWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerAddPolicyResponse, error)

	SecurityControllerAddPolicyWithResponse(ctx context.Context, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerAddPolicyResponse, error)

	// SecurityControllerUpdatePolicy request with any body
	SecurityControllerUpdatePolicyWithBodyWithResponse(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerUpdatePolicyResponse, error)

	SecurityControllerUpdatePolicyWithResponse(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerUpdatePolicyResponse, error)

	// SecurityControllerGetRbacResources request
	SecurityControllerGetRbacResourcesWithResponse(ctx context.Context, params *SecurityControllerGetRbacResourcesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetRbacResourcesResponse, error)

	// SecurityControllerRemoveRoles request
	SecurityControllerRemoveRolesWithResponse(ctx context.Context, params *SecurityControllerRemoveRolesParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveRolesResponse, error)

	// SecurityControllerGetRoles request
	SecurityControllerGetRolesWithResponse(ctx context.Context, params *SecurityControllerGetRolesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetRolesResponse, error)

	// SecurityControllerAddRole request with any body
	SecurityControllerAddRoleWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerAddRoleResponse, error)

	SecurityControllerAddRoleWithResponse(ctx context.Context, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerAddRoleResponse, error)

	// SecurityControllerUpdateRole request with any body
	SecurityControllerUpdateRoleWithBodyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateRoleResponse, error)

	SecurityControllerUpdateRoleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateRoleResponse, error)

	// SecurityControllerRemoveRolePolicy request
	SecurityControllerRemoveRolePolicyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveRolePolicyResponse, error)

	// SecurityControllerSetRolePolicy request
	SecurityControllerSetRolePolicyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerSetRolePolicyParams, reqEditors ...RequestEditorFn) (*SecurityControllerSetRolePolicyResponse, error)

	// SecurityControllerRemoveRoleRule request
	SecurityControllerRemoveRoleRuleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveRoleRuleResponse, error)

	// SecurityControllerSetRoleRule request
	SecurityControllerSetRoleRuleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerSetRoleRuleParams, reqEditors ...RequestEditorFn) (*SecurityControllerSetRoleRuleResponse, error)

	// SecurityControllerRemoveRules request
	SecurityControllerRemoveRulesWithResponse(ctx context.Context, params *SecurityControllerRemoveRulesParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveRulesResponse, error)

	// SecurityControllerGetRules request
	SecurityControllerGetRulesWithResponse(ctx context.Context, params *SecurityControllerGetRulesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetRulesResponse, error)

	// SecurityControllerAddRule request with any body
	SecurityControllerAddRuleWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerAddRuleResponse, error)

	SecurityControllerAddRuleWithResponse(ctx context.Context, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerAddRuleResponse, error)

	// SecurityControllerUpdateRule request with any body
	SecurityControllerUpdateRuleWithBodyWithResponse(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateRuleResponse, error)

	SecurityControllerUpdateRuleWithResponse(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateRuleResponse, error)

	// SecurityControllerLogoutUser request
	SecurityControllerLogoutUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SecurityControllerLogoutUserResponse, error)

	// SecurityControllerDeprecatedLoginUser request
	SecurityControllerDeprecatedLoginUserWithResponse(ctx context.Context, params *SecurityControllerDeprecatedLoginUserParams, reqEditors ...RequestEditorFn) (*SecurityControllerDeprecatedLoginUserResponse, error)

	// SecurityControllerLoginUser request
	SecurityControllerLoginUserWithResponse(ctx context.Context, params *SecurityControllerLoginUserParams, reqEditors ...RequestEditorFn) (*SecurityControllerLoginUserResponse, error)

	// SecurityControllerRunAsLogin request with any body
	SecurityControllerRunAsLoginWithBodyWithResponse(ctx context.Context, params *SecurityControllerRunAsLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerRunAsLoginResponse, error)

	SecurityControllerRunAsLoginWithResponse(ctx context.Context, params *SecurityControllerRunAsLoginParams, body SecurityControllerRunAsLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerRunAsLoginResponse, error)

	// SecurityControllerRevokeAllTokens request
	SecurityControllerRevokeAllTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SecurityControllerRevokeAllTokensResponse, error)

	// SecurityControllerDeleteUsers request
	SecurityControllerDeleteUsersWithResponse(ctx context.Context, params *SecurityControllerDeleteUsersParams, reqEditors ...RequestEditorFn) (*SecurityControllerDeleteUsersResponse, error)

	// SecurityControllerGetUsers request
	SecurityControllerGetUsersWithResponse(ctx context.Context, params *SecurityControllerGetUsersParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetUsersResponse, error)

	// SecurityControllerCreateUser request with any body
	SecurityControllerCreateUserWithBodyWithResponse(ctx context.Context, params *SecurityControllerCreateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerCreateUserResponse, error)

	SecurityControllerCreateUserWithResponse(ctx context.Context, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerCreateUserResponse, error)

	// SecurityControllerGetUserMe request
	SecurityControllerGetUserMeWithResponse(ctx context.Context, params *SecurityControllerGetUserMeParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetUserMeResponse, error)

	// SecurityControllerGetUserMePolicies request
	SecurityControllerGetUserMePoliciesWithResponse(ctx context.Context, params *SecurityControllerGetUserMePoliciesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetUserMePoliciesResponse, error)

	// SecurityControllerUpdateUser request with any body
	SecurityControllerUpdateUserWithBodyWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateUserResponse, error)

	SecurityControllerUpdateUserWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateUserResponse, error)

	// SecurityControllerRemoveUserRole request
	SecurityControllerRemoveUserRoleWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveUserRoleResponse, error)

	// SecurityControllerSetUserRole request
	SecurityControllerSetUserRoleWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerSetUserRoleParams, reqEditors ...RequestEditorFn) (*SecurityControllerSetUserRoleResponse, error)

	// SecurityControllerEditRunAs request
	SecurityControllerEditRunAsWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerEditRunAsParams, reqEditors ...RequestEditorFn) (*SecurityControllerEditRunAsResponse, error)

	// SyscheckControllerPutSyscheck request
	SyscheckControllerPutSyscheckWithResponse(ctx context.Context, params *SyscheckControllerPutSyscheckParams, reqEditors ...RequestEditorFn) (*SyscheckControllerPutSyscheckResponse, error)

	// SyscheckControllerDeleteSyscheckAgent request
	SyscheckControllerDeleteSyscheckAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams, reqEditors ...RequestEditorFn) (*SyscheckControllerDeleteSyscheckAgentResponse, error)

	// SyscheckControllerGetSyscheckAgent request
	SyscheckControllerGetSyscheckAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams, reqEditors ...RequestEditorFn) (*SyscheckControllerGetSyscheckAgentResponse, error)

	// SyscheckControllerGetLastScanAgent request
	SyscheckControllerGetLastScanAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*SyscheckControllerGetLastScanAgentResponse, error)

	// SyscollectorControllerGetHardwareInfo request
	SyscollectorControllerGetHardwareInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetHardwareInfoResponse, error)

	// SyscollectorControllerGetHotfixInfo request
	SyscollectorControllerGetHotfixInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetHotfixInfoResponse, error)

	// SyscollectorControllerGetNetworkAddressInfo request
	SyscollectorControllerGetNetworkAddressInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetNetworkAddressInfoResponse, error)

	// SyscollectorControllerGetNetworkInterfaceInfo request
	SyscollectorControllerGetNetworkInterfaceInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetNetworkInterfaceInfoResponse, error)

	// SyscollectorControllerGetNetworkProtocolInfo request
	SyscollectorControllerGetNetworkProtocolInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetNetworkProtocolInfoResponse, error)

	// SyscollectorControllerGetOsInfo request
	SyscollectorControllerGetOsInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetOsInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetOsInfoResponse, error)

	// SyscollectorControllerGetPackagesInfo request
	SyscollectorControllerGetPackagesInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetPackagesInfoResponse, error)

	// SyscollectorControllerGetPortsInfo request
	SyscollectorControllerGetPortsInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetPortsInfoResponse, error)

	// SyscollectorControllerGetProcessesInfo request
	SyscollectorControllerGetProcessesInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetProcessesInfoResponse, error)

	// TaskControllerGetTasksStatus request
	TaskControllerGetTasksStatusWithResponse(ctx context.Context, params *TaskControllerGetTasksStatusParams, reqEditors ...RequestEditorFn) (*TaskControllerGetTasksStatusResponse, error)

	// VulnerabilityControllerGetVulnerabilityAgent request
	VulnerabilityControllerGetVulnerabilityAgentWithResponse(ctx context.Context, agentId AgentId, params *VulnerabilityControllerGetVulnerabilityAgentParams, reqEditors ...RequestEditorFn) (*VulnerabilityControllerGetVulnerabilityAgentResponse, error)

	// VulnerabilityControllerGetLastScanAgent request
	VulnerabilityControllerGetLastScanAgentWithResponse(ctx context.Context, agentId AgentId, params *VulnerabilityControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*VulnerabilityControllerGetLastScanAgentResponse, error)

	// VulnerabilityControllerGetVulnerabilitiesFieldSummary request
	VulnerabilityControllerGetVulnerabilitiesFieldSummaryWithResponse(ctx context.Context, agentId AgentId, field VulnerabilityControllerGetVulnerabilitiesFieldSummaryParamsField, params *VulnerabilityControllerGetVulnerabilitiesFieldSummaryParams, reqEditors ...RequestEditorFn) (*VulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse, error)
}

type DefaultControllerDefaultInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *BasicInfo `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DefaultControllerDefaultInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DefaultControllerDefaultInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActiveResponseControllerRunCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON413      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ActiveResponseControllerRunCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActiveResponseControllerRunCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerDeleteAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
			AllItemsResponseAgentIDs `yaml:",inline"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerDeleteAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerDeleteAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgents `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerAddAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AgentIdKey `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerAddAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerAddAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerDeleteMultipleAgentSingleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
			AllItemsResponseAgentIDs `yaml:",inline"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerDeleteMultipleAgentSingleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerDeleteMultipleAgentSingleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerPutMultipleAgentSingleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
			AllItemsResponseAgentIDs `yaml:",inline"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerPutMultipleAgentSingleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerPutMultipleAgentSingleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerRestartAgentsByGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerRestartAgentsByGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerRestartAgentsByGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerInsertAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AgentIdKey `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerInsertAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerInsertAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerPostNewAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AgentIdKey `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerPostNewAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerPostNewAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentNoGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgents `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentNoGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentNoGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerRestartAgentsByNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerRestartAgentsByNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerRestartAgentsByNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentOutdatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentsSimple `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentOutdatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentOutdatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerReconnectAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerReconnectAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerReconnectAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerRestartAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerRestartAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerRestartAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentsDistinct `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentSummaryOsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentSummaryOsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentSummaryOsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentSummaryStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AgentsSummaryStatus `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentSummaryStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentSummaryStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerPutUpgradeAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerPutUpgradeAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerPutUpgradeAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerPutUpgradeCustomAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerPutUpgradeCustomAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerPutUpgradeCustomAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		// Current agent's configuration. The output varies with requested component and the agent configuration
		Data *AgentConfiguration `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetDaemonStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhDaemonStatsAgents `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetDaemonStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetDaemonStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerDeleteSingleAgentMultipleGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AllItemsResponseGroupIDs)
			AllItemsResponseGroupIDs `yaml:",inline"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerDeleteSingleAgentMultipleGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerDeleteSingleAgentMultipleGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetSyncAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentsSynced `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetSyncAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetSyncAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerDeleteSingleAgentSingleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerDeleteSingleAgentSingleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerDeleteSingleAgentSingleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerPutAgentSingleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerPutAgentSingleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerPutAgentSingleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentsKeys `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerRestartAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *ItemAffected `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerRestartAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerRestartAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetComponentStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetComponentStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetComponentStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiscatControllerGetAgentsCiscatResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseCiscatResult `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r CiscatControllerGetAgentsCiscatResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiscatControllerGetAgentsCiscatResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetApiConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetApiConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetApiConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetConfValidationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseValidationStatus `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetConfValidationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetConfValidationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetHealthcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseNodeHealthcheck `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetHealthcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetHealthcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Network interface used by the **master** to listen to incoming connections
			BindAddr *string `json:"bind_addr,omitempty"`

			// Whether the cluster is enabled or not
			Disabled *bool `json:"disabled,omitempty"`

			// Whether to hide the cluster information in the alerts
			Hidden *string `json:"hidden,omitempty"`

			// Cluster key used to encrypt messages
			Key *string `json:"key,omitempty"`

			// Cluster name
			Name *string `json:"name,omitempty"`

			// Node name
			NodeName *string `json:"node_name,omitempty"`

			// Node type
			NodeType *N200DataNodeType `json:"node_type,omitempty"`

			// List of cluster master nodes. This list is used by **worker** nodes to connect to the master
			Nodes *[]string `json:"nodes,omitempty"`

			// Port used by the **master** node to communicate with workers
			Port *int `json:"port,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetClusterNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Cluster name the node belongs to
			Cluster *string `json:"cluster,omitempty"`

			// Node name
			Node *string `json:"node,omitempty"`

			// Node type
			Type *string `json:"type,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetClusterNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetClusterNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetClusterNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseClusterNodes `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetClusterNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetClusterNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerPutRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseNodeIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerPutRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerPutRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetNodesRulesetSyncStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseNodeRulesetSynchronizationStatus `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetNodesRulesetSyncStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetNodesRulesetSyncStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Whether the cluster is enabled in the Wazuh configuration
			Enabled *N200DataEnabled `json:"enabled,omitempty"`

			// Whether the cluster daemon is running
			Running *N200DataRunning `json:"running,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetConfigurationNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhManagerConfiguration `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetConfigurationNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetConfigurationNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerUpdateConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
		ConfirmationMessage `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerUpdateConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerUpdateConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetNodeConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetNodeConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetNodeConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetDaemonStatsNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhDaemonStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetDaemonStatsNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetDaemonStatsNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetInfoNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhInfo `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetInfoNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetInfoNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetLogNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhLogs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetLogNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetLogNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetLogSummaryNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhLogsSummary `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetLogSummaryNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetLogSummaryNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsAnalysisdNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsAnalysisdNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsAnalysisdNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsHourlyNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsHourlyNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsHourlyNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsRemotedNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsRemotedNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsRemotedNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsWeeklyNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsWeeklyNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsWeeklyNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatusNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhDaemonsStatus `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatusNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatusNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecoderControllerGetDecodersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseDecoders `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r DecoderControllerGetDecodersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecoderControllerGetDecodersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecoderControllerGetDecodersFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseDecodersFiles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r DecoderControllerGetDecodersFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecoderControllerGetDecodersFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecoderControllerDeleteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r DecoderControllerDeleteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecoderControllerDeleteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecoderControllerGetFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	XML200  *string
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r DecoderControllerGetFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecoderControllerGetFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecoderControllerPutFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r DecoderControllerPutFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecoderControllerPutFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecoderControllerGetDecodersParentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r DecoderControllerGetDecodersParentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecoderControllerGetDecodersParentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventControllerForwardEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON413      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r EventControllerForwardEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventControllerForwardEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetCisCatResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseCiscatResult `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetCisCatResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetCisCatResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerClearRootcheckDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerClearRootcheckDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerClearRootcheckDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerClearSyscheckDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerClearSyscheckDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerClearSyscheckDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetHardwareInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorHardware `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetHardwareInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetHardwareInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetHotfixesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorHotfixes `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetHotfixesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetHotfixesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetNetworkAddressInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorNetwork `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetNetworkAddressInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetNetworkAddressInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetNetworkInterfaceInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorInterface `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetNetworkInterfaceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetNetworkInterfaceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetNetworkProtocolInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorProtocol `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetNetworkProtocolInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetNetworkProtocolInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetOsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorOS `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetOsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetOsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetPackagesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorPackages `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetPackagesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetPackagesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetPortsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorPorts `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetPortsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetPortsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetProcessesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorProcesses `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetProcessesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetProcessesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerDeleteGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AgentGroupDeleted)
			AgentGroupDeleted `yaml:",inline"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerDeleteGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerDeleteGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetListGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseGroups `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetListGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetListGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerPostGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerPostGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerPostGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetAgentsInGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgents `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetAgentsInGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetAgentsInGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetGroupConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			AffectedItems      *[]GroupConfiguration `json:"affected_items,omitempty"`
			TotalAffectedItems *int32                `json:"total_affected_items,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetGroupConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetGroupConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerPutGroupConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON413      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerPutGroupConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerPutGroupConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetGroupFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetGroupFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetGroupFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetGroupFileJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *interface{} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetGroupFileJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetGroupFileJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentControllerGetGroupFileXmlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML200       *string
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentControllerGetGroupFileXmlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentControllerGetGroupFileXmlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CdbListControllerGetListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseLists `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r CdbListControllerGetListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CdbListControllerGetListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CdbListControllerGetListsFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseListsFiles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r CdbListControllerGetListsFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CdbListControllerGetListsFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CdbListControllerDeleteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
		ConfirmationMessage `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r CdbListControllerDeleteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CdbListControllerDeleteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CdbListControllerGetFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseListsFiles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r CdbListControllerGetFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CdbListControllerGetFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CdbListControllerPutFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
		ConfirmationMessage `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r CdbListControllerPutFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CdbListControllerPutFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogtestControllerRunLogtestToolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON413      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r LogtestControllerRunLogtestToolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogtestControllerRunLogtestToolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogtestControllerEndLogtestSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON413      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r LogtestControllerEndLogtestSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogtestControllerEndLogtestSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetApiConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetApiConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetApiConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhManagerConfiguration `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerUpdateConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
		ConfirmationMessage `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerUpdateConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerUpdateConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetConfValidationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigurationValidation
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetConfValidationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetConfValidationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetManagerConfigOndemandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetManagerConfigOndemandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetManagerConfigOndemandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetDaemonStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhDaemonStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetDaemonStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetDaemonStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhInfo `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhLogs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetLogSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhLogsSummary `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetLogSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetLogSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerPutRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerPutRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerPutRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsAnalysisdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsAnalysisdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsAnalysisdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsHourlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsHourlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsHourlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsRemotedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsRemotedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsRemotedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsWeeklyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsWeeklyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsWeeklyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhDaemonsStatus `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerCheckAvailableVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *NewVersions `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerCheckAvailableVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerCheckAvailableVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitreControllerGetGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r MitreControllerGetGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitreControllerGetGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitreControllerGetMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r MitreControllerGetMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitreControllerGetMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitreControllerGetMitigationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r MitreControllerGetMitigationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitreControllerGetMitigationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitreControllerGetReferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r MitreControllerGetReferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitreControllerGetReferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitreControllerGetSoftwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r MitreControllerGetSoftwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitreControllerGetSoftwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitreControllerGetTacticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r MitreControllerGetTacticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitreControllerGetTacticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitreControllerGetTechniquesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r MitreControllerGetTechniquesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitreControllerGetTechniquesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OverviewControllerGetOverviewAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *OverviewAgents `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r OverviewControllerGetOverviewAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OverviewControllerGetOverviewAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RootcheckControllerPutRootcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RootcheckControllerPutRootcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RootcheckControllerPutRootcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RootcheckControllerDeleteRootcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RootcheckControllerDeleteRootcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RootcheckControllerDeleteRootcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RootcheckControllerGetRootcheckAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RootcheckControllerGetRootcheckAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RootcheckControllerGetRootcheckAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RootcheckControllerGetLastScanAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RootcheckControllerGetLastScanAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RootcheckControllerGetLastScanAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleControllerGetRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRules `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RuleControllerGetRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleControllerGetRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleControllerGetRulesFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRulesFiles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RuleControllerGetRulesFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleControllerGetRulesFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleControllerDeleteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RuleControllerDeleteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleControllerDeleteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleControllerGetFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	XML200  *string
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RuleControllerGetFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleControllerGetFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleControllerPutFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RuleControllerPutFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleControllerPutFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleControllerGetRulesGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RuleControllerGetRulesGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleControllerGetRulesGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleControllerGetRulesRequirementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RuleControllerGetRulesRequirementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleControllerGetRulesRequirementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScaControllerGetScaAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSCADatabase `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ScaControllerGetScaAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScaControllerGetScaAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScaControllerGetScaChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSCAChecks `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ScaControllerGetScaChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScaControllerGetScaChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetRbacActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetRbacActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetRbacActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerDeleteSecurityConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *RequestError
	JSON401      *RequestError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerDeleteSecurityConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerDeleteSecurityConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetSecurityConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetSecurityConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetSecurityConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerPutSecurityConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *RequestError
	JSON401      *RequestError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON413      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerPutSecurityConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerPutSecurityConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemovePoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponsePolicies `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemovePoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemovePoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponsePolicies `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerAddPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponsePolicies `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerAddPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerAddPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerUpdatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponsePolicies `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerUpdatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerUpdatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetRbacResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetRbacResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetRbacResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerUpdateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerUpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerUpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveRolePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveRolePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveRolePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerSetRolePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerSetRolePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerSetRolePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveRoleRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveRoleRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveRoleRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerSetRoleRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerSetRoleRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerSetRoleRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerAddRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerAddRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerAddRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerUpdateRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerUpdateRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerUpdateRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerLogoutUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerLogoutUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerLogoutUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerDeprecatedLoginUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *Token `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerDeprecatedLoginUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerDeprecatedLoginUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerLoginUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *Token `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerLoginUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerLoginUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRunAsLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token *string `json:"token,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRunAsLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRunAsLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRevokeAllTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRevokeAllTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRevokeAllTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerDeleteUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerDeleteUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerDeleteUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerCreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerCreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerCreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetUserMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetUserMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetUserMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetUserMePoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetUserMePoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetUserMePoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerUpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerUpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerUpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerSetUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerSetUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerSetUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerEditRunAsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerEditRunAsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerEditRunAsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscheckControllerPutSyscheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscheckControllerPutSyscheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscheckControllerPutSyscheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscheckControllerDeleteSyscheckAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscheckControllerDeleteSyscheckAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscheckControllerDeleteSyscheckAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscheckControllerGetSyscheckAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscheckResult `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscheckControllerGetSyscheckAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscheckControllerGetSyscheckAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscheckControllerGetLastScanAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseLastScan `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscheckControllerGetLastScanAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscheckControllerGetLastScanAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetHardwareInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorHardware `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetHardwareInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetHardwareInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetHotfixInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorHotfixes `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetHotfixInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetHotfixInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetNetworkAddressInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorNetwork `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetNetworkAddressInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetNetworkAddressInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetNetworkInterfaceInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorInterface `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetNetworkInterfaceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetNetworkInterfaceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetNetworkProtocolInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorProtocol `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetNetworkProtocolInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetNetworkProtocolInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetOsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorOS `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetOsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetOsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetPackagesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorPackages `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetPackagesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetPackagesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetPortsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorPorts `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetPortsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetPortsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetProcessesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorProcesses `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetProcessesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetProcessesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TaskControllerGetTasksStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
}

// Status returns HTTPResponse.Status
func (r TaskControllerGetTasksStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TaskControllerGetTasksStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VulnerabilityControllerGetVulnerabilityAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllItemsResponseVulnerability

	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r VulnerabilityControllerGetVulnerabilityAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VulnerabilityControllerGetVulnerabilityAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VulnerabilityControllerGetLastScanAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseLastScan `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r VulnerabilityControllerGetLastScanAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VulnerabilityControllerGetLastScanAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r VulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DefaultControllerDefaultInfoWithResponse request returning *DefaultControllerDefaultInfoResponse
func (c *ClientWithResponses) DefaultControllerDefaultInfoWithResponse(ctx context.Context, params *DefaultControllerDefaultInfoParams, reqEditors ...RequestEditorFn) (*DefaultControllerDefaultInfoResponse, error) {
	rsp, err := c.DefaultControllerDefaultInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersDefaultControllerDefaultInfoResponse(rsp)
}

// ActiveResponseControllerRunCommandWithBodyWithResponse request with arbitrary body returning *ActiveResponseControllerRunCommandResponse
func (c *ClientWithResponses) ActiveResponseControllerRunCommandWithBodyWithResponse(ctx context.Context, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActiveResponseControllerRunCommandResponse, error) {
	rsp, err := c.ActiveResponseControllerRunCommandWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersActiveResponseControllerRunCommandResponse(rsp)
}

func (c *ClientWithResponses) ActiveResponseControllerRunCommandWithResponse(ctx context.Context, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*ActiveResponseControllerRunCommandResponse, error) {
	rsp, err := c.ActiveResponseControllerRunCommand(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersActiveResponseControllerRunCommandResponse(rsp)
}

// AgentControllerDeleteAgentsWithResponse request returning *AgentControllerDeleteAgentsResponse
func (c *ClientWithResponses) AgentControllerDeleteAgentsWithResponse(ctx context.Context, params *AgentControllerDeleteAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteAgentsResponse, error) {
	rsp, err := c.AgentControllerDeleteAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerDeleteAgentsResponse(rsp)
}

// AgentControllerGetAgentsWithResponse request returning *AgentControllerGetAgentsResponse
func (c *ClientWithResponses) AgentControllerGetAgentsWithResponse(ctx context.Context, params *AgentControllerGetAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentsResponse, error) {
	rsp, err := c.AgentControllerGetAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentsResponse(rsp)
}

// AgentControllerAddAgentWithBodyWithResponse request with arbitrary body returning *AgentControllerAddAgentResponse
func (c *ClientWithResponses) AgentControllerAddAgentWithBodyWithResponse(ctx context.Context, params *AgentControllerAddAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentControllerAddAgentResponse, error) {
	rsp, err := c.AgentControllerAddAgentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerAddAgentResponse(rsp)
}

func (c *ClientWithResponses) AgentControllerAddAgentWithResponse(ctx context.Context, params *AgentControllerAddAgentParams, body AgentControllerAddAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentControllerAddAgentResponse, error) {
	rsp, err := c.AgentControllerAddAgent(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerAddAgentResponse(rsp)
}

// AgentControllerDeleteMultipleAgentSingleGroupWithResponse request returning *AgentControllerDeleteMultipleAgentSingleGroupResponse
func (c *ClientWithResponses) AgentControllerDeleteMultipleAgentSingleGroupWithResponse(ctx context.Context, params *AgentControllerDeleteMultipleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteMultipleAgentSingleGroupResponse, error) {
	rsp, err := c.AgentControllerDeleteMultipleAgentSingleGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerDeleteMultipleAgentSingleGroupResponse(rsp)
}

// AgentControllerPutMultipleAgentSingleGroupWithResponse request returning *AgentControllerPutMultipleAgentSingleGroupResponse
func (c *ClientWithResponses) AgentControllerPutMultipleAgentSingleGroupWithResponse(ctx context.Context, params *AgentControllerPutMultipleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerPutMultipleAgentSingleGroupResponse, error) {
	rsp, err := c.AgentControllerPutMultipleAgentSingleGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerPutMultipleAgentSingleGroupResponse(rsp)
}

// AgentControllerRestartAgentsByGroupWithResponse request returning *AgentControllerRestartAgentsByGroupResponse
func (c *ClientWithResponses) AgentControllerRestartAgentsByGroupWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerRestartAgentsByGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerRestartAgentsByGroupResponse, error) {
	rsp, err := c.AgentControllerRestartAgentsByGroup(ctx, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerRestartAgentsByGroupResponse(rsp)
}

// AgentControllerInsertAgentWithBodyWithResponse request with arbitrary body returning *AgentControllerInsertAgentResponse
func (c *ClientWithResponses) AgentControllerInsertAgentWithBodyWithResponse(ctx context.Context, params *AgentControllerInsertAgentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentControllerInsertAgentResponse, error) {
	rsp, err := c.AgentControllerInsertAgentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerInsertAgentResponse(rsp)
}

func (c *ClientWithResponses) AgentControllerInsertAgentWithResponse(ctx context.Context, params *AgentControllerInsertAgentParams, body AgentControllerInsertAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentControllerInsertAgentResponse, error) {
	rsp, err := c.AgentControllerInsertAgent(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerInsertAgentResponse(rsp)
}

// AgentControllerPostNewAgentWithResponse request returning *AgentControllerPostNewAgentResponse
func (c *ClientWithResponses) AgentControllerPostNewAgentWithResponse(ctx context.Context, params *AgentControllerPostNewAgentParams, reqEditors ...RequestEditorFn) (*AgentControllerPostNewAgentResponse, error) {
	rsp, err := c.AgentControllerPostNewAgent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerPostNewAgentResponse(rsp)
}

// AgentControllerGetAgentNoGroupWithResponse request returning *AgentControllerGetAgentNoGroupResponse
func (c *ClientWithResponses) AgentControllerGetAgentNoGroupWithResponse(ctx context.Context, params *AgentControllerGetAgentNoGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentNoGroupResponse, error) {
	rsp, err := c.AgentControllerGetAgentNoGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentNoGroupResponse(rsp)
}

// AgentControllerRestartAgentsByNodeWithResponse request returning *AgentControllerRestartAgentsByNodeResponse
func (c *ClientWithResponses) AgentControllerRestartAgentsByNodeWithResponse(ctx context.Context, nodeId NodeId, params *AgentControllerRestartAgentsByNodeParams, reqEditors ...RequestEditorFn) (*AgentControllerRestartAgentsByNodeResponse, error) {
	rsp, err := c.AgentControllerRestartAgentsByNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerRestartAgentsByNodeResponse(rsp)
}

// AgentControllerGetAgentOutdatedWithResponse request returning *AgentControllerGetAgentOutdatedResponse
func (c *ClientWithResponses) AgentControllerGetAgentOutdatedWithResponse(ctx context.Context, params *AgentControllerGetAgentOutdatedParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentOutdatedResponse, error) {
	rsp, err := c.AgentControllerGetAgentOutdated(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentOutdatedResponse(rsp)
}

// AgentControllerReconnectAgentsWithResponse request returning *AgentControllerReconnectAgentsResponse
func (c *ClientWithResponses) AgentControllerReconnectAgentsWithResponse(ctx context.Context, params *AgentControllerReconnectAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerReconnectAgentsResponse, error) {
	rsp, err := c.AgentControllerReconnectAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerReconnectAgentsResponse(rsp)
}

// AgentControllerRestartAgentsWithResponse request returning *AgentControllerRestartAgentsResponse
func (c *ClientWithResponses) AgentControllerRestartAgentsWithResponse(ctx context.Context, params *AgentControllerRestartAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerRestartAgentsResponse, error) {
	rsp, err := c.AgentControllerRestartAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerRestartAgentsResponse(rsp)
}

// AgentControllerGetAgentFieldsWithResponse request returning *AgentControllerGetAgentFieldsResponse
func (c *ClientWithResponses) AgentControllerGetAgentFieldsWithResponse(ctx context.Context, params *AgentControllerGetAgentFieldsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentFieldsResponse, error) {
	rsp, err := c.AgentControllerGetAgentFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentFieldsResponse(rsp)
}

// AgentControllerGetAgentSummaryOsWithResponse request returning *AgentControllerGetAgentSummaryOsResponse
func (c *ClientWithResponses) AgentControllerGetAgentSummaryOsWithResponse(ctx context.Context, params *AgentControllerGetAgentSummaryOsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentSummaryOsResponse, error) {
	rsp, err := c.AgentControllerGetAgentSummaryOs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentSummaryOsResponse(rsp)
}

// AgentControllerGetAgentSummaryStatusWithResponse request returning *AgentControllerGetAgentSummaryStatusResponse
func (c *ClientWithResponses) AgentControllerGetAgentSummaryStatusWithResponse(ctx context.Context, params *AgentControllerGetAgentSummaryStatusParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentSummaryStatusResponse, error) {
	rsp, err := c.AgentControllerGetAgentSummaryStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentSummaryStatusResponse(rsp)
}

// AgentControllerPutUpgradeAgentsWithResponse request returning *AgentControllerPutUpgradeAgentsResponse
func (c *ClientWithResponses) AgentControllerPutUpgradeAgentsWithResponse(ctx context.Context, params *AgentControllerPutUpgradeAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerPutUpgradeAgentsResponse, error) {
	rsp, err := c.AgentControllerPutUpgradeAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerPutUpgradeAgentsResponse(rsp)
}

// AgentControllerPutUpgradeCustomAgentsWithResponse request returning *AgentControllerPutUpgradeCustomAgentsResponse
func (c *ClientWithResponses) AgentControllerPutUpgradeCustomAgentsWithResponse(ctx context.Context, params *AgentControllerPutUpgradeCustomAgentsParams, reqEditors ...RequestEditorFn) (*AgentControllerPutUpgradeCustomAgentsResponse, error) {
	rsp, err := c.AgentControllerPutUpgradeCustomAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerPutUpgradeCustomAgentsResponse(rsp)
}

// AgentControllerGetAgentUpgradeWithResponse request returning *AgentControllerGetAgentUpgradeResponse
func (c *ClientWithResponses) AgentControllerGetAgentUpgradeWithResponse(ctx context.Context, params *AgentControllerGetAgentUpgradeParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentUpgradeResponse, error) {
	rsp, err := c.AgentControllerGetAgentUpgrade(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentUpgradeResponse(rsp)
}

// AgentControllerGetAgentConfigWithResponse request returning *AgentControllerGetAgentConfigResponse
func (c *ClientWithResponses) AgentControllerGetAgentConfigWithResponse(ctx context.Context, agentId AgentId, component AgentControllerGetAgentConfigParamsComponent, configuration AgentControllerGetAgentConfigParamsConfiguration, params *AgentControllerGetAgentConfigParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentConfigResponse, error) {
	rsp, err := c.AgentControllerGetAgentConfig(ctx, agentId, component, configuration, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentConfigResponse(rsp)
}

// AgentControllerGetDaemonStatsWithResponse request returning *AgentControllerGetDaemonStatsResponse
func (c *ClientWithResponses) AgentControllerGetDaemonStatsWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerGetDaemonStatsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetDaemonStatsResponse, error) {
	rsp, err := c.AgentControllerGetDaemonStats(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetDaemonStatsResponse(rsp)
}

// AgentControllerDeleteSingleAgentMultipleGroupsWithResponse request returning *AgentControllerDeleteSingleAgentMultipleGroupsResponse
func (c *ClientWithResponses) AgentControllerDeleteSingleAgentMultipleGroupsWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerDeleteSingleAgentMultipleGroupsParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteSingleAgentMultipleGroupsResponse, error) {
	rsp, err := c.AgentControllerDeleteSingleAgentMultipleGroups(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerDeleteSingleAgentMultipleGroupsResponse(rsp)
}

// AgentControllerGetSyncAgentWithResponse request returning *AgentControllerGetSyncAgentResponse
func (c *ClientWithResponses) AgentControllerGetSyncAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerGetSyncAgentParams, reqEditors ...RequestEditorFn) (*AgentControllerGetSyncAgentResponse, error) {
	rsp, err := c.AgentControllerGetSyncAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetSyncAgentResponse(rsp)
}

// AgentControllerDeleteSingleAgentSingleGroupWithResponse request returning *AgentControllerDeleteSingleAgentSingleGroupResponse
func (c *ClientWithResponses) AgentControllerDeleteSingleAgentSingleGroupWithResponse(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentControllerDeleteSingleAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteSingleAgentSingleGroupResponse, error) {
	rsp, err := c.AgentControllerDeleteSingleAgentSingleGroup(ctx, agentId, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerDeleteSingleAgentSingleGroupResponse(rsp)
}

// AgentControllerPutAgentSingleGroupWithResponse request returning *AgentControllerPutAgentSingleGroupResponse
func (c *ClientWithResponses) AgentControllerPutAgentSingleGroupWithResponse(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentControllerPutAgentSingleGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerPutAgentSingleGroupResponse, error) {
	rsp, err := c.AgentControllerPutAgentSingleGroup(ctx, agentId, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerPutAgentSingleGroupResponse(rsp)
}

// AgentControllerGetAgentKeyWithResponse request returning *AgentControllerGetAgentKeyResponse
func (c *ClientWithResponses) AgentControllerGetAgentKeyWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerGetAgentKeyParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentKeyResponse, error) {
	rsp, err := c.AgentControllerGetAgentKey(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentKeyResponse(rsp)
}

// AgentControllerRestartAgentWithResponse request returning *AgentControllerRestartAgentResponse
func (c *ClientWithResponses) AgentControllerRestartAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentControllerRestartAgentParams, reqEditors ...RequestEditorFn) (*AgentControllerRestartAgentResponse, error) {
	rsp, err := c.AgentControllerRestartAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerRestartAgentResponse(rsp)
}

// AgentControllerGetComponentStatsWithResponse request returning *AgentControllerGetComponentStatsResponse
func (c *ClientWithResponses) AgentControllerGetComponentStatsWithResponse(ctx context.Context, agentId AgentId, component AgentControllerGetComponentStatsParamsComponent, params *AgentControllerGetComponentStatsParams, reqEditors ...RequestEditorFn) (*AgentControllerGetComponentStatsResponse, error) {
	rsp, err := c.AgentControllerGetComponentStats(ctx, agentId, component, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetComponentStatsResponse(rsp)
}

// CiscatControllerGetAgentsCiscatResultsWithResponse request returning *CiscatControllerGetAgentsCiscatResultsResponse
func (c *ClientWithResponses) CiscatControllerGetAgentsCiscatResultsWithResponse(ctx context.Context, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams, reqEditors ...RequestEditorFn) (*CiscatControllerGetAgentsCiscatResultsResponse, error) {
	rsp, err := c.CiscatControllerGetAgentsCiscatResults(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersCiscatControllerGetAgentsCiscatResultsResponse(rsp)
}

// ClusterControllerGetApiConfigWithResponse request returning *ClusterControllerGetApiConfigResponse
func (c *ClientWithResponses) ClusterControllerGetApiConfigWithResponse(ctx context.Context, params *ClusterControllerGetApiConfigParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetApiConfigResponse, error) {
	rsp, err := c.ClusterControllerGetApiConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetApiConfigResponse(rsp)
}

// ClusterControllerGetConfValidationWithResponse request returning *ClusterControllerGetConfValidationResponse
func (c *ClientWithResponses) ClusterControllerGetConfValidationWithResponse(ctx context.Context, params *ClusterControllerGetConfValidationParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetConfValidationResponse, error) {
	rsp, err := c.ClusterControllerGetConfValidation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetConfValidationResponse(rsp)
}

// ClusterControllerGetHealthcheckWithResponse request returning *ClusterControllerGetHealthcheckResponse
func (c *ClientWithResponses) ClusterControllerGetHealthcheckWithResponse(ctx context.Context, params *ClusterControllerGetHealthcheckParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetHealthcheckResponse, error) {
	rsp, err := c.ClusterControllerGetHealthcheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetHealthcheckResponse(rsp)
}

// ClusterControllerGetConfigWithResponse request returning *ClusterControllerGetConfigResponse
func (c *ClientWithResponses) ClusterControllerGetConfigWithResponse(ctx context.Context, params *ClusterControllerGetConfigParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetConfigResponse, error) {
	rsp, err := c.ClusterControllerGetConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetConfigResponse(rsp)
}

// ClusterControllerGetClusterNodeWithResponse request returning *ClusterControllerGetClusterNodeResponse
func (c *ClientWithResponses) ClusterControllerGetClusterNodeWithResponse(ctx context.Context, params *ClusterControllerGetClusterNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetClusterNodeResponse, error) {
	rsp, err := c.ClusterControllerGetClusterNode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetClusterNodeResponse(rsp)
}

// ClusterControllerGetClusterNodesWithResponse request returning *ClusterControllerGetClusterNodesResponse
func (c *ClientWithResponses) ClusterControllerGetClusterNodesWithResponse(ctx context.Context, params *ClusterControllerGetClusterNodesParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetClusterNodesResponse, error) {
	rsp, err := c.ClusterControllerGetClusterNodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetClusterNodesResponse(rsp)
}

// ClusterControllerPutRestartWithResponse request returning *ClusterControllerPutRestartResponse
func (c *ClientWithResponses) ClusterControllerPutRestartWithResponse(ctx context.Context, params *ClusterControllerPutRestartParams, reqEditors ...RequestEditorFn) (*ClusterControllerPutRestartResponse, error) {
	rsp, err := c.ClusterControllerPutRestart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerPutRestartResponse(rsp)
}

// ClusterControllerGetNodesRulesetSyncStatusWithResponse request returning *ClusterControllerGetNodesRulesetSyncStatusResponse
func (c *ClientWithResponses) ClusterControllerGetNodesRulesetSyncStatusWithResponse(ctx context.Context, params *ClusterControllerGetNodesRulesetSyncStatusParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetNodesRulesetSyncStatusResponse, error) {
	rsp, err := c.ClusterControllerGetNodesRulesetSyncStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetNodesRulesetSyncStatusResponse(rsp)
}

// ClusterControllerGetStatusWithResponse request returning *ClusterControllerGetStatusResponse
func (c *ClientWithResponses) ClusterControllerGetStatusWithResponse(ctx context.Context, params *ClusterControllerGetStatusParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatusResponse, error) {
	rsp, err := c.ClusterControllerGetStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetStatusResponse(rsp)
}

// ClusterControllerGetConfigurationNodeWithResponse request returning *ClusterControllerGetConfigurationNodeResponse
func (c *ClientWithResponses) ClusterControllerGetConfigurationNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetConfigurationNodeResponse, error) {
	rsp, err := c.ClusterControllerGetConfigurationNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetConfigurationNodeResponse(rsp)
}

// ClusterControllerUpdateConfigurationWithBodyWithResponse request with arbitrary body returning *ClusterControllerUpdateConfigurationResponse
func (c *ClientWithResponses) ClusterControllerUpdateConfigurationWithBodyWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerUpdateConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterControllerUpdateConfigurationResponse, error) {
	rsp, err := c.ClusterControllerUpdateConfigurationWithBody(ctx, nodeId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerUpdateConfigurationResponse(rsp)
}

// ClusterControllerGetNodeConfigWithResponse request returning *ClusterControllerGetNodeConfigResponse
func (c *ClientWithResponses) ClusterControllerGetNodeConfigWithResponse(ctx context.Context, nodeId NodeId, component ClusterControllerGetNodeConfigParamsComponent, configuration ClusterControllerGetNodeConfigParamsConfiguration, params *ClusterControllerGetNodeConfigParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetNodeConfigResponse, error) {
	rsp, err := c.ClusterControllerGetNodeConfig(ctx, nodeId, component, configuration, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetNodeConfigResponse(rsp)
}

// ClusterControllerGetDaemonStatsNodeWithResponse request returning *ClusterControllerGetDaemonStatsNodeResponse
func (c *ClientWithResponses) ClusterControllerGetDaemonStatsNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetDaemonStatsNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetDaemonStatsNodeResponse, error) {
	rsp, err := c.ClusterControllerGetDaemonStatsNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetDaemonStatsNodeResponse(rsp)
}

// ClusterControllerGetInfoNodeWithResponse request returning *ClusterControllerGetInfoNodeResponse
func (c *ClientWithResponses) ClusterControllerGetInfoNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetInfoNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetInfoNodeResponse, error) {
	rsp, err := c.ClusterControllerGetInfoNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetInfoNodeResponse(rsp)
}

// ClusterControllerGetLogNodeWithResponse request returning *ClusterControllerGetLogNodeResponse
func (c *ClientWithResponses) ClusterControllerGetLogNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetLogNodeResponse, error) {
	rsp, err := c.ClusterControllerGetLogNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetLogNodeResponse(rsp)
}

// ClusterControllerGetLogSummaryNodeWithResponse request returning *ClusterControllerGetLogSummaryNodeResponse
func (c *ClientWithResponses) ClusterControllerGetLogSummaryNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetLogSummaryNodeResponse, error) {
	rsp, err := c.ClusterControllerGetLogSummaryNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetLogSummaryNodeResponse(rsp)
}

// ClusterControllerGetStatsNodeWithResponse request returning *ClusterControllerGetStatsNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetStatsNodeResponse(rsp)
}

// ClusterControllerGetStatsAnalysisdNodeWithResponse request returning *ClusterControllerGetStatsAnalysisdNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsAnalysisdNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsAnalysisdNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsAnalysisdNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetStatsAnalysisdNodeResponse(rsp)
}

// ClusterControllerGetStatsHourlyNodeWithResponse request returning *ClusterControllerGetStatsHourlyNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsHourlyNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsHourlyNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsHourlyNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetStatsHourlyNodeResponse(rsp)
}

// ClusterControllerGetStatsRemotedNodeWithResponse request returning *ClusterControllerGetStatsRemotedNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsRemotedNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsRemotedNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsRemotedNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetStatsRemotedNodeResponse(rsp)
}

// ClusterControllerGetStatsWeeklyNodeWithResponse request returning *ClusterControllerGetStatsWeeklyNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsWeeklyNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatsWeeklyNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsWeeklyNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetStatsWeeklyNodeResponse(rsp)
}

// ClusterControllerGetStatusNodeWithResponse request returning *ClusterControllerGetStatusNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatusNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatusNodeParams, reqEditors ...RequestEditorFn) (*ClusterControllerGetStatusNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatusNode(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersClusterControllerGetStatusNodeResponse(rsp)
}

// DecoderControllerGetDecodersWithResponse request returning *DecoderControllerGetDecodersResponse
func (c *ClientWithResponses) DecoderControllerGetDecodersWithResponse(ctx context.Context, params *DecoderControllerGetDecodersParams, reqEditors ...RequestEditorFn) (*DecoderControllerGetDecodersResponse, error) {
	rsp, err := c.DecoderControllerGetDecoders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersDecoderControllerGetDecodersResponse(rsp)
}

// DecoderControllerGetDecodersFilesWithResponse request returning *DecoderControllerGetDecodersFilesResponse
func (c *ClientWithResponses) DecoderControllerGetDecodersFilesWithResponse(ctx context.Context, params *DecoderControllerGetDecodersFilesParams, reqEditors ...RequestEditorFn) (*DecoderControllerGetDecodersFilesResponse, error) {
	rsp, err := c.DecoderControllerGetDecodersFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersDecoderControllerGetDecodersFilesResponse(rsp)
}

// DecoderControllerDeleteFileWithResponse request returning *DecoderControllerDeleteFileResponse
func (c *ClientWithResponses) DecoderControllerDeleteFileWithResponse(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*DecoderControllerDeleteFileResponse, error) {
	rsp, err := c.DecoderControllerDeleteFile(ctx, filename, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersDecoderControllerDeleteFileResponse(rsp)
}

// DecoderControllerGetFileWithResponse request returning *DecoderControllerGetFileResponse
func (c *ClientWithResponses) DecoderControllerGetFileWithResponse(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerGetFileParams, reqEditors ...RequestEditorFn) (*DecoderControllerGetFileResponse, error) {
	rsp, err := c.DecoderControllerGetFile(ctx, filename, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersDecoderControllerGetFileResponse(rsp)
}

// DecoderControllerPutFileWithBodyWithResponse request with arbitrary body returning *DecoderControllerPutFileResponse
func (c *ClientWithResponses) DecoderControllerPutFileWithBodyWithResponse(ctx context.Context, filename XmlFilenamePath, params *DecoderControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecoderControllerPutFileResponse, error) {
	rsp, err := c.DecoderControllerPutFileWithBody(ctx, filename, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersDecoderControllerPutFileResponse(rsp)
}

// DecoderControllerGetDecodersParentsWithResponse request returning *DecoderControllerGetDecodersParentsResponse
func (c *ClientWithResponses) DecoderControllerGetDecodersParentsWithResponse(ctx context.Context, params *DecoderControllerGetDecodersParentsParams, reqEditors ...RequestEditorFn) (*DecoderControllerGetDecodersParentsResponse, error) {
	rsp, err := c.DecoderControllerGetDecodersParents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersDecoderControllerGetDecodersParentsResponse(rsp)
}

// EventControllerForwardEventWithBodyWithResponse request with arbitrary body returning *EventControllerForwardEventResponse
func (c *ClientWithResponses) EventControllerForwardEventWithBodyWithResponse(ctx context.Context, params *EventControllerForwardEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventControllerForwardEventResponse, error) {
	rsp, err := c.EventControllerForwardEventWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersEventControllerForwardEventResponse(rsp)
}

func (c *ClientWithResponses) EventControllerForwardEventWithResponse(ctx context.Context, params *EventControllerForwardEventParams, body EventControllerForwardEventJSONRequestBody, reqEditors ...RequestEditorFn) (*EventControllerForwardEventResponse, error) {
	rsp, err := c.EventControllerForwardEvent(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersEventControllerForwardEventResponse(rsp)
}

// ExperimentalControllerGetCisCatResultsWithResponse request returning *ExperimentalControllerGetCisCatResultsResponse
func (c *ClientWithResponses) ExperimentalControllerGetCisCatResultsWithResponse(ctx context.Context, params *ExperimentalControllerGetCisCatResultsParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetCisCatResultsResponse, error) {
	rsp, err := c.ExperimentalControllerGetCisCatResults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetCisCatResultsResponse(rsp)
}

// ExperimentalControllerClearRootcheckDatabaseWithResponse request returning *ExperimentalControllerClearRootcheckDatabaseResponse
func (c *ClientWithResponses) ExperimentalControllerClearRootcheckDatabaseWithResponse(ctx context.Context, params *ExperimentalControllerClearRootcheckDatabaseParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerClearRootcheckDatabaseResponse, error) {
	rsp, err := c.ExperimentalControllerClearRootcheckDatabase(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerClearRootcheckDatabaseResponse(rsp)
}

// ExperimentalControllerClearSyscheckDatabaseWithResponse request returning *ExperimentalControllerClearSyscheckDatabaseResponse
func (c *ClientWithResponses) ExperimentalControllerClearSyscheckDatabaseWithResponse(ctx context.Context, params *ExperimentalControllerClearSyscheckDatabaseParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerClearSyscheckDatabaseResponse, error) {
	rsp, err := c.ExperimentalControllerClearSyscheckDatabase(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerClearSyscheckDatabaseResponse(rsp)
}

// ExperimentalControllerGetHardwareInfoWithResponse request returning *ExperimentalControllerGetHardwareInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetHardwareInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetHardwareInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetHardwareInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetHardwareInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetHardwareInfoResponse(rsp)
}

// ExperimentalControllerGetHotfixesInfoWithResponse request returning *ExperimentalControllerGetHotfixesInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetHotfixesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetHotfixesInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetHotfixesInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetHotfixesInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetHotfixesInfoResponse(rsp)
}

// ExperimentalControllerGetNetworkAddressInfoWithResponse request returning *ExperimentalControllerGetNetworkAddressInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetNetworkAddressInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkAddressInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetNetworkAddressInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetNetworkAddressInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetNetworkAddressInfoResponse(rsp)
}

// ExperimentalControllerGetNetworkInterfaceInfoWithResponse request returning *ExperimentalControllerGetNetworkInterfaceInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetNetworkInterfaceInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkInterfaceInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetNetworkInterfaceInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetNetworkInterfaceInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetNetworkInterfaceInfoResponse(rsp)
}

// ExperimentalControllerGetNetworkProtocolInfoWithResponse request returning *ExperimentalControllerGetNetworkProtocolInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetNetworkProtocolInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkProtocolInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetNetworkProtocolInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetNetworkProtocolInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetNetworkProtocolInfoResponse(rsp)
}

// ExperimentalControllerGetOsInfoWithResponse request returning *ExperimentalControllerGetOsInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetOsInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetOsInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetOsInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetOsInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetOsInfoResponse(rsp)
}

// ExperimentalControllerGetPackagesInfoWithResponse request returning *ExperimentalControllerGetPackagesInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetPackagesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetPackagesInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetPackagesInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetPackagesInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetPackagesInfoResponse(rsp)
}

// ExperimentalControllerGetPortsInfoWithResponse request returning *ExperimentalControllerGetPortsInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetPortsInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetPortsInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetPortsInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetPortsInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetPortsInfoResponse(rsp)
}

// ExperimentalControllerGetProcessesInfoWithResponse request returning *ExperimentalControllerGetProcessesInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetProcessesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetProcessesInfoParams, reqEditors ...RequestEditorFn) (*ExperimentalControllerGetProcessesInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetProcessesInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersExperimentalControllerGetProcessesInfoResponse(rsp)
}

// AgentControllerDeleteGroupsWithResponse request returning *AgentControllerDeleteGroupsResponse
func (c *ClientWithResponses) AgentControllerDeleteGroupsWithResponse(ctx context.Context, params *AgentControllerDeleteGroupsParams, reqEditors ...RequestEditorFn) (*AgentControllerDeleteGroupsResponse, error) {
	rsp, err := c.AgentControllerDeleteGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerDeleteGroupsResponse(rsp)
}

// AgentControllerGetListGroupWithResponse request returning *AgentControllerGetListGroupResponse
func (c *ClientWithResponses) AgentControllerGetListGroupWithResponse(ctx context.Context, params *AgentControllerGetListGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerGetListGroupResponse, error) {
	rsp, err := c.AgentControllerGetListGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetListGroupResponse(rsp)
}

// AgentControllerPostGroupWithBodyWithResponse request with arbitrary body returning *AgentControllerPostGroupResponse
func (c *ClientWithResponses) AgentControllerPostGroupWithBodyWithResponse(ctx context.Context, params *AgentControllerPostGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentControllerPostGroupResponse, error) {
	rsp, err := c.AgentControllerPostGroupWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerPostGroupResponse(rsp)
}

func (c *ClientWithResponses) AgentControllerPostGroupWithResponse(ctx context.Context, params *AgentControllerPostGroupParams, body AgentControllerPostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentControllerPostGroupResponse, error) {
	rsp, err := c.AgentControllerPostGroup(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerPostGroupResponse(rsp)
}

// AgentControllerGetAgentsInGroupWithResponse request returning *AgentControllerGetAgentsInGroupResponse
func (c *ClientWithResponses) AgentControllerGetAgentsInGroupWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerGetAgentsInGroupParams, reqEditors ...RequestEditorFn) (*AgentControllerGetAgentsInGroupResponse, error) {
	rsp, err := c.AgentControllerGetAgentsInGroup(ctx, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetAgentsInGroupResponse(rsp)
}

// AgentControllerGetGroupConfigWithResponse request returning *AgentControllerGetGroupConfigResponse
func (c *ClientWithResponses) AgentControllerGetGroupConfigWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerGetGroupConfigParams, reqEditors ...RequestEditorFn) (*AgentControllerGetGroupConfigResponse, error) {
	rsp, err := c.AgentControllerGetGroupConfig(ctx, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetGroupConfigResponse(rsp)
}

// AgentControllerPutGroupConfigWithBodyWithResponse request with arbitrary body returning *AgentControllerPutGroupConfigResponse
func (c *ClientWithResponses) AgentControllerPutGroupConfigWithBodyWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerPutGroupConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentControllerPutGroupConfigResponse, error) {
	rsp, err := c.AgentControllerPutGroupConfigWithBody(ctx, groupId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerPutGroupConfigResponse(rsp)
}

// AgentControllerGetGroupFilesWithResponse request returning *AgentControllerGetGroupFilesResponse
func (c *ClientWithResponses) AgentControllerGetGroupFilesWithResponse(ctx context.Context, groupId GroupId, params *AgentControllerGetGroupFilesParams, reqEditors ...RequestEditorFn) (*AgentControllerGetGroupFilesResponse, error) {
	rsp, err := c.AgentControllerGetGroupFiles(ctx, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetGroupFilesResponse(rsp)
}

// AgentControllerGetGroupFileJsonWithResponse request returning *AgentControllerGetGroupFileJsonResponse
func (c *ClientWithResponses) AgentControllerGetGroupFileJsonWithResponse(ctx context.Context, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileJsonParams, reqEditors ...RequestEditorFn) (*AgentControllerGetGroupFileJsonResponse, error) {
	rsp, err := c.AgentControllerGetGroupFileJson(ctx, groupId, fileName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetGroupFileJsonResponse(rsp)
}

// AgentControllerGetGroupFileXmlWithResponse request returning *AgentControllerGetGroupFileXmlResponse
func (c *ClientWithResponses) AgentControllerGetGroupFileXmlWithResponse(ctx context.Context, groupId GroupId, fileName FileName, params *AgentControllerGetGroupFileXmlParams, reqEditors ...RequestEditorFn) (*AgentControllerGetGroupFileXmlResponse, error) {
	rsp, err := c.AgentControllerGetGroupFileXml(ctx, groupId, fileName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersAgentControllerGetGroupFileXmlResponse(rsp)
}

// CdbListControllerGetListsWithResponse request returning *CdbListControllerGetListsResponse
func (c *ClientWithResponses) CdbListControllerGetListsWithResponse(ctx context.Context, params *CdbListControllerGetListsParams, reqEditors ...RequestEditorFn) (*CdbListControllerGetListsResponse, error) {
	rsp, err := c.CdbListControllerGetLists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersCdbListControllerGetListsResponse(rsp)
}

// CdbListControllerGetListsFilesWithResponse request returning *CdbListControllerGetListsFilesResponse
func (c *ClientWithResponses) CdbListControllerGetListsFilesWithResponse(ctx context.Context, params *CdbListControllerGetListsFilesParams, reqEditors ...RequestEditorFn) (*CdbListControllerGetListsFilesResponse, error) {
	rsp, err := c.CdbListControllerGetListsFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersCdbListControllerGetListsFilesResponse(rsp)
}

// CdbListControllerDeleteFileWithResponse request returning *CdbListControllerDeleteFileResponse
func (c *ClientWithResponses) CdbListControllerDeleteFileWithResponse(ctx context.Context, filename ListFilenamePath, params *CdbListControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*CdbListControllerDeleteFileResponse, error) {
	rsp, err := c.CdbListControllerDeleteFile(ctx, filename, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersCdbListControllerDeleteFileResponse(rsp)
}

// CdbListControllerGetFileWithResponse request returning *CdbListControllerGetFileResponse
func (c *ClientWithResponses) CdbListControllerGetFileWithResponse(ctx context.Context, filename ListFilenamePath, params *CdbListControllerGetFileParams, reqEditors ...RequestEditorFn) (*CdbListControllerGetFileResponse, error) {
	rsp, err := c.CdbListControllerGetFile(ctx, filename, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersCdbListControllerGetFileResponse(rsp)
}

// CdbListControllerPutFileWithBodyWithResponse request with arbitrary body returning *CdbListControllerPutFileResponse
func (c *ClientWithResponses) CdbListControllerPutFileWithBodyWithResponse(ctx context.Context, filename ListFilenamePath, params *CdbListControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CdbListControllerPutFileResponse, error) {
	rsp, err := c.CdbListControllerPutFileWithBody(ctx, filename, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersCdbListControllerPutFileResponse(rsp)
}

// LogtestControllerRunLogtestToolWithBodyWithResponse request with arbitrary body returning *LogtestControllerRunLogtestToolResponse
func (c *ClientWithResponses) LogtestControllerRunLogtestToolWithBodyWithResponse(ctx context.Context, params *LogtestControllerRunLogtestToolParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogtestControllerRunLogtestToolResponse, error) {
	rsp, err := c.LogtestControllerRunLogtestToolWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersLogtestControllerRunLogtestToolResponse(rsp)
}

func (c *ClientWithResponses) LogtestControllerRunLogtestToolWithResponse(ctx context.Context, params *LogtestControllerRunLogtestToolParams, body LogtestControllerRunLogtestToolJSONRequestBody, reqEditors ...RequestEditorFn) (*LogtestControllerRunLogtestToolResponse, error) {
	rsp, err := c.LogtestControllerRunLogtestTool(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersLogtestControllerRunLogtestToolResponse(rsp)
}

// LogtestControllerEndLogtestSessionWithResponse request returning *LogtestControllerEndLogtestSessionResponse
func (c *ClientWithResponses) LogtestControllerEndLogtestSessionWithResponse(ctx context.Context, token LogtestToken, params *LogtestControllerEndLogtestSessionParams, reqEditors ...RequestEditorFn) (*LogtestControllerEndLogtestSessionResponse, error) {
	rsp, err := c.LogtestControllerEndLogtestSession(ctx, token, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersLogtestControllerEndLogtestSessionResponse(rsp)
}

// ManagerControllerGetApiConfigWithResponse request returning *ManagerControllerGetApiConfigResponse
func (c *ClientWithResponses) ManagerControllerGetApiConfigWithResponse(ctx context.Context, params *ManagerControllerGetApiConfigParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetApiConfigResponse, error) {
	rsp, err := c.ManagerControllerGetApiConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetApiConfigResponse(rsp)
}

// ManagerControllerGetConfigurationWithResponse request returning *ManagerControllerGetConfigurationResponse
func (c *ClientWithResponses) ManagerControllerGetConfigurationWithResponse(ctx context.Context, params *ManagerControllerGetConfigurationParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetConfigurationResponse, error) {
	rsp, err := c.ManagerControllerGetConfiguration(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetConfigurationResponse(rsp)
}

// ManagerControllerUpdateConfigurationWithBodyWithResponse request with arbitrary body returning *ManagerControllerUpdateConfigurationResponse
func (c *ClientWithResponses) ManagerControllerUpdateConfigurationWithBodyWithResponse(ctx context.Context, params *ManagerControllerUpdateConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagerControllerUpdateConfigurationResponse, error) {
	rsp, err := c.ManagerControllerUpdateConfigurationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerUpdateConfigurationResponse(rsp)
}

// ManagerControllerGetConfValidationWithResponse request returning *ManagerControllerGetConfValidationResponse
func (c *ClientWithResponses) ManagerControllerGetConfValidationWithResponse(ctx context.Context, params *ManagerControllerGetConfValidationParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetConfValidationResponse, error) {
	rsp, err := c.ManagerControllerGetConfValidation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetConfValidationResponse(rsp)
}

// ManagerControllerGetManagerConfigOndemandWithResponse request returning *ManagerControllerGetManagerConfigOndemandResponse
func (c *ClientWithResponses) ManagerControllerGetManagerConfigOndemandWithResponse(ctx context.Context, component ManagerControllerGetManagerConfigOndemandParamsComponent, configuration ManagerControllerGetManagerConfigOndemandParamsConfiguration, params *ManagerControllerGetManagerConfigOndemandParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetManagerConfigOndemandResponse, error) {
	rsp, err := c.ManagerControllerGetManagerConfigOndemand(ctx, component, configuration, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetManagerConfigOndemandResponse(rsp)
}

// ManagerControllerGetDaemonStatsWithResponse request returning *ManagerControllerGetDaemonStatsResponse
func (c *ClientWithResponses) ManagerControllerGetDaemonStatsWithResponse(ctx context.Context, params *ManagerControllerGetDaemonStatsParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetDaemonStatsResponse, error) {
	rsp, err := c.ManagerControllerGetDaemonStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetDaemonStatsResponse(rsp)
}

// ManagerControllerGetInfoWithResponse request returning *ManagerControllerGetInfoResponse
func (c *ClientWithResponses) ManagerControllerGetInfoWithResponse(ctx context.Context, params *ManagerControllerGetInfoParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetInfoResponse, error) {
	rsp, err := c.ManagerControllerGetInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetInfoResponse(rsp)
}

// ManagerControllerGetLogWithResponse request returning *ManagerControllerGetLogResponse
func (c *ClientWithResponses) ManagerControllerGetLogWithResponse(ctx context.Context, params *ManagerControllerGetLogParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetLogResponse, error) {
	rsp, err := c.ManagerControllerGetLog(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetLogResponse(rsp)
}

// ManagerControllerGetLogSummaryWithResponse request returning *ManagerControllerGetLogSummaryResponse
func (c *ClientWithResponses) ManagerControllerGetLogSummaryWithResponse(ctx context.Context, params *ManagerControllerGetLogSummaryParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetLogSummaryResponse, error) {
	rsp, err := c.ManagerControllerGetLogSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetLogSummaryResponse(rsp)
}

// ManagerControllerPutRestartWithResponse request returning *ManagerControllerPutRestartResponse
func (c *ClientWithResponses) ManagerControllerPutRestartWithResponse(ctx context.Context, params *ManagerControllerPutRestartParams, reqEditors ...RequestEditorFn) (*ManagerControllerPutRestartResponse, error) {
	rsp, err := c.ManagerControllerPutRestart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerPutRestartResponse(rsp)
}

// ManagerControllerGetStatsWithResponse request returning *ManagerControllerGetStatsResponse
func (c *ClientWithResponses) ManagerControllerGetStatsWithResponse(ctx context.Context, params *ManagerControllerGetStatsParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsResponse, error) {
	rsp, err := c.ManagerControllerGetStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetStatsResponse(rsp)
}

// ManagerControllerGetStatsAnalysisdWithResponse request returning *ManagerControllerGetStatsAnalysisdResponse
func (c *ClientWithResponses) ManagerControllerGetStatsAnalysisdWithResponse(ctx context.Context, params *ManagerControllerGetStatsAnalysisdParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsAnalysisdResponse, error) {
	rsp, err := c.ManagerControllerGetStatsAnalysisd(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetStatsAnalysisdResponse(rsp)
}

// ManagerControllerGetStatsHourlyWithResponse request returning *ManagerControllerGetStatsHourlyResponse
func (c *ClientWithResponses) ManagerControllerGetStatsHourlyWithResponse(ctx context.Context, params *ManagerControllerGetStatsHourlyParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsHourlyResponse, error) {
	rsp, err := c.ManagerControllerGetStatsHourly(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetStatsHourlyResponse(rsp)
}

// ManagerControllerGetStatsRemotedWithResponse request returning *ManagerControllerGetStatsRemotedResponse
func (c *ClientWithResponses) ManagerControllerGetStatsRemotedWithResponse(ctx context.Context, params *ManagerControllerGetStatsRemotedParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsRemotedResponse, error) {
	rsp, err := c.ManagerControllerGetStatsRemoted(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetStatsRemotedResponse(rsp)
}

// ManagerControllerGetStatsWeeklyWithResponse request returning *ManagerControllerGetStatsWeeklyResponse
func (c *ClientWithResponses) ManagerControllerGetStatsWeeklyWithResponse(ctx context.Context, params *ManagerControllerGetStatsWeeklyParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatsWeeklyResponse, error) {
	rsp, err := c.ManagerControllerGetStatsWeekly(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetStatsWeeklyResponse(rsp)
}

// ManagerControllerGetStatusWithResponse request returning *ManagerControllerGetStatusResponse
func (c *ClientWithResponses) ManagerControllerGetStatusWithResponse(ctx context.Context, params *ManagerControllerGetStatusParams, reqEditors ...RequestEditorFn) (*ManagerControllerGetStatusResponse, error) {
	rsp, err := c.ManagerControllerGetStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerGetStatusResponse(rsp)
}

// ManagerControllerCheckAvailableVersionWithResponse request returning *ManagerControllerCheckAvailableVersionResponse
func (c *ClientWithResponses) ManagerControllerCheckAvailableVersionWithResponse(ctx context.Context, params *ManagerControllerCheckAvailableVersionParams, reqEditors ...RequestEditorFn) (*ManagerControllerCheckAvailableVersionResponse, error) {
	rsp, err := c.ManagerControllerCheckAvailableVersion(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersManagerControllerCheckAvailableVersionResponse(rsp)
}

// MitreControllerGetGroupsWithResponse request returning *MitreControllerGetGroupsResponse
func (c *ClientWithResponses) MitreControllerGetGroupsWithResponse(ctx context.Context, params *MitreControllerGetGroupsParams, reqEditors ...RequestEditorFn) (*MitreControllerGetGroupsResponse, error) {
	rsp, err := c.MitreControllerGetGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersMitreControllerGetGroupsResponse(rsp)
}

// MitreControllerGetMetadataWithResponse request returning *MitreControllerGetMetadataResponse
func (c *ClientWithResponses) MitreControllerGetMetadataWithResponse(ctx context.Context, params *MitreControllerGetMetadataParams, reqEditors ...RequestEditorFn) (*MitreControllerGetMetadataResponse, error) {
	rsp, err := c.MitreControllerGetMetadata(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersMitreControllerGetMetadataResponse(rsp)
}

// MitreControllerGetMitigationsWithResponse request returning *MitreControllerGetMitigationsResponse
func (c *ClientWithResponses) MitreControllerGetMitigationsWithResponse(ctx context.Context, params *MitreControllerGetMitigationsParams, reqEditors ...RequestEditorFn) (*MitreControllerGetMitigationsResponse, error) {
	rsp, err := c.MitreControllerGetMitigations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersMitreControllerGetMitigationsResponse(rsp)
}

// MitreControllerGetReferencesWithResponse request returning *MitreControllerGetReferencesResponse
func (c *ClientWithResponses) MitreControllerGetReferencesWithResponse(ctx context.Context, params *MitreControllerGetReferencesParams, reqEditors ...RequestEditorFn) (*MitreControllerGetReferencesResponse, error) {
	rsp, err := c.MitreControllerGetReferences(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersMitreControllerGetReferencesResponse(rsp)
}

// MitreControllerGetSoftwareWithResponse request returning *MitreControllerGetSoftwareResponse
func (c *ClientWithResponses) MitreControllerGetSoftwareWithResponse(ctx context.Context, params *MitreControllerGetSoftwareParams, reqEditors ...RequestEditorFn) (*MitreControllerGetSoftwareResponse, error) {
	rsp, err := c.MitreControllerGetSoftware(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersMitreControllerGetSoftwareResponse(rsp)
}

// MitreControllerGetTacticsWithResponse request returning *MitreControllerGetTacticsResponse
func (c *ClientWithResponses) MitreControllerGetTacticsWithResponse(ctx context.Context, params *MitreControllerGetTacticsParams, reqEditors ...RequestEditorFn) (*MitreControllerGetTacticsResponse, error) {
	rsp, err := c.MitreControllerGetTactics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersMitreControllerGetTacticsResponse(rsp)
}

// MitreControllerGetTechniquesWithResponse request returning *MitreControllerGetTechniquesResponse
func (c *ClientWithResponses) MitreControllerGetTechniquesWithResponse(ctx context.Context, params *MitreControllerGetTechniquesParams, reqEditors ...RequestEditorFn) (*MitreControllerGetTechniquesResponse, error) {
	rsp, err := c.MitreControllerGetTechniques(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersMitreControllerGetTechniquesResponse(rsp)
}

// OverviewControllerGetOverviewAgentsWithResponse request returning *OverviewControllerGetOverviewAgentsResponse
func (c *ClientWithResponses) OverviewControllerGetOverviewAgentsWithResponse(ctx context.Context, params *OverviewControllerGetOverviewAgentsParams, reqEditors ...RequestEditorFn) (*OverviewControllerGetOverviewAgentsResponse, error) {
	rsp, err := c.OverviewControllerGetOverviewAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersOverviewControllerGetOverviewAgentsResponse(rsp)
}

// RootcheckControllerPutRootcheckWithResponse request returning *RootcheckControllerPutRootcheckResponse
func (c *ClientWithResponses) RootcheckControllerPutRootcheckWithResponse(ctx context.Context, params *RootcheckControllerPutRootcheckParams, reqEditors ...RequestEditorFn) (*RootcheckControllerPutRootcheckResponse, error) {
	rsp, err := c.RootcheckControllerPutRootcheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRootcheckControllerPutRootcheckResponse(rsp)
}

// RootcheckControllerDeleteRootcheckWithResponse request returning *RootcheckControllerDeleteRootcheckResponse
func (c *ClientWithResponses) RootcheckControllerDeleteRootcheckWithResponse(ctx context.Context, agentId AgentId, params *RootcheckControllerDeleteRootcheckParams, reqEditors ...RequestEditorFn) (*RootcheckControllerDeleteRootcheckResponse, error) {
	rsp, err := c.RootcheckControllerDeleteRootcheck(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRootcheckControllerDeleteRootcheckResponse(rsp)
}

// RootcheckControllerGetRootcheckAgentWithResponse request returning *RootcheckControllerGetRootcheckAgentResponse
func (c *ClientWithResponses) RootcheckControllerGetRootcheckAgentWithResponse(ctx context.Context, agentId AgentId, params *RootcheckControllerGetRootcheckAgentParams, reqEditors ...RequestEditorFn) (*RootcheckControllerGetRootcheckAgentResponse, error) {
	rsp, err := c.RootcheckControllerGetRootcheckAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRootcheckControllerGetRootcheckAgentResponse(rsp)
}

// RootcheckControllerGetLastScanAgentWithResponse request returning *RootcheckControllerGetLastScanAgentResponse
func (c *ClientWithResponses) RootcheckControllerGetLastScanAgentWithResponse(ctx context.Context, agentId AgentId, params *RootcheckControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*RootcheckControllerGetLastScanAgentResponse, error) {
	rsp, err := c.RootcheckControllerGetLastScanAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRootcheckControllerGetLastScanAgentResponse(rsp)
}

// RuleControllerGetRulesWithResponse request returning *RuleControllerGetRulesResponse
func (c *ClientWithResponses) RuleControllerGetRulesWithResponse(ctx context.Context, params *RuleControllerGetRulesParams, reqEditors ...RequestEditorFn) (*RuleControllerGetRulesResponse, error) {
	rsp, err := c.RuleControllerGetRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRuleControllerGetRulesResponse(rsp)
}

// RuleControllerGetRulesFilesWithResponse request returning *RuleControllerGetRulesFilesResponse
func (c *ClientWithResponses) RuleControllerGetRulesFilesWithResponse(ctx context.Context, params *RuleControllerGetRulesFilesParams, reqEditors ...RequestEditorFn) (*RuleControllerGetRulesFilesResponse, error) {
	rsp, err := c.RuleControllerGetRulesFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRuleControllerGetRulesFilesResponse(rsp)
}

// RuleControllerDeleteFileWithResponse request returning *RuleControllerDeleteFileResponse
func (c *ClientWithResponses) RuleControllerDeleteFileWithResponse(ctx context.Context, filename XmlFilenamePath, params *RuleControllerDeleteFileParams, reqEditors ...RequestEditorFn) (*RuleControllerDeleteFileResponse, error) {
	rsp, err := c.RuleControllerDeleteFile(ctx, filename, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRuleControllerDeleteFileResponse(rsp)
}

// RuleControllerGetFileWithResponse request returning *RuleControllerGetFileResponse
func (c *ClientWithResponses) RuleControllerGetFileWithResponse(ctx context.Context, filename XmlFilenamePath, params *RuleControllerGetFileParams, reqEditors ...RequestEditorFn) (*RuleControllerGetFileResponse, error) {
	rsp, err := c.RuleControllerGetFile(ctx, filename, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRuleControllerGetFileResponse(rsp)
}

// RuleControllerPutFileWithBodyWithResponse request with arbitrary body returning *RuleControllerPutFileResponse
func (c *ClientWithResponses) RuleControllerPutFileWithBodyWithResponse(ctx context.Context, filename XmlFilenamePath, params *RuleControllerPutFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleControllerPutFileResponse, error) {
	rsp, err := c.RuleControllerPutFileWithBody(ctx, filename, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRuleControllerPutFileResponse(rsp)
}

// RuleControllerGetRulesGroupsWithResponse request returning *RuleControllerGetRulesGroupsResponse
func (c *ClientWithResponses) RuleControllerGetRulesGroupsWithResponse(ctx context.Context, params *RuleControllerGetRulesGroupsParams, reqEditors ...RequestEditorFn) (*RuleControllerGetRulesGroupsResponse, error) {
	rsp, err := c.RuleControllerGetRulesGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRuleControllerGetRulesGroupsResponse(rsp)
}

// RuleControllerGetRulesRequirementWithResponse request returning *RuleControllerGetRulesRequirementResponse
func (c *ClientWithResponses) RuleControllerGetRulesRequirementWithResponse(ctx context.Context, requirement RuleControllerGetRulesRequirementParamsRequirement, params *RuleControllerGetRulesRequirementParams, reqEditors ...RequestEditorFn) (*RuleControllerGetRulesRequirementResponse, error) {
	rsp, err := c.RuleControllerGetRulesRequirement(ctx, requirement, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersRuleControllerGetRulesRequirementResponse(rsp)
}

// ScaControllerGetScaAgentWithResponse request returning *ScaControllerGetScaAgentResponse
func (c *ClientWithResponses) ScaControllerGetScaAgentWithResponse(ctx context.Context, agentId AgentId, params *ScaControllerGetScaAgentParams, reqEditors ...RequestEditorFn) (*ScaControllerGetScaAgentResponse, error) {
	rsp, err := c.ScaControllerGetScaAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersScaControllerGetScaAgentResponse(rsp)
}

// ScaControllerGetScaChecksWithResponse request returning *ScaControllerGetScaChecksResponse
func (c *ClientWithResponses) ScaControllerGetScaChecksWithResponse(ctx context.Context, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams, reqEditors ...RequestEditorFn) (*ScaControllerGetScaChecksResponse, error) {
	rsp, err := c.ScaControllerGetScaChecks(ctx, agentId, policyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersScaControllerGetScaChecksResponse(rsp)
}

// SecurityControllerGetRbacActionsWithResponse request returning *SecurityControllerGetRbacActionsResponse
func (c *ClientWithResponses) SecurityControllerGetRbacActionsWithResponse(ctx context.Context, params *SecurityControllerGetRbacActionsParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetRbacActionsResponse, error) {
	rsp, err := c.SecurityControllerGetRbacActions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerGetRbacActionsResponse(rsp)
}

// SecurityControllerDeleteSecurityConfigWithResponse request returning *SecurityControllerDeleteSecurityConfigResponse
func (c *ClientWithResponses) SecurityControllerDeleteSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerDeleteSecurityConfigParams, reqEditors ...RequestEditorFn) (*SecurityControllerDeleteSecurityConfigResponse, error) {
	rsp, err := c.SecurityControllerDeleteSecurityConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerDeleteSecurityConfigResponse(rsp)
}

// SecurityControllerGetSecurityConfigWithResponse request returning *SecurityControllerGetSecurityConfigResponse
func (c *ClientWithResponses) SecurityControllerGetSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerGetSecurityConfigParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetSecurityConfigResponse, error) {
	rsp, err := c.SecurityControllerGetSecurityConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerGetSecurityConfigResponse(rsp)
}

// SecurityControllerPutSecurityConfigWithBodyWithResponse request with arbitrary body returning *SecurityControllerPutSecurityConfigResponse
func (c *ClientWithResponses) SecurityControllerPutSecurityConfigWithBodyWithResponse(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerPutSecurityConfigResponse, error) {
	rsp, err := c.SecurityControllerPutSecurityConfigWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerPutSecurityConfigResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerPutSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerPutSecurityConfigResponse, error) {
	rsp, err := c.SecurityControllerPutSecurityConfig(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerPutSecurityConfigResponse(rsp)
}

// SecurityControllerRemovePoliciesWithResponse request returning *SecurityControllerRemovePoliciesResponse
func (c *ClientWithResponses) SecurityControllerRemovePoliciesWithResponse(ctx context.Context, params *SecurityControllerRemovePoliciesParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemovePoliciesResponse, error) {
	rsp, err := c.SecurityControllerRemovePolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerRemovePoliciesResponse(rsp)
}

// SecurityControllerGetPoliciesWithResponse request returning *SecurityControllerGetPoliciesResponse
func (c *ClientWithResponses) SecurityControllerGetPoliciesWithResponse(ctx context.Context, params *SecurityControllerGetPoliciesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetPoliciesResponse, error) {
	rsp, err := c.SecurityControllerGetPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerGetPoliciesResponse(rsp)
}

// SecurityControllerAddPolicyWithBodyWithResponse request with arbitrary body returning *SecurityControllerAddPolicyResponse
func (c *ClientWithResponses) SecurityControllerAddPolicyWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerAddPolicyResponse, error) {
	rsp, err := c.SecurityControllerAddPolicyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerAddPolicyResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerAddPolicyWithResponse(ctx context.Context, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerAddPolicyResponse, error) {
	rsp, err := c.SecurityControllerAddPolicy(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerAddPolicyResponse(rsp)
}

// SecurityControllerUpdatePolicyWithBodyWithResponse request with arbitrary body returning *SecurityControllerUpdatePolicyResponse
func (c *ClientWithResponses) SecurityControllerUpdatePolicyWithBodyWithResponse(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerUpdatePolicyResponse, error) {
	rsp, err := c.SecurityControllerUpdatePolicyWithBody(ctx, policyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerUpdatePolicyResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerUpdatePolicyWithResponse(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerUpdatePolicyResponse, error) {
	rsp, err := c.SecurityControllerUpdatePolicy(ctx, policyId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerUpdatePolicyResponse(rsp)
}

// SecurityControllerGetRbacResourcesWithResponse request returning *SecurityControllerGetRbacResourcesResponse
func (c *ClientWithResponses) SecurityControllerGetRbacResourcesWithResponse(ctx context.Context, params *SecurityControllerGetRbacResourcesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetRbacResourcesResponse, error) {
	rsp, err := c.SecurityControllerGetRbacResources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerGetRbacResourcesResponse(rsp)
}

// SecurityControllerRemoveRolesWithResponse request returning *SecurityControllerRemoveRolesResponse
func (c *ClientWithResponses) SecurityControllerRemoveRolesWithResponse(ctx context.Context, params *SecurityControllerRemoveRolesParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveRolesResponse, error) {
	rsp, err := c.SecurityControllerRemoveRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerRemoveRolesResponse(rsp)
}

// SecurityControllerGetRolesWithResponse request returning *SecurityControllerGetRolesResponse
func (c *ClientWithResponses) SecurityControllerGetRolesWithResponse(ctx context.Context, params *SecurityControllerGetRolesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetRolesResponse, error) {
	rsp, err := c.SecurityControllerGetRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerGetRolesResponse(rsp)
}

// SecurityControllerAddRoleWithBodyWithResponse request with arbitrary body returning *SecurityControllerAddRoleResponse
func (c *ClientWithResponses) SecurityControllerAddRoleWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerAddRoleResponse, error) {
	rsp, err := c.SecurityControllerAddRoleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerAddRoleResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerAddRoleWithResponse(ctx context.Context, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerAddRoleResponse, error) {
	rsp, err := c.SecurityControllerAddRole(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerAddRoleResponse(rsp)
}

// SecurityControllerUpdateRoleWithBodyWithResponse request with arbitrary body returning *SecurityControllerUpdateRoleResponse
func (c *ClientWithResponses) SecurityControllerUpdateRoleWithBodyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateRoleResponse, error) {
	rsp, err := c.SecurityControllerUpdateRoleWithBody(ctx, roleId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerUpdateRoleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateRoleResponse, error) {
	rsp, err := c.SecurityControllerUpdateRole(ctx, roleId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerUpdateRoleResponse(rsp)
}

// SecurityControllerRemoveRolePolicyWithResponse request returning *SecurityControllerRemoveRolePolicyResponse
func (c *ClientWithResponses) SecurityControllerRemoveRolePolicyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveRolePolicyResponse, error) {
	rsp, err := c.SecurityControllerRemoveRolePolicy(ctx, roleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerRemoveRolePolicyResponse(rsp)
}

// SecurityControllerSetRolePolicyWithResponse request returning *SecurityControllerSetRolePolicyResponse
func (c *ClientWithResponses) SecurityControllerSetRolePolicyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerSetRolePolicyParams, reqEditors ...RequestEditorFn) (*SecurityControllerSetRolePolicyResponse, error) {
	rsp, err := c.SecurityControllerSetRolePolicy(ctx, roleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerSetRolePolicyResponse(rsp)
}

// SecurityControllerRemoveRoleRuleWithResponse request returning *SecurityControllerRemoveRoleRuleResponse
func (c *ClientWithResponses) SecurityControllerRemoveRoleRuleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveRoleRuleResponse, error) {
	rsp, err := c.SecurityControllerRemoveRoleRule(ctx, roleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerRemoveRoleRuleResponse(rsp)
}

// SecurityControllerSetRoleRuleWithResponse request returning *SecurityControllerSetRoleRuleResponse
func (c *ClientWithResponses) SecurityControllerSetRoleRuleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerSetRoleRuleParams, reqEditors ...RequestEditorFn) (*SecurityControllerSetRoleRuleResponse, error) {
	rsp, err := c.SecurityControllerSetRoleRule(ctx, roleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerSetRoleRuleResponse(rsp)
}

// SecurityControllerRemoveRulesWithResponse request returning *SecurityControllerRemoveRulesResponse
func (c *ClientWithResponses) SecurityControllerRemoveRulesWithResponse(ctx context.Context, params *SecurityControllerRemoveRulesParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveRulesResponse, error) {
	rsp, err := c.SecurityControllerRemoveRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerRemoveRulesResponse(rsp)
}

// SecurityControllerGetRulesWithResponse request returning *SecurityControllerGetRulesResponse
func (c *ClientWithResponses) SecurityControllerGetRulesWithResponse(ctx context.Context, params *SecurityControllerGetRulesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetRulesResponse, error) {
	rsp, err := c.SecurityControllerGetRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerGetRulesResponse(rsp)
}

// SecurityControllerAddRuleWithBodyWithResponse request with arbitrary body returning *SecurityControllerAddRuleResponse
func (c *ClientWithResponses) SecurityControllerAddRuleWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerAddRuleResponse, error) {
	rsp, err := c.SecurityControllerAddRuleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerAddRuleResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerAddRuleWithResponse(ctx context.Context, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerAddRuleResponse, error) {
	rsp, err := c.SecurityControllerAddRule(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerAddRuleResponse(rsp)
}

// SecurityControllerUpdateRuleWithBodyWithResponse request with arbitrary body returning *SecurityControllerUpdateRuleResponse
func (c *ClientWithResponses) SecurityControllerUpdateRuleWithBodyWithResponse(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateRuleResponse, error) {
	rsp, err := c.SecurityControllerUpdateRuleWithBody(ctx, ruleId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerUpdateRuleResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerUpdateRuleWithResponse(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateRuleResponse, error) {
	rsp, err := c.SecurityControllerUpdateRule(ctx, ruleId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerUpdateRuleResponse(rsp)
}

// SecurityControllerLogoutUserWithResponse request returning *SecurityControllerLogoutUserResponse
func (c *ClientWithResponses) SecurityControllerLogoutUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SecurityControllerLogoutUserResponse, error) {
	rsp, err := c.SecurityControllerLogoutUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerLogoutUserResponse(rsp)
}

// SecurityControllerDeprecatedLoginUserWithResponse request returning *SecurityControllerDeprecatedLoginUserResponse
func (c *ClientWithResponses) SecurityControllerDeprecatedLoginUserWithResponse(ctx context.Context, params *SecurityControllerDeprecatedLoginUserParams, reqEditors ...RequestEditorFn) (*SecurityControllerDeprecatedLoginUserResponse, error) {
	rsp, err := c.SecurityControllerDeprecatedLoginUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerDeprecatedLoginUserResponse(rsp)
}

// SecurityControllerLoginUserWithResponse request returning *SecurityControllerLoginUserResponse
func (c *ClientWithResponses) SecurityControllerLoginUserWithResponse(ctx context.Context, params *SecurityControllerLoginUserParams, reqEditors ...RequestEditorFn) (*SecurityControllerLoginUserResponse, error) {
	rsp, err := c.SecurityControllerLoginUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerLoginUserResponse(rsp)
}

// SecurityControllerRunAsLoginWithBodyWithResponse request with arbitrary body returning *SecurityControllerRunAsLoginResponse
func (c *ClientWithResponses) SecurityControllerRunAsLoginWithBodyWithResponse(ctx context.Context, params *SecurityControllerRunAsLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerRunAsLoginResponse, error) {
	rsp, err := c.SecurityControllerRunAsLoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerRunAsLoginResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerRunAsLoginWithResponse(ctx context.Context, params *SecurityControllerRunAsLoginParams, body SecurityControllerRunAsLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerRunAsLoginResponse, error) {
	rsp, err := c.SecurityControllerRunAsLogin(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerRunAsLoginResponse(rsp)
}

// SecurityControllerRevokeAllTokensWithResponse request returning *SecurityControllerRevokeAllTokensResponse
func (c *ClientWithResponses) SecurityControllerRevokeAllTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SecurityControllerRevokeAllTokensResponse, error) {
	rsp, err := c.SecurityControllerRevokeAllTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerRevokeAllTokensResponse(rsp)
}

// SecurityControllerDeleteUsersWithResponse request returning *SecurityControllerDeleteUsersResponse
func (c *ClientWithResponses) SecurityControllerDeleteUsersWithResponse(ctx context.Context, params *SecurityControllerDeleteUsersParams, reqEditors ...RequestEditorFn) (*SecurityControllerDeleteUsersResponse, error) {
	rsp, err := c.SecurityControllerDeleteUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerDeleteUsersResponse(rsp)
}

// SecurityControllerGetUsersWithResponse request returning *SecurityControllerGetUsersResponse
func (c *ClientWithResponses) SecurityControllerGetUsersWithResponse(ctx context.Context, params *SecurityControllerGetUsersParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetUsersResponse, error) {
	rsp, err := c.SecurityControllerGetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerGetUsersResponse(rsp)
}

// SecurityControllerCreateUserWithBodyWithResponse request with arbitrary body returning *SecurityControllerCreateUserResponse
func (c *ClientWithResponses) SecurityControllerCreateUserWithBodyWithResponse(ctx context.Context, params *SecurityControllerCreateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerCreateUserResponse, error) {
	rsp, err := c.SecurityControllerCreateUserWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerCreateUserResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerCreateUserWithResponse(ctx context.Context, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerCreateUserResponse, error) {
	rsp, err := c.SecurityControllerCreateUser(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerCreateUserResponse(rsp)
}

// SecurityControllerGetUserMeWithResponse request returning *SecurityControllerGetUserMeResponse
func (c *ClientWithResponses) SecurityControllerGetUserMeWithResponse(ctx context.Context, params *SecurityControllerGetUserMeParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetUserMeResponse, error) {
	rsp, err := c.SecurityControllerGetUserMe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerGetUserMeResponse(rsp)
}

// SecurityControllerGetUserMePoliciesWithResponse request returning *SecurityControllerGetUserMePoliciesResponse
func (c *ClientWithResponses) SecurityControllerGetUserMePoliciesWithResponse(ctx context.Context, params *SecurityControllerGetUserMePoliciesParams, reqEditors ...RequestEditorFn) (*SecurityControllerGetUserMePoliciesResponse, error) {
	rsp, err := c.SecurityControllerGetUserMePolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerGetUserMePoliciesResponse(rsp)
}

// SecurityControllerUpdateUserWithBodyWithResponse request with arbitrary body returning *SecurityControllerUpdateUserResponse
func (c *ClientWithResponses) SecurityControllerUpdateUserWithBodyWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateUserResponse, error) {
	rsp, err := c.SecurityControllerUpdateUserWithBody(ctx, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerUpdateUserWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SecurityControllerUpdateUserResponse, error) {
	rsp, err := c.SecurityControllerUpdateUser(ctx, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerUpdateUserResponse(rsp)
}

// SecurityControllerRemoveUserRoleWithResponse request returning *SecurityControllerRemoveUserRoleResponse
func (c *ClientWithResponses) SecurityControllerRemoveUserRoleWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams, reqEditors ...RequestEditorFn) (*SecurityControllerRemoveUserRoleResponse, error) {
	rsp, err := c.SecurityControllerRemoveUserRole(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerRemoveUserRoleResponse(rsp)
}

// SecurityControllerSetUserRoleWithResponse request returning *SecurityControllerSetUserRoleResponse
func (c *ClientWithResponses) SecurityControllerSetUserRoleWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerSetUserRoleParams, reqEditors ...RequestEditorFn) (*SecurityControllerSetUserRoleResponse, error) {
	rsp, err := c.SecurityControllerSetUserRole(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerSetUserRoleResponse(rsp)
}

// SecurityControllerEditRunAsWithResponse request returning *SecurityControllerEditRunAsResponse
func (c *ClientWithResponses) SecurityControllerEditRunAsWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerEditRunAsParams, reqEditors ...RequestEditorFn) (*SecurityControllerEditRunAsResponse, error) {
	rsp, err := c.SecurityControllerEditRunAs(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSecurityControllerEditRunAsResponse(rsp)
}

// SyscheckControllerPutSyscheckWithResponse request returning *SyscheckControllerPutSyscheckResponse
func (c *ClientWithResponses) SyscheckControllerPutSyscheckWithResponse(ctx context.Context, params *SyscheckControllerPutSyscheckParams, reqEditors ...RequestEditorFn) (*SyscheckControllerPutSyscheckResponse, error) {
	rsp, err := c.SyscheckControllerPutSyscheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscheckControllerPutSyscheckResponse(rsp)
}

// SyscheckControllerDeleteSyscheckAgentWithResponse request returning *SyscheckControllerDeleteSyscheckAgentResponse
func (c *ClientWithResponses) SyscheckControllerDeleteSyscheckAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams, reqEditors ...RequestEditorFn) (*SyscheckControllerDeleteSyscheckAgentResponse, error) {
	rsp, err := c.SyscheckControllerDeleteSyscheckAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscheckControllerDeleteSyscheckAgentResponse(rsp)
}

// SyscheckControllerGetSyscheckAgentWithResponse request returning *SyscheckControllerGetSyscheckAgentResponse
func (c *ClientWithResponses) SyscheckControllerGetSyscheckAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams, reqEditors ...RequestEditorFn) (*SyscheckControllerGetSyscheckAgentResponse, error) {
	rsp, err := c.SyscheckControllerGetSyscheckAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscheckControllerGetSyscheckAgentResponse(rsp)
}

// SyscheckControllerGetLastScanAgentWithResponse request returning *SyscheckControllerGetLastScanAgentResponse
func (c *ClientWithResponses) SyscheckControllerGetLastScanAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*SyscheckControllerGetLastScanAgentResponse, error) {
	rsp, err := c.SyscheckControllerGetLastScanAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscheckControllerGetLastScanAgentResponse(rsp)
}

// SyscollectorControllerGetHardwareInfoWithResponse request returning *SyscollectorControllerGetHardwareInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetHardwareInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetHardwareInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetHardwareInfo(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscollectorControllerGetHardwareInfoResponse(rsp)
}

// SyscollectorControllerGetHotfixInfoWithResponse request returning *SyscollectorControllerGetHotfixInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetHotfixInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetHotfixInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetHotfixInfo(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscollectorControllerGetHotfixInfoResponse(rsp)
}

// SyscollectorControllerGetNetworkAddressInfoWithResponse request returning *SyscollectorControllerGetNetworkAddressInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetNetworkAddressInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetNetworkAddressInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetNetworkAddressInfo(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscollectorControllerGetNetworkAddressInfoResponse(rsp)
}

// SyscollectorControllerGetNetworkInterfaceInfoWithResponse request returning *SyscollectorControllerGetNetworkInterfaceInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetNetworkInterfaceInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetNetworkInterfaceInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetNetworkInterfaceInfo(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscollectorControllerGetNetworkInterfaceInfoResponse(rsp)
}

// SyscollectorControllerGetNetworkProtocolInfoWithResponse request returning *SyscollectorControllerGetNetworkProtocolInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetNetworkProtocolInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetNetworkProtocolInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetNetworkProtocolInfo(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscollectorControllerGetNetworkProtocolInfoResponse(rsp)
}

// SyscollectorControllerGetOsInfoWithResponse request returning *SyscollectorControllerGetOsInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetOsInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetOsInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetOsInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetOsInfo(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscollectorControllerGetOsInfoResponse(rsp)
}

// SyscollectorControllerGetPackagesInfoWithResponse request returning *SyscollectorControllerGetPackagesInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetPackagesInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetPackagesInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetPackagesInfo(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscollectorControllerGetPackagesInfoResponse(rsp)
}

// SyscollectorControllerGetPortsInfoWithResponse request returning *SyscollectorControllerGetPortsInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetPortsInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetPortsInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetPortsInfo(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscollectorControllerGetPortsInfoResponse(rsp)
}

// SyscollectorControllerGetProcessesInfoWithResponse request returning *SyscollectorControllerGetProcessesInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetProcessesInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams, reqEditors ...RequestEditorFn) (*SyscollectorControllerGetProcessesInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetProcessesInfo(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersSyscollectorControllerGetProcessesInfoResponse(rsp)
}

// TaskControllerGetTasksStatusWithResponse request returning *TaskControllerGetTasksStatusResponse
func (c *ClientWithResponses) TaskControllerGetTasksStatusWithResponse(ctx context.Context, params *TaskControllerGetTasksStatusParams, reqEditors ...RequestEditorFn) (*TaskControllerGetTasksStatusResponse, error) {
	rsp, err := c.TaskControllerGetTasksStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersTaskControllerGetTasksStatusResponse(rsp)
}

// VulnerabilityControllerGetVulnerabilityAgentWithResponse request returning *VulnerabilityControllerGetVulnerabilityAgentResponse
func (c *ClientWithResponses) VulnerabilityControllerGetVulnerabilityAgentWithResponse(ctx context.Context, agentId AgentId, params *VulnerabilityControllerGetVulnerabilityAgentParams, reqEditors ...RequestEditorFn) (*VulnerabilityControllerGetVulnerabilityAgentResponse, error) {
	rsp, err := c.VulnerabilityControllerGetVulnerabilityAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersVulnerabilityControllerGetVulnerabilityAgentResponse(rsp)
}

// VulnerabilityControllerGetLastScanAgentWithResponse request returning *VulnerabilityControllerGetLastScanAgentResponse
func (c *ClientWithResponses) VulnerabilityControllerGetLastScanAgentWithResponse(ctx context.Context, agentId AgentId, params *VulnerabilityControllerGetLastScanAgentParams, reqEditors ...RequestEditorFn) (*VulnerabilityControllerGetLastScanAgentResponse, error) {
	rsp, err := c.VulnerabilityControllerGetLastScanAgent(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersVulnerabilityControllerGetLastScanAgentResponse(rsp)
}

// VulnerabilityControllerGetVulnerabilitiesFieldSummaryWithResponse request returning *VulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse
func (c *ClientWithResponses) VulnerabilityControllerGetVulnerabilitiesFieldSummaryWithResponse(ctx context.Context, agentId AgentId, field VulnerabilityControllerGetVulnerabilitiesFieldSummaryParamsField, params *VulnerabilityControllerGetVulnerabilitiesFieldSummaryParams, reqEditors ...RequestEditorFn) (*VulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse, error) {
	rsp, err := c.VulnerabilityControllerGetVulnerabilitiesFieldSummary(ctx, agentId, field, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiControllersVulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse(rsp)
}

// ParseApiControllersDefaultControllerDefaultInfoResponse parses an HTTP response from a DefaultControllerDefaultInfoWithResponse call
func ParseApiControllersDefaultControllerDefaultInfoResponse(rsp *http.Response) (*DefaultControllerDefaultInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DefaultControllerDefaultInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *BasicInfo `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiControllersActiveResponseControllerRunCommandResponse parses an HTTP response from a ActiveResponseControllerRunCommandWithResponse call
func ParseApiControllersActiveResponseControllerRunCommandResponse(rsp *http.Response) (*ActiveResponseControllerRunCommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActiveResponseControllerRunCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerDeleteAgentsResponse parses an HTTP response from a AgentControllerDeleteAgentsWithResponse call
func ParseApiControllersAgentControllerDeleteAgentsResponse(rsp *http.Response) (*AgentControllerDeleteAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerDeleteAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
				AllItemsResponseAgentIDs `yaml:",inline"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentsResponse parses an HTTP response from a AgentControllerGetAgentsWithResponse call
func ParseApiControllersAgentControllerGetAgentsResponse(rsp *http.Response) (*AgentControllerGetAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgents `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerAddAgentResponse parses an HTTP response from a AgentControllerAddAgentWithResponse call
func ParseApiControllersAgentControllerAddAgentResponse(rsp *http.Response) (*AgentControllerAddAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerAddAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AgentIdKey `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerDeleteMultipleAgentSingleGroupResponse parses an HTTP response from a AgentControllerDeleteMultipleAgentSingleGroupWithResponse call
func ParseApiControllersAgentControllerDeleteMultipleAgentSingleGroupResponse(rsp *http.Response) (*AgentControllerDeleteMultipleAgentSingleGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerDeleteMultipleAgentSingleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
				AllItemsResponseAgentIDs `yaml:",inline"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerPutMultipleAgentSingleGroupResponse parses an HTTP response from a AgentControllerPutMultipleAgentSingleGroupWithResponse call
func ParseApiControllersAgentControllerPutMultipleAgentSingleGroupResponse(rsp *http.Response) (*AgentControllerPutMultipleAgentSingleGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerPutMultipleAgentSingleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
				AllItemsResponseAgentIDs `yaml:",inline"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerRestartAgentsByGroupResponse parses an HTTP response from a AgentControllerRestartAgentsByGroupWithResponse call
func ParseApiControllersAgentControllerRestartAgentsByGroupResponse(rsp *http.Response) (*AgentControllerRestartAgentsByGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerRestartAgentsByGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerInsertAgentResponse parses an HTTP response from a AgentControllerInsertAgentWithResponse call
func ParseApiControllersAgentControllerInsertAgentResponse(rsp *http.Response) (*AgentControllerInsertAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerInsertAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AgentIdKey `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerPostNewAgentResponse parses an HTTP response from a AgentControllerPostNewAgentWithResponse call
func ParseApiControllersAgentControllerPostNewAgentResponse(rsp *http.Response) (*AgentControllerPostNewAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerPostNewAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AgentIdKey `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentNoGroupResponse parses an HTTP response from a AgentControllerGetAgentNoGroupWithResponse call
func ParseApiControllersAgentControllerGetAgentNoGroupResponse(rsp *http.Response) (*AgentControllerGetAgentNoGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentNoGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgents `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerRestartAgentsByNodeResponse parses an HTTP response from a AgentControllerRestartAgentsByNodeWithResponse call
func ParseApiControllersAgentControllerRestartAgentsByNodeResponse(rsp *http.Response) (*AgentControllerRestartAgentsByNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerRestartAgentsByNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentOutdatedResponse parses an HTTP response from a AgentControllerGetAgentOutdatedWithResponse call
func ParseApiControllersAgentControllerGetAgentOutdatedResponse(rsp *http.Response) (*AgentControllerGetAgentOutdatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentOutdatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentsSimple `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerReconnectAgentsResponse parses an HTTP response from a AgentControllerReconnectAgentsWithResponse call
func ParseApiControllersAgentControllerReconnectAgentsResponse(rsp *http.Response) (*AgentControllerReconnectAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerReconnectAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerRestartAgentsResponse parses an HTTP response from a AgentControllerRestartAgentsWithResponse call
func ParseApiControllersAgentControllerRestartAgentsResponse(rsp *http.Response) (*AgentControllerRestartAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerRestartAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentFieldsResponse parses an HTTP response from a AgentControllerGetAgentFieldsWithResponse call
func ParseApiControllersAgentControllerGetAgentFieldsResponse(rsp *http.Response) (*AgentControllerGetAgentFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentsDistinct `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentSummaryOsResponse parses an HTTP response from a AgentControllerGetAgentSummaryOsWithResponse call
func ParseApiControllersAgentControllerGetAgentSummaryOsResponse(rsp *http.Response) (*AgentControllerGetAgentSummaryOsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentSummaryOsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentSummaryStatusResponse parses an HTTP response from a AgentControllerGetAgentSummaryStatusWithResponse call
func ParseApiControllersAgentControllerGetAgentSummaryStatusResponse(rsp *http.Response) (*AgentControllerGetAgentSummaryStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentSummaryStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AgentsSummaryStatus `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerPutUpgradeAgentsResponse parses an HTTP response from a AgentControllerPutUpgradeAgentsWithResponse call
func ParseApiControllersAgentControllerPutUpgradeAgentsResponse(rsp *http.Response) (*AgentControllerPutUpgradeAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerPutUpgradeAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerPutUpgradeCustomAgentsResponse parses an HTTP response from a AgentControllerPutUpgradeCustomAgentsWithResponse call
func ParseApiControllersAgentControllerPutUpgradeCustomAgentsResponse(rsp *http.Response) (*AgentControllerPutUpgradeCustomAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerPutUpgradeCustomAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentUpgradeResponse parses an HTTP response from a AgentControllerGetAgentUpgradeWithResponse call
func ParseApiControllersAgentControllerGetAgentUpgradeResponse(rsp *http.Response) (*AgentControllerGetAgentUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentConfigResponse parses an HTTP response from a AgentControllerGetAgentConfigWithResponse call
func ParseApiControllersAgentControllerGetAgentConfigResponse(rsp *http.Response) (*AgentControllerGetAgentConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			// Current agent's configuration. The output varies with requested component and the agent configuration
			Data *AgentConfiguration `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetDaemonStatsResponse parses an HTTP response from a AgentControllerGetDaemonStatsWithResponse call
func ParseApiControllersAgentControllerGetDaemonStatsResponse(rsp *http.Response) (*AgentControllerGetDaemonStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetDaemonStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhDaemonStatsAgents `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerDeleteSingleAgentMultipleGroupsResponse parses an HTTP response from a AgentControllerDeleteSingleAgentMultipleGroupsWithResponse call
func ParseApiControllersAgentControllerDeleteSingleAgentMultipleGroupsResponse(rsp *http.Response) (*AgentControllerDeleteSingleAgentMultipleGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerDeleteSingleAgentMultipleGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AllItemsResponseGroupIDs)
				AllItemsResponseGroupIDs `yaml:",inline"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetSyncAgentResponse parses an HTTP response from a AgentControllerGetSyncAgentWithResponse call
func ParseApiControllersAgentControllerGetSyncAgentResponse(rsp *http.Response) (*AgentControllerGetSyncAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetSyncAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentsSynced `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerDeleteSingleAgentSingleGroupResponse parses an HTTP response from a AgentControllerDeleteSingleAgentSingleGroupWithResponse call
func ParseApiControllersAgentControllerDeleteSingleAgentSingleGroupResponse(rsp *http.Response) (*AgentControllerDeleteSingleAgentSingleGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerDeleteSingleAgentSingleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerPutAgentSingleGroupResponse parses an HTTP response from a AgentControllerPutAgentSingleGroupWithResponse call
func ParseApiControllersAgentControllerPutAgentSingleGroupResponse(rsp *http.Response) (*AgentControllerPutAgentSingleGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerPutAgentSingleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentKeyResponse parses an HTTP response from a AgentControllerGetAgentKeyWithResponse call
func ParseApiControllersAgentControllerGetAgentKeyResponse(rsp *http.Response) (*AgentControllerGetAgentKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentsKeys `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerRestartAgentResponse parses an HTTP response from a AgentControllerRestartAgentWithResponse call
func ParseApiControllersAgentControllerRestartAgentResponse(rsp *http.Response) (*AgentControllerRestartAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerRestartAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *ItemAffected `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetComponentStatsResponse parses an HTTP response from a AgentControllerGetComponentStatsWithResponse call
func ParseApiControllersAgentControllerGetComponentStatsResponse(rsp *http.Response) (*AgentControllerGetComponentStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetComponentStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersCiscatControllerGetAgentsCiscatResultsResponse parses an HTTP response from a CiscatControllerGetAgentsCiscatResultsWithResponse call
func ParseApiControllersCiscatControllerGetAgentsCiscatResultsResponse(rsp *http.Response) (*CiscatControllerGetAgentsCiscatResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiscatControllerGetAgentsCiscatResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseCiscatResult `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetApiConfigResponse parses an HTTP response from a ClusterControllerGetApiConfigWithResponse call
func ParseApiControllersClusterControllerGetApiConfigResponse(rsp *http.Response) (*ClusterControllerGetApiConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetApiConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetConfValidationResponse parses an HTTP response from a ClusterControllerGetConfValidationWithResponse call
func ParseApiControllersClusterControllerGetConfValidationResponse(rsp *http.Response) (*ClusterControllerGetConfValidationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetConfValidationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseValidationStatus `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetHealthcheckResponse parses an HTTP response from a ClusterControllerGetHealthcheckWithResponse call
func ParseApiControllersClusterControllerGetHealthcheckResponse(rsp *http.Response) (*ClusterControllerGetHealthcheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetHealthcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseNodeHealthcheck `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetConfigResponse parses an HTTP response from a ClusterControllerGetConfigWithResponse call
func ParseApiControllersClusterControllerGetConfigResponse(rsp *http.Response) (*ClusterControllerGetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Network interface used by the **master** to listen to incoming connections
				BindAddr *string `json:"bind_addr,omitempty"`

				// Whether the cluster is enabled or not
				Disabled *bool `json:"disabled,omitempty"`

				// Whether to hide the cluster information in the alerts
				Hidden *string `json:"hidden,omitempty"`

				// Cluster key used to encrypt messages
				Key *string `json:"key,omitempty"`

				// Cluster name
				Name *string `json:"name,omitempty"`

				// Node name
				NodeName *string `json:"node_name,omitempty"`

				// Node type
				NodeType *N200DataNodeType `json:"node_type,omitempty"`

				// List of cluster master nodes. This list is used by **worker** nodes to connect to the master
				Nodes *[]string `json:"nodes,omitempty"`

				// Port used by the **master** node to communicate with workers
				Port *int `json:"port,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetClusterNodeResponse parses an HTTP response from a ClusterControllerGetClusterNodeWithResponse call
func ParseApiControllersClusterControllerGetClusterNodeResponse(rsp *http.Response) (*ClusterControllerGetClusterNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetClusterNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Cluster name the node belongs to
				Cluster *string `json:"cluster,omitempty"`

				// Node name
				Node *string `json:"node,omitempty"`

				// Node type
				Type *string `json:"type,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetClusterNodesResponse parses an HTTP response from a ClusterControllerGetClusterNodesWithResponse call
func ParseApiControllersClusterControllerGetClusterNodesResponse(rsp *http.Response) (*ClusterControllerGetClusterNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetClusterNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseClusterNodes `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerPutRestartResponse parses an HTTP response from a ClusterControllerPutRestartWithResponse call
func ParseApiControllersClusterControllerPutRestartResponse(rsp *http.Response) (*ClusterControllerPutRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerPutRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseNodeIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetNodesRulesetSyncStatusResponse parses an HTTP response from a ClusterControllerGetNodesRulesetSyncStatusWithResponse call
func ParseApiControllersClusterControllerGetNodesRulesetSyncStatusResponse(rsp *http.Response) (*ClusterControllerGetNodesRulesetSyncStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetNodesRulesetSyncStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseNodeRulesetSynchronizationStatus `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetStatusResponse parses an HTTP response from a ClusterControllerGetStatusWithResponse call
func ParseApiControllersClusterControllerGetStatusResponse(rsp *http.Response) (*ClusterControllerGetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Whether the cluster is enabled in the Wazuh configuration
				Enabled *N200DataEnabled `json:"enabled,omitempty"`

				// Whether the cluster daemon is running
				Running *N200DataRunning `json:"running,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetConfigurationNodeResponse parses an HTTP response from a ClusterControllerGetConfigurationNodeWithResponse call
func ParseApiControllersClusterControllerGetConfigurationNodeResponse(rsp *http.Response) (*ClusterControllerGetConfigurationNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetConfigurationNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhManagerConfiguration `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerUpdateConfigurationResponse parses an HTTP response from a ClusterControllerUpdateConfigurationWithResponse call
func ParseApiControllersClusterControllerUpdateConfigurationResponse(rsp *http.Response) (*ClusterControllerUpdateConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerUpdateConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
			ConfirmationMessage `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetNodeConfigResponse parses an HTTP response from a ClusterControllerGetNodeConfigWithResponse call
func ParseApiControllersClusterControllerGetNodeConfigResponse(rsp *http.Response) (*ClusterControllerGetNodeConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetNodeConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetDaemonStatsNodeResponse parses an HTTP response from a ClusterControllerGetDaemonStatsNodeWithResponse call
func ParseApiControllersClusterControllerGetDaemonStatsNodeResponse(rsp *http.Response) (*ClusterControllerGetDaemonStatsNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetDaemonStatsNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhDaemonStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetInfoNodeResponse parses an HTTP response from a ClusterControllerGetInfoNodeWithResponse call
func ParseApiControllersClusterControllerGetInfoNodeResponse(rsp *http.Response) (*ClusterControllerGetInfoNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetInfoNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhInfo `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetLogNodeResponse parses an HTTP response from a ClusterControllerGetLogNodeWithResponse call
func ParseApiControllersClusterControllerGetLogNodeResponse(rsp *http.Response) (*ClusterControllerGetLogNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetLogNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhLogs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetLogSummaryNodeResponse parses an HTTP response from a ClusterControllerGetLogSummaryNodeWithResponse call
func ParseApiControllersClusterControllerGetLogSummaryNodeResponse(rsp *http.Response) (*ClusterControllerGetLogSummaryNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetLogSummaryNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhLogsSummary `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetStatsNodeResponse parses an HTTP response from a ClusterControllerGetStatsNodeWithResponse call
func ParseApiControllersClusterControllerGetStatsNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetStatsAnalysisdNodeResponse parses an HTTP response from a ClusterControllerGetStatsAnalysisdNodeWithResponse call
func ParseApiControllersClusterControllerGetStatsAnalysisdNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsAnalysisdNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsAnalysisdNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetStatsHourlyNodeResponse parses an HTTP response from a ClusterControllerGetStatsHourlyNodeWithResponse call
func ParseApiControllersClusterControllerGetStatsHourlyNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsHourlyNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsHourlyNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetStatsRemotedNodeResponse parses an HTTP response from a ClusterControllerGetStatsRemotedNodeWithResponse call
func ParseApiControllersClusterControllerGetStatsRemotedNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsRemotedNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsRemotedNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetStatsWeeklyNodeResponse parses an HTTP response from a ClusterControllerGetStatsWeeklyNodeWithResponse call
func ParseApiControllersClusterControllerGetStatsWeeklyNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsWeeklyNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsWeeklyNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersClusterControllerGetStatusNodeResponse parses an HTTP response from a ClusterControllerGetStatusNodeWithResponse call
func ParseApiControllersClusterControllerGetStatusNodeResponse(rsp *http.Response) (*ClusterControllerGetStatusNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatusNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhDaemonsStatus `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersDecoderControllerGetDecodersResponse parses an HTTP response from a DecoderControllerGetDecodersWithResponse call
func ParseApiControllersDecoderControllerGetDecodersResponse(rsp *http.Response) (*DecoderControllerGetDecodersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecoderControllerGetDecodersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseDecoders `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersDecoderControllerGetDecodersFilesResponse parses an HTTP response from a DecoderControllerGetDecodersFilesWithResponse call
func ParseApiControllersDecoderControllerGetDecodersFilesResponse(rsp *http.Response) (*DecoderControllerGetDecodersFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecoderControllerGetDecodersFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseDecodersFiles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersDecoderControllerDeleteFileResponse parses an HTTP response from a DecoderControllerDeleteFileWithResponse call
func ParseApiControllersDecoderControllerDeleteFileResponse(rsp *http.Response) (*DecoderControllerDeleteFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecoderControllerDeleteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersDecoderControllerGetFileResponse parses an HTTP response from a DecoderControllerGetFileWithResponse call
func ParseApiControllersDecoderControllerGetFileResponse(rsp *http.Response) (*DecoderControllerGetFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecoderControllerGetFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseApiControllersDecoderControllerPutFileResponse parses an HTTP response from a DecoderControllerPutFileWithResponse call
func ParseApiControllersDecoderControllerPutFileResponse(rsp *http.Response) (*DecoderControllerPutFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecoderControllerPutFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersDecoderControllerGetDecodersParentsResponse parses an HTTP response from a DecoderControllerGetDecodersParentsWithResponse call
func ParseApiControllersDecoderControllerGetDecodersParentsResponse(rsp *http.Response) (*DecoderControllerGetDecodersParentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecoderControllerGetDecodersParentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersEventControllerForwardEventResponse parses an HTTP response from a EventControllerForwardEventWithResponse call
func ParseApiControllersEventControllerForwardEventResponse(rsp *http.Response) (*EventControllerForwardEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventControllerForwardEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetCisCatResultsResponse parses an HTTP response from a ExperimentalControllerGetCisCatResultsWithResponse call
func ParseApiControllersExperimentalControllerGetCisCatResultsResponse(rsp *http.Response) (*ExperimentalControllerGetCisCatResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetCisCatResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseCiscatResult `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerClearRootcheckDatabaseResponse parses an HTTP response from a ExperimentalControllerClearRootcheckDatabaseWithResponse call
func ParseApiControllersExperimentalControllerClearRootcheckDatabaseResponse(rsp *http.Response) (*ExperimentalControllerClearRootcheckDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerClearRootcheckDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerClearSyscheckDatabaseResponse parses an HTTP response from a ExperimentalControllerClearSyscheckDatabaseWithResponse call
func ParseApiControllersExperimentalControllerClearSyscheckDatabaseResponse(rsp *http.Response) (*ExperimentalControllerClearSyscheckDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerClearSyscheckDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetHardwareInfoResponse parses an HTTP response from a ExperimentalControllerGetHardwareInfoWithResponse call
func ParseApiControllersExperimentalControllerGetHardwareInfoResponse(rsp *http.Response) (*ExperimentalControllerGetHardwareInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetHardwareInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorHardware `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetHotfixesInfoResponse parses an HTTP response from a ExperimentalControllerGetHotfixesInfoWithResponse call
func ParseApiControllersExperimentalControllerGetHotfixesInfoResponse(rsp *http.Response) (*ExperimentalControllerGetHotfixesInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetHotfixesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorHotfixes `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetNetworkAddressInfoResponse parses an HTTP response from a ExperimentalControllerGetNetworkAddressInfoWithResponse call
func ParseApiControllersExperimentalControllerGetNetworkAddressInfoResponse(rsp *http.Response) (*ExperimentalControllerGetNetworkAddressInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetNetworkAddressInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorNetwork `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetNetworkInterfaceInfoResponse parses an HTTP response from a ExperimentalControllerGetNetworkInterfaceInfoWithResponse call
func ParseApiControllersExperimentalControllerGetNetworkInterfaceInfoResponse(rsp *http.Response) (*ExperimentalControllerGetNetworkInterfaceInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetNetworkInterfaceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorInterface `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetNetworkProtocolInfoResponse parses an HTTP response from a ExperimentalControllerGetNetworkProtocolInfoWithResponse call
func ParseApiControllersExperimentalControllerGetNetworkProtocolInfoResponse(rsp *http.Response) (*ExperimentalControllerGetNetworkProtocolInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetNetworkProtocolInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorProtocol `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetOsInfoResponse parses an HTTP response from a ExperimentalControllerGetOsInfoWithResponse call
func ParseApiControllersExperimentalControllerGetOsInfoResponse(rsp *http.Response) (*ExperimentalControllerGetOsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetOsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorOS `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetPackagesInfoResponse parses an HTTP response from a ExperimentalControllerGetPackagesInfoWithResponse call
func ParseApiControllersExperimentalControllerGetPackagesInfoResponse(rsp *http.Response) (*ExperimentalControllerGetPackagesInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetPackagesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorPackages `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetPortsInfoResponse parses an HTTP response from a ExperimentalControllerGetPortsInfoWithResponse call
func ParseApiControllersExperimentalControllerGetPortsInfoResponse(rsp *http.Response) (*ExperimentalControllerGetPortsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetPortsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorPorts `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersExperimentalControllerGetProcessesInfoResponse parses an HTTP response from a ExperimentalControllerGetProcessesInfoWithResponse call
func ParseApiControllersExperimentalControllerGetProcessesInfoResponse(rsp *http.Response) (*ExperimentalControllerGetProcessesInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetProcessesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorProcesses `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerDeleteGroupsResponse parses an HTTP response from a AgentControllerDeleteGroupsWithResponse call
func ParseApiControllersAgentControllerDeleteGroupsResponse(rsp *http.Response) (*AgentControllerDeleteGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerDeleteGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AgentGroupDeleted)
				AgentGroupDeleted `yaml:",inline"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetListGroupResponse parses an HTTP response from a AgentControllerGetListGroupWithResponse call
func ParseApiControllersAgentControllerGetListGroupResponse(rsp *http.Response) (*AgentControllerGetListGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetListGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseGroups `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerPostGroupResponse parses an HTTP response from a AgentControllerPostGroupWithResponse call
func ParseApiControllersAgentControllerPostGroupResponse(rsp *http.Response) (*AgentControllerPostGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerPostGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetAgentsInGroupResponse parses an HTTP response from a AgentControllerGetAgentsInGroupWithResponse call
func ParseApiControllersAgentControllerGetAgentsInGroupResponse(rsp *http.Response) (*AgentControllerGetAgentsInGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetAgentsInGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgents `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetGroupConfigResponse parses an HTTP response from a AgentControllerGetGroupConfigWithResponse call
func ParseApiControllersAgentControllerGetGroupConfigResponse(rsp *http.Response) (*AgentControllerGetGroupConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetGroupConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				AffectedItems      *[]GroupConfiguration `json:"affected_items,omitempty"`
				TotalAffectedItems *int32                `json:"total_affected_items,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerPutGroupConfigResponse parses an HTTP response from a AgentControllerPutGroupConfigWithResponse call
func ParseApiControllersAgentControllerPutGroupConfigResponse(rsp *http.Response) (*AgentControllerPutGroupConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerPutGroupConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetGroupFilesResponse parses an HTTP response from a AgentControllerGetGroupFilesWithResponse call
func ParseApiControllersAgentControllerGetGroupFilesResponse(rsp *http.Response) (*AgentControllerGetGroupFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetGroupFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetGroupFileJsonResponse parses an HTTP response from a AgentControllerGetGroupFileJsonWithResponse call
func ParseApiControllersAgentControllerGetGroupFileJsonResponse(rsp *http.Response) (*AgentControllerGetGroupFileJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetGroupFileJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *interface{} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersAgentControllerGetGroupFileXmlResponse parses an HTTP response from a AgentControllerGetGroupFileXmlWithResponse call
func ParseApiControllersAgentControllerGetGroupFileXmlResponse(rsp *http.Response) (*AgentControllerGetGroupFileXmlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentControllerGetGroupFileXmlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseApiControllersCdbListControllerGetListsResponse parses an HTTP response from a CdbListControllerGetListsWithResponse call
func ParseApiControllersCdbListControllerGetListsResponse(rsp *http.Response) (*CdbListControllerGetListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CdbListControllerGetListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseLists `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersCdbListControllerGetListsFilesResponse parses an HTTP response from a CdbListControllerGetListsFilesWithResponse call
func ParseApiControllersCdbListControllerGetListsFilesResponse(rsp *http.Response) (*CdbListControllerGetListsFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CdbListControllerGetListsFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseListsFiles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersCdbListControllerDeleteFileResponse parses an HTTP response from a CdbListControllerDeleteFileWithResponse call
func ParseApiControllersCdbListControllerDeleteFileResponse(rsp *http.Response) (*CdbListControllerDeleteFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CdbListControllerDeleteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
			ConfirmationMessage `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersCdbListControllerGetFileResponse parses an HTTP response from a CdbListControllerGetFileWithResponse call
func ParseApiControllersCdbListControllerGetFileResponse(rsp *http.Response) (*CdbListControllerGetFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CdbListControllerGetFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseListsFiles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseApiControllersCdbListControllerPutFileResponse parses an HTTP response from a CdbListControllerPutFileWithResponse call
func ParseApiControllersCdbListControllerPutFileResponse(rsp *http.Response) (*CdbListControllerPutFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CdbListControllerPutFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
			ConfirmationMessage `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersLogtestControllerRunLogtestToolResponse parses an HTTP response from a LogtestControllerRunLogtestToolWithResponse call
func ParseApiControllersLogtestControllerRunLogtestToolResponse(rsp *http.Response) (*LogtestControllerRunLogtestToolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogtestControllerRunLogtestToolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersLogtestControllerEndLogtestSessionResponse parses an HTTP response from a LogtestControllerEndLogtestSessionWithResponse call
func ParseApiControllersLogtestControllerEndLogtestSessionResponse(rsp *http.Response) (*LogtestControllerEndLogtestSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogtestControllerEndLogtestSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetApiConfigResponse parses an HTTP response from a ManagerControllerGetApiConfigWithResponse call
func ParseApiControllersManagerControllerGetApiConfigResponse(rsp *http.Response) (*ManagerControllerGetApiConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetApiConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetConfigurationResponse parses an HTTP response from a ManagerControllerGetConfigurationWithResponse call
func ParseApiControllersManagerControllerGetConfigurationResponse(rsp *http.Response) (*ManagerControllerGetConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhManagerConfiguration `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerUpdateConfigurationResponse parses an HTTP response from a ManagerControllerUpdateConfigurationWithResponse call
func ParseApiControllersManagerControllerUpdateConfigurationResponse(rsp *http.Response) (*ManagerControllerUpdateConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerUpdateConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
			ConfirmationMessage `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetConfValidationResponse parses an HTTP response from a ManagerControllerGetConfValidationWithResponse call
func ParseApiControllersManagerControllerGetConfValidationResponse(rsp *http.Response) (*ManagerControllerGetConfValidationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetConfValidationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigurationValidation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetManagerConfigOndemandResponse parses an HTTP response from a ManagerControllerGetManagerConfigOndemandWithResponse call
func ParseApiControllersManagerControllerGetManagerConfigOndemandResponse(rsp *http.Response) (*ManagerControllerGetManagerConfigOndemandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetManagerConfigOndemandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetDaemonStatsResponse parses an HTTP response from a ManagerControllerGetDaemonStatsWithResponse call
func ParseApiControllersManagerControllerGetDaemonStatsResponse(rsp *http.Response) (*ManagerControllerGetDaemonStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetDaemonStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhDaemonStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetInfoResponse parses an HTTP response from a ManagerControllerGetInfoWithResponse call
func ParseApiControllersManagerControllerGetInfoResponse(rsp *http.Response) (*ManagerControllerGetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhInfo `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetLogResponse parses an HTTP response from a ManagerControllerGetLogWithResponse call
func ParseApiControllersManagerControllerGetLogResponse(rsp *http.Response) (*ManagerControllerGetLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhLogs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetLogSummaryResponse parses an HTTP response from a ManagerControllerGetLogSummaryWithResponse call
func ParseApiControllersManagerControllerGetLogSummaryResponse(rsp *http.Response) (*ManagerControllerGetLogSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetLogSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhLogsSummary `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerPutRestartResponse parses an HTTP response from a ManagerControllerPutRestartWithResponse call
func ParseApiControllersManagerControllerPutRestartResponse(rsp *http.Response) (*ManagerControllerPutRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerPutRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetStatsResponse parses an HTTP response from a ManagerControllerGetStatsWithResponse call
func ParseApiControllersManagerControllerGetStatsResponse(rsp *http.Response) (*ManagerControllerGetStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetStatsAnalysisdResponse parses an HTTP response from a ManagerControllerGetStatsAnalysisdWithResponse call
func ParseApiControllersManagerControllerGetStatsAnalysisdResponse(rsp *http.Response) (*ManagerControllerGetStatsAnalysisdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsAnalysisdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetStatsHourlyResponse parses an HTTP response from a ManagerControllerGetStatsHourlyWithResponse call
func ParseApiControllersManagerControllerGetStatsHourlyResponse(rsp *http.Response) (*ManagerControllerGetStatsHourlyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsHourlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetStatsRemotedResponse parses an HTTP response from a ManagerControllerGetStatsRemotedWithResponse call
func ParseApiControllersManagerControllerGetStatsRemotedResponse(rsp *http.Response) (*ManagerControllerGetStatsRemotedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsRemotedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetStatsWeeklyResponse parses an HTTP response from a ManagerControllerGetStatsWeeklyWithResponse call
func ParseApiControllersManagerControllerGetStatsWeeklyResponse(rsp *http.Response) (*ManagerControllerGetStatsWeeklyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsWeeklyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerGetStatusResponse parses an HTTP response from a ManagerControllerGetStatusWithResponse call
func ParseApiControllersManagerControllerGetStatusResponse(rsp *http.Response) (*ManagerControllerGetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhDaemonsStatus `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersManagerControllerCheckAvailableVersionResponse parses an HTTP response from a ManagerControllerCheckAvailableVersionWithResponse call
func ParseApiControllersManagerControllerCheckAvailableVersionResponse(rsp *http.Response) (*ManagerControllerCheckAvailableVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerCheckAvailableVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *NewVersions `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersMitreControllerGetGroupsResponse parses an HTTP response from a MitreControllerGetGroupsWithResponse call
func ParseApiControllersMitreControllerGetGroupsResponse(rsp *http.Response) (*MitreControllerGetGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitreControllerGetGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersMitreControllerGetMetadataResponse parses an HTTP response from a MitreControllerGetMetadataWithResponse call
func ParseApiControllersMitreControllerGetMetadataResponse(rsp *http.Response) (*MitreControllerGetMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitreControllerGetMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersMitreControllerGetMitigationsResponse parses an HTTP response from a MitreControllerGetMitigationsWithResponse call
func ParseApiControllersMitreControllerGetMitigationsResponse(rsp *http.Response) (*MitreControllerGetMitigationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitreControllerGetMitigationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersMitreControllerGetReferencesResponse parses an HTTP response from a MitreControllerGetReferencesWithResponse call
func ParseApiControllersMitreControllerGetReferencesResponse(rsp *http.Response) (*MitreControllerGetReferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitreControllerGetReferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersMitreControllerGetSoftwareResponse parses an HTTP response from a MitreControllerGetSoftwareWithResponse call
func ParseApiControllersMitreControllerGetSoftwareResponse(rsp *http.Response) (*MitreControllerGetSoftwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitreControllerGetSoftwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersMitreControllerGetTacticsResponse parses an HTTP response from a MitreControllerGetTacticsWithResponse call
func ParseApiControllersMitreControllerGetTacticsResponse(rsp *http.Response) (*MitreControllerGetTacticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitreControllerGetTacticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersMitreControllerGetTechniquesResponse parses an HTTP response from a MitreControllerGetTechniquesWithResponse call
func ParseApiControllersMitreControllerGetTechniquesResponse(rsp *http.Response) (*MitreControllerGetTechniquesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitreControllerGetTechniquesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersOverviewControllerGetOverviewAgentsResponse parses an HTTP response from a OverviewControllerGetOverviewAgentsWithResponse call
func ParseApiControllersOverviewControllerGetOverviewAgentsResponse(rsp *http.Response) (*OverviewControllerGetOverviewAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OverviewControllerGetOverviewAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *OverviewAgents `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRootcheckControllerPutRootcheckResponse parses an HTTP response from a RootcheckControllerPutRootcheckWithResponse call
func ParseApiControllersRootcheckControllerPutRootcheckResponse(rsp *http.Response) (*RootcheckControllerPutRootcheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RootcheckControllerPutRootcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRootcheckControllerDeleteRootcheckResponse parses an HTTP response from a RootcheckControllerDeleteRootcheckWithResponse call
func ParseApiControllersRootcheckControllerDeleteRootcheckResponse(rsp *http.Response) (*RootcheckControllerDeleteRootcheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RootcheckControllerDeleteRootcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRootcheckControllerGetRootcheckAgentResponse parses an HTTP response from a RootcheckControllerGetRootcheckAgentWithResponse call
func ParseApiControllersRootcheckControllerGetRootcheckAgentResponse(rsp *http.Response) (*RootcheckControllerGetRootcheckAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RootcheckControllerGetRootcheckAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRootcheckControllerGetLastScanAgentResponse parses an HTTP response from a RootcheckControllerGetLastScanAgentWithResponse call
func ParseApiControllersRootcheckControllerGetLastScanAgentResponse(rsp *http.Response) (*RootcheckControllerGetLastScanAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RootcheckControllerGetLastScanAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRuleControllerGetRulesResponse parses an HTTP response from a RuleControllerGetRulesWithResponse call
func ParseApiControllersRuleControllerGetRulesResponse(rsp *http.Response) (*RuleControllerGetRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleControllerGetRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRules `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRuleControllerGetRulesFilesResponse parses an HTTP response from a RuleControllerGetRulesFilesWithResponse call
func ParseApiControllersRuleControllerGetRulesFilesResponse(rsp *http.Response) (*RuleControllerGetRulesFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleControllerGetRulesFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRulesFiles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRuleControllerDeleteFileResponse parses an HTTP response from a RuleControllerDeleteFileWithResponse call
func ParseApiControllersRuleControllerDeleteFileResponse(rsp *http.Response) (*RuleControllerDeleteFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleControllerDeleteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRuleControllerGetFileResponse parses an HTTP response from a RuleControllerGetFileWithResponse call
func ParseApiControllersRuleControllerGetFileResponse(rsp *http.Response) (*RuleControllerGetFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleControllerGetFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseApiControllersRuleControllerPutFileResponse parses an HTTP response from a RuleControllerPutFileWithResponse call
func ParseApiControllersRuleControllerPutFileResponse(rsp *http.Response) (*RuleControllerPutFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleControllerPutFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRuleControllerGetRulesGroupsResponse parses an HTTP response from a RuleControllerGetRulesGroupsWithResponse call
func ParseApiControllersRuleControllerGetRulesGroupsResponse(rsp *http.Response) (*RuleControllerGetRulesGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleControllerGetRulesGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersRuleControllerGetRulesRequirementResponse parses an HTTP response from a RuleControllerGetRulesRequirementWithResponse call
func ParseApiControllersRuleControllerGetRulesRequirementResponse(rsp *http.Response) (*RuleControllerGetRulesRequirementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleControllerGetRulesRequirementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersScaControllerGetScaAgentResponse parses an HTTP response from a ScaControllerGetScaAgentWithResponse call
func ParseApiControllersScaControllerGetScaAgentResponse(rsp *http.Response) (*ScaControllerGetScaAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScaControllerGetScaAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSCADatabase `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersScaControllerGetScaChecksResponse parses an HTTP response from a ScaControllerGetScaChecksWithResponse call
func ParseApiControllersScaControllerGetScaChecksResponse(rsp *http.Response) (*ScaControllerGetScaChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScaControllerGetScaChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSCAChecks `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerGetRbacActionsResponse parses an HTTP response from a SecurityControllerGetRbacActionsWithResponse call
func ParseApiControllersSecurityControllerGetRbacActionsResponse(rsp *http.Response) (*SecurityControllerGetRbacActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetRbacActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerDeleteSecurityConfigResponse parses an HTTP response from a SecurityControllerDeleteSecurityConfigWithResponse call
func ParseApiControllersSecurityControllerDeleteSecurityConfigResponse(rsp *http.Response) (*SecurityControllerDeleteSecurityConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerDeleteSecurityConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerGetSecurityConfigResponse parses an HTTP response from a SecurityControllerGetSecurityConfigWithResponse call
func ParseApiControllersSecurityControllerGetSecurityConfigResponse(rsp *http.Response) (*SecurityControllerGetSecurityConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetSecurityConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerPutSecurityConfigResponse parses an HTTP response from a SecurityControllerPutSecurityConfigWithResponse call
func ParseApiControllersSecurityControllerPutSecurityConfigResponse(rsp *http.Response) (*SecurityControllerPutSecurityConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerPutSecurityConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerRemovePoliciesResponse parses an HTTP response from a SecurityControllerRemovePoliciesWithResponse call
func ParseApiControllersSecurityControllerRemovePoliciesResponse(rsp *http.Response) (*SecurityControllerRemovePoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemovePoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponsePolicies `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerGetPoliciesResponse parses an HTTP response from a SecurityControllerGetPoliciesWithResponse call
func ParseApiControllersSecurityControllerGetPoliciesResponse(rsp *http.Response) (*SecurityControllerGetPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponsePolicies `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerAddPolicyResponse parses an HTTP response from a SecurityControllerAddPolicyWithResponse call
func ParseApiControllersSecurityControllerAddPolicyResponse(rsp *http.Response) (*SecurityControllerAddPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerAddPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponsePolicies `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerUpdatePolicyResponse parses an HTTP response from a SecurityControllerUpdatePolicyWithResponse call
func ParseApiControllersSecurityControllerUpdatePolicyResponse(rsp *http.Response) (*SecurityControllerUpdatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerUpdatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponsePolicies `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerGetRbacResourcesResponse parses an HTTP response from a SecurityControllerGetRbacResourcesWithResponse call
func ParseApiControllersSecurityControllerGetRbacResourcesResponse(rsp *http.Response) (*SecurityControllerGetRbacResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetRbacResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerRemoveRolesResponse parses an HTTP response from a SecurityControllerRemoveRolesWithResponse call
func ParseApiControllersSecurityControllerRemoveRolesResponse(rsp *http.Response) (*SecurityControllerRemoveRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerGetRolesResponse parses an HTTP response from a SecurityControllerGetRolesWithResponse call
func ParseApiControllersSecurityControllerGetRolesResponse(rsp *http.Response) (*SecurityControllerGetRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerAddRoleResponse parses an HTTP response from a SecurityControllerAddRoleWithResponse call
func ParseApiControllersSecurityControllerAddRoleResponse(rsp *http.Response) (*SecurityControllerAddRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerUpdateRoleResponse parses an HTTP response from a SecurityControllerUpdateRoleWithResponse call
func ParseApiControllersSecurityControllerUpdateRoleResponse(rsp *http.Response) (*SecurityControllerUpdateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerUpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerRemoveRolePolicyResponse parses an HTTP response from a SecurityControllerRemoveRolePolicyWithResponse call
func ParseApiControllersSecurityControllerRemoveRolePolicyResponse(rsp *http.Response) (*SecurityControllerRemoveRolePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveRolePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerSetRolePolicyResponse parses an HTTP response from a SecurityControllerSetRolePolicyWithResponse call
func ParseApiControllersSecurityControllerSetRolePolicyResponse(rsp *http.Response) (*SecurityControllerSetRolePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerSetRolePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerRemoveRoleRuleResponse parses an HTTP response from a SecurityControllerRemoveRoleRuleWithResponse call
func ParseApiControllersSecurityControllerRemoveRoleRuleResponse(rsp *http.Response) (*SecurityControllerRemoveRoleRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveRoleRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerSetRoleRuleResponse parses an HTTP response from a SecurityControllerSetRoleRuleWithResponse call
func ParseApiControllersSecurityControllerSetRoleRuleResponse(rsp *http.Response) (*SecurityControllerSetRoleRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerSetRoleRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerRemoveRulesResponse parses an HTTP response from a SecurityControllerRemoveRulesWithResponse call
func ParseApiControllersSecurityControllerRemoveRulesResponse(rsp *http.Response) (*SecurityControllerRemoveRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerGetRulesResponse parses an HTTP response from a SecurityControllerGetRulesWithResponse call
func ParseApiControllersSecurityControllerGetRulesResponse(rsp *http.Response) (*SecurityControllerGetRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerAddRuleResponse parses an HTTP response from a SecurityControllerAddRuleWithResponse call
func ParseApiControllersSecurityControllerAddRuleResponse(rsp *http.Response) (*SecurityControllerAddRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerAddRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerUpdateRuleResponse parses an HTTP response from a SecurityControllerUpdateRuleWithResponse call
func ParseApiControllersSecurityControllerUpdateRuleResponse(rsp *http.Response) (*SecurityControllerUpdateRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerUpdateRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerLogoutUserResponse parses an HTTP response from a SecurityControllerLogoutUserWithResponse call
func ParseApiControllersSecurityControllerLogoutUserResponse(rsp *http.Response) (*SecurityControllerLogoutUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerLogoutUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerDeprecatedLoginUserResponse parses an HTTP response from a SecurityControllerDeprecatedLoginUserWithResponse call
func ParseApiControllersSecurityControllerDeprecatedLoginUserResponse(rsp *http.Response) (*SecurityControllerDeprecatedLoginUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerDeprecatedLoginUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *Token `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseApiControllersSecurityControllerLoginUserResponse parses an HTTP response from a SecurityControllerLoginUserWithResponse call
func ParseApiControllersSecurityControllerLoginUserResponse(rsp *http.Response) (*SecurityControllerLoginUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerLoginUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *Token `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseApiControllersSecurityControllerRunAsLoginResponse parses an HTTP response from a SecurityControllerRunAsLoginWithResponse call
func ParseApiControllersSecurityControllerRunAsLoginResponse(rsp *http.Response) (*SecurityControllerRunAsLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRunAsLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerRevokeAllTokensResponse parses an HTTP response from a SecurityControllerRevokeAllTokensWithResponse call
func ParseApiControllersSecurityControllerRevokeAllTokensResponse(rsp *http.Response) (*SecurityControllerRevokeAllTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRevokeAllTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerDeleteUsersResponse parses an HTTP response from a SecurityControllerDeleteUsersWithResponse call
func ParseApiControllersSecurityControllerDeleteUsersResponse(rsp *http.Response) (*SecurityControllerDeleteUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerDeleteUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerGetUsersResponse parses an HTTP response from a SecurityControllerGetUsersWithResponse call
func ParseApiControllersSecurityControllerGetUsersResponse(rsp *http.Response) (*SecurityControllerGetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerCreateUserResponse parses an HTTP response from a SecurityControllerCreateUserWithResponse call
func ParseApiControllersSecurityControllerCreateUserResponse(rsp *http.Response) (*SecurityControllerCreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerCreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerGetUserMeResponse parses an HTTP response from a SecurityControllerGetUserMeWithResponse call
func ParseApiControllersSecurityControllerGetUserMeResponse(rsp *http.Response) (*SecurityControllerGetUserMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetUserMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerGetUserMePoliciesResponse parses an HTTP response from a SecurityControllerGetUserMePoliciesWithResponse call
func ParseApiControllersSecurityControllerGetUserMePoliciesResponse(rsp *http.Response) (*SecurityControllerGetUserMePoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetUserMePoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerUpdateUserResponse parses an HTTP response from a SecurityControllerUpdateUserWithResponse call
func ParseApiControllersSecurityControllerUpdateUserResponse(rsp *http.Response) (*SecurityControllerUpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerUpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerRemoveUserRoleResponse parses an HTTP response from a SecurityControllerRemoveUserRoleWithResponse call
func ParseApiControllersSecurityControllerRemoveUserRoleResponse(rsp *http.Response) (*SecurityControllerRemoveUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerSetUserRoleResponse parses an HTTP response from a SecurityControllerSetUserRoleWithResponse call
func ParseApiControllersSecurityControllerSetUserRoleResponse(rsp *http.Response) (*SecurityControllerSetUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerSetUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSecurityControllerEditRunAsResponse parses an HTTP response from a SecurityControllerEditRunAsWithResponse call
func ParseApiControllersSecurityControllerEditRunAsResponse(rsp *http.Response) (*SecurityControllerEditRunAsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerEditRunAsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscheckControllerPutSyscheckResponse parses an HTTP response from a SyscheckControllerPutSyscheckWithResponse call
func ParseApiControllersSyscheckControllerPutSyscheckResponse(rsp *http.Response) (*SyscheckControllerPutSyscheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscheckControllerPutSyscheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscheckControllerDeleteSyscheckAgentResponse parses an HTTP response from a SyscheckControllerDeleteSyscheckAgentWithResponse call
func ParseApiControllersSyscheckControllerDeleteSyscheckAgentResponse(rsp *http.Response) (*SyscheckControllerDeleteSyscheckAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscheckControllerDeleteSyscheckAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscheckControllerGetSyscheckAgentResponse parses an HTTP response from a SyscheckControllerGetSyscheckAgentWithResponse call
func ParseApiControllersSyscheckControllerGetSyscheckAgentResponse(rsp *http.Response) (*SyscheckControllerGetSyscheckAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscheckControllerGetSyscheckAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscheckResult `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscheckControllerGetLastScanAgentResponse parses an HTTP response from a SyscheckControllerGetLastScanAgentWithResponse call
func ParseApiControllersSyscheckControllerGetLastScanAgentResponse(rsp *http.Response) (*SyscheckControllerGetLastScanAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscheckControllerGetLastScanAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseLastScan `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscollectorControllerGetHardwareInfoResponse parses an HTTP response from a SyscollectorControllerGetHardwareInfoWithResponse call
func ParseApiControllersSyscollectorControllerGetHardwareInfoResponse(rsp *http.Response) (*SyscollectorControllerGetHardwareInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetHardwareInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorHardware `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscollectorControllerGetHotfixInfoResponse parses an HTTP response from a SyscollectorControllerGetHotfixInfoWithResponse call
func ParseApiControllersSyscollectorControllerGetHotfixInfoResponse(rsp *http.Response) (*SyscollectorControllerGetHotfixInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetHotfixInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorHotfixes `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscollectorControllerGetNetworkAddressInfoResponse parses an HTTP response from a SyscollectorControllerGetNetworkAddressInfoWithResponse call
func ParseApiControllersSyscollectorControllerGetNetworkAddressInfoResponse(rsp *http.Response) (*SyscollectorControllerGetNetworkAddressInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetNetworkAddressInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorNetwork `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscollectorControllerGetNetworkInterfaceInfoResponse parses an HTTP response from a SyscollectorControllerGetNetworkInterfaceInfoWithResponse call
func ParseApiControllersSyscollectorControllerGetNetworkInterfaceInfoResponse(rsp *http.Response) (*SyscollectorControllerGetNetworkInterfaceInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetNetworkInterfaceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorInterface `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscollectorControllerGetNetworkProtocolInfoResponse parses an HTTP response from a SyscollectorControllerGetNetworkProtocolInfoWithResponse call
func ParseApiControllersSyscollectorControllerGetNetworkProtocolInfoResponse(rsp *http.Response) (*SyscollectorControllerGetNetworkProtocolInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetNetworkProtocolInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorProtocol `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscollectorControllerGetOsInfoResponse parses an HTTP response from a SyscollectorControllerGetOsInfoWithResponse call
func ParseApiControllersSyscollectorControllerGetOsInfoResponse(rsp *http.Response) (*SyscollectorControllerGetOsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetOsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorOS `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscollectorControllerGetPackagesInfoResponse parses an HTTP response from a SyscollectorControllerGetPackagesInfoWithResponse call
func ParseApiControllersSyscollectorControllerGetPackagesInfoResponse(rsp *http.Response) (*SyscollectorControllerGetPackagesInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetPackagesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorPackages `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscollectorControllerGetPortsInfoResponse parses an HTTP response from a SyscollectorControllerGetPortsInfoWithResponse call
func ParseApiControllersSyscollectorControllerGetPortsInfoResponse(rsp *http.Response) (*SyscollectorControllerGetPortsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetPortsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorPorts `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersSyscollectorControllerGetProcessesInfoResponse parses an HTTP response from a SyscollectorControllerGetProcessesInfoWithResponse call
func ParseApiControllersSyscollectorControllerGetProcessesInfoResponse(rsp *http.Response) (*SyscollectorControllerGetProcessesInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetProcessesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorProcesses `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersTaskControllerGetTasksStatusResponse parses an HTTP response from a TaskControllerGetTasksStatusWithResponse call
func ParseApiControllersTaskControllerGetTasksStatusResponse(rsp *http.Response) (*TaskControllerGetTasksStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TaskControllerGetTasksStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiControllersVulnerabilityControllerGetVulnerabilityAgentResponse parses an HTTP response from a VulnerabilityControllerGetVulnerabilityAgentWithResponse call
func ParseApiControllersVulnerabilityControllerGetVulnerabilityAgentResponse(rsp *http.Response) (*VulnerabilityControllerGetVulnerabilityAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VulnerabilityControllerGetVulnerabilityAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllItemsResponseVulnerability
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersVulnerabilityControllerGetLastScanAgentResponse parses an HTTP response from a VulnerabilityControllerGetLastScanAgentWithResponse call
func ParseApiControllersVulnerabilityControllerGetLastScanAgentResponse(rsp *http.Response) (*VulnerabilityControllerGetLastScanAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VulnerabilityControllerGetLastScanAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseLastScan `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseApiControllersVulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse parses an HTTP response from a VulnerabilityControllerGetVulnerabilitiesFieldSummaryWithResponse call
func ParseApiControllersVulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse(rsp *http.Response) (*VulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VulnerabilityControllerGetVulnerabilitiesFieldSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}
