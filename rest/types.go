// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package rest

import (
	"encoding/json"
	"fmt"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

type N200DataNodeType string
type N200DataEnabled bool
type N200DataRunning bool

// RequestError defines model for RequestError.
type RequestError struct {
	RequestDetail string `json:"detail"`
	RequestError  *int32 `json:"error,omitempty"`
	RequestTitle  string `json:"title"`
	// Explain how to fix the check, this field is very useful in case the check failed
	Remediation *string `json:"remediation,omitempty"`
}

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	// Human readable description to explain the result of the request
	Message   *string `json:"message,omitempty"`
	ErrorCode int     `json:"error,omitempty"`
}

// ApiError defines model for ApiError.
type ApiError struct {
	ApiCode        *int32               `json:"code,omitempty"`
	ApiDapiErrors  *ApiError_DapiErrors `json:"dapi_errors,omitempty"`
	ApiDetail      string               `json:"detail"`
	ApiInstance    *string              `json:"instance,omitempty"`
	ApiRemediation *string              `json:"remediation,omitempty"`
	ApiTitle       string               `json:"title"`
}

// ApiError_DapiErrors defines model for ApiError.DapiErrors.
type ApiError_DapiErrors struct {
	AdditionalProperties map[string]struct {
		Error   *string `json:"error,omitempty"`
		Logfile *string `json:"logfile,omitempty"`
	} `json:"-"`
}

const (
	BasicAuthScopes = "basicAuth.Scopes"
	JwtScopes       = "jwt.Scopes"
)

// Defines values for AgentStatus.
const (
	AgentStatusActive AgentStatus = "active"

	AgentStatusDisconnected AgentStatus = "disconnected"

	AgentStatusNeverConnected AgentStatus = "never_connected"

	AgentStatusPending AgentStatus = "pending"
)

// Defines values for ClusterNodeBasicType.
const (
	ClusterNodeBasicTypeMaster ClusterNodeBasicType = "master"

	ClusterNodeBasicTypeWorker ClusterNodeBasicType = "worker"
)

// Defines values for ConfigurationValidationStatus.
const (
	ConfigurationValidationStatusOK ConfigurationValidationStatus = "OK"
)

// Defines values for DHCPStatus.
const (
	DHCPStatusBOOTP DHCPStatus = "BOOTP"

	DHCPStatusDisabled DHCPStatus = "disabled"

	DHCPStatusEnabled DHCPStatus = "enabled"

	DHCPStatusUnknown DHCPStatus = "unknown"
)

// Defines values for DaemonStatus.
const (
	DaemonStatusRunning DaemonStatus = "running"

	DaemonStatusStopped DaemonStatus = "stopped"
)

// Defines values for RulesetStatusStatus.
const (
	RulesetStatusStatusDisabled RulesetStatusStatus = "disabled"

	RulesetStatusStatusEnabled RulesetStatusStatus = "enabled"
)

// Defines values for SCAChecksCondition.
const (
	SCAChecksConditionAll SCAChecksCondition = "all"

	SCAChecksConditionAny SCAChecksCondition = "any"

	SCAChecksConditionNone SCAChecksCondition = "none"
)

// Defines values for SCAChecksResult.
const (
	SCAChecksResultEmpty SCAChecksResult = ""

	SCAChecksResultFailed SCAChecksResult = "failed"

	SCAChecksResultPassed SCAChecksResult = "passed"
)

// Defines values for SecurityConfigurationRbacMode.
const (
	SecurityConfigurationRbacModeBlack SecurityConfigurationRbacMode = "black"

	SecurityConfigurationRbacModeWhite SecurityConfigurationRbacMode = "white"
)

// Defines values for SyscollectorInterfaceState.
const (
	SyscollectorInterfaceStateDown SyscollectorInterfaceState = "down"

	SyscollectorInterfaceStateUp SyscollectorInterfaceState = "up"
)

// Defines values for SyscollectorPackagesFormat.
const (
	SyscollectorPackagesFormatApk SyscollectorPackagesFormat = "apk"

	SyscollectorPackagesFormatDeb SyscollectorPackagesFormat = "deb"

	SyscollectorPackagesFormatMacports SyscollectorPackagesFormat = "macports"

	SyscollectorPackagesFormatNpm SyscollectorPackagesFormat = "npm"

	SyscollectorPackagesFormatPacman SyscollectorPackagesFormat = "pacman"

	SyscollectorPackagesFormatPkg SyscollectorPackagesFormat = "pkg"

	SyscollectorPackagesFormatPypi SyscollectorPackagesFormat = "pypi"

	SyscollectorPackagesFormatRpm SyscollectorPackagesFormat = "rpm"

	SyscollectorPackagesFormatSnap SyscollectorPackagesFormat = "snap"

	SyscollectorPackagesFormatWin SyscollectorPackagesFormat = "win"
)

// Defines values for SyscollectorPackagesMultiarch.
const (
	SyscollectorPackagesMultiarchAllowed SyscollectorPackagesMultiarch = "allowed"

	SyscollectorPackagesMultiarchForeign SyscollectorPackagesMultiarch = "foreign"

	SyscollectorPackagesMultiarchSame SyscollectorPackagesMultiarch = "same"
)

// Defines values for SyscollectorPortsProtocol.
const (
	SyscollectorPortsProtocolTcp SyscollectorPortsProtocol = "tcp"

	SyscollectorPortsProtocolTcp6 SyscollectorPortsProtocol = "tcp6"

	SyscollectorPortsProtocolUdp SyscollectorPortsProtocol = "udp"

	SyscollectorPortsProtocolUdp6 SyscollectorPortsProtocol = "udp6"
)

// Defines values for SyscollectorPortsState.
const (
	SyscollectorPortsStateClose SyscollectorPortsState = "close"

	SyscollectorPortsStateCloseWait SyscollectorPortsState = "close_wait"

	SyscollectorPortsStateClosing SyscollectorPortsState = "closing"

	SyscollectorPortsStateDeleteTcp SyscollectorPortsState = "delete_tcp"

	SyscollectorPortsStateEstablished SyscollectorPortsState = "established"

	SyscollectorPortsStateFinWait1 SyscollectorPortsState = "fin_wait1"

	SyscollectorPortsStateFinWait2 SyscollectorPortsState = "fin_wait2"

	SyscollectorPortsStateLastAck SyscollectorPortsState = "last_ack"

	SyscollectorPortsStateListening SyscollectorPortsState = "listening"

	SyscollectorPortsStateSynRecv SyscollectorPortsState = "syn_recv"

	SyscollectorPortsStateSynSent SyscollectorPortsState = "syn_sent"

	SyscollectorPortsStateTimeWait SyscollectorPortsState = "time_wait"

	SyscollectorPortsStateUnknown SyscollectorPortsState = "unknown"
)

// Defines values for SyscollectorProtocolType.
const (
	SyscollectorProtocolTypeIpv4 SyscollectorProtocolType = "ipv4"

	SyscollectorProtocolTypeIpv6 SyscollectorProtocolType = "ipv6"
)

// Defines values for WazuhAnalysisdStatsAgentsItemName.
const (
	WazuhAnalysisdStatsAgentsItemNameWazuhAnalysisd WazuhAnalysisdStatsAgentsItemName = "wazuh-analysisd"
)

// Defines values for WazuhAnalysisdStatsItemName.
const (
	WazuhAnalysisdStatsItemNameWazuhAnalysisd WazuhAnalysisdStatsItemName = "wazuh-analysisd"
)

// Defines values for WazuhDBStatsItemName.
const (
	WazuhDBStatsItemNameWazuhDb WazuhDBStatsItemName = "wazuh-db"
)

// Defines values for WazuhInfoType.
const (
	WazuhInfoTypeHybrid WazuhInfoType = "hybrid"

	WazuhInfoTypeLocal WazuhInfoType = "local"

	WazuhInfoTypeServer WazuhInfoType = "server"
)

// Defines values for WazuhLogsLevel.
const (
	WazuhLogsLevelCritical WazuhLogsLevel = "critical"

	WazuhLogsLevelDebug WazuhLogsLevel = "debug"

	WazuhLogsLevelDebug2 WazuhLogsLevel = "debug2"

	WazuhLogsLevelError WazuhLogsLevel = "error"

	WazuhLogsLevelInfo WazuhLogsLevel = "info"

	WazuhLogsLevelWarning WazuhLogsLevel = "warning"
)

// Defines values for WazuhLogsTag.
const (
	WazuhLogsTagAgentControl WazuhLogsTag = "agent_control"

	WazuhLogsTagSca WazuhLogsTag = "sca"

	WazuhLogsTagVerifyAgentConf WazuhLogsTag = "verify-agent-conf"

	WazuhLogsTagWazuhAgentlessd WazuhLogsTag = "wazuh-agentlessd"

	WazuhLogsTagWazuhAnalysisd WazuhLogsTag = "wazuh-analysisd"

	WazuhLogsTagWazuhAuthd WazuhLogsTag = "wazuh-authd"

	WazuhLogsTagWazuhCsyslogd WazuhLogsTag = "wazuh-csyslogd"

	WazuhLogsTagWazuhDb WazuhLogsTag = "wazuh-db"

	WazuhLogsTagWazuhDbd WazuhLogsTag = "wazuh-dbd"

	WazuhLogsTagWazuhExecd WazuhLogsTag = "wazuh-execd"

	WazuhLogsTagWazuhIntegratord WazuhLogsTag = "wazuh-integratord"

	WazuhLogsTagWazuhLogcollector WazuhLogsTag = "wazuh-logcollector"

	WazuhLogsTagWazuhMaild WazuhLogsTag = "wazuh-maild"

	WazuhLogsTagWazuhModulesd WazuhLogsTag = "wazuh-modulesd"

	WazuhLogsTagWazuhModulesdAgentKeyPolling WazuhLogsTag = "wazuh-modulesd:agent-key-polling"

	WazuhLogsTagWazuhModulesdAgentUpgrade WazuhLogsTag = "wazuh-modulesd:agent-upgrade"

	WazuhLogsTagWazuhModulesdAwsS3 WazuhLogsTag = "wazuh-modulesd:aws-s3"

	WazuhLogsTagWazuhModulesdAzureLogs WazuhLogsTag = "wazuh-modulesd:azure-logs"

	WazuhLogsTagWazuhModulesdCiscat WazuhLogsTag = "wazuh-modulesd:ciscat"

	WazuhLogsTagWazuhModulesdCommand WazuhLogsTag = "wazuh-modulesd:command"

	WazuhLogsTagWazuhModulesdControl WazuhLogsTag = "wazuh-modulesd:control"

	WazuhLogsTagWazuhModulesdDatabase WazuhLogsTag = "wazuh-modulesd:database"

	WazuhLogsTagWazuhModulesdDockerListener WazuhLogsTag = "wazuh-modulesd:docker-listener"

	WazuhLogsTagWazuhModulesdDownload WazuhLogsTag = "wazuh-modulesd:download"

	WazuhLogsTagWazuhModulesdOscap WazuhLogsTag = "wazuh-modulesd:oscap"

	WazuhLogsTagWazuhModulesdOsquery WazuhLogsTag = "wazuh-modulesd:osquery"

	WazuhLogsTagWazuhModulesdSyscollector WazuhLogsTag = "wazuh-modulesd:syscollector"

	WazuhLogsTagWazuhModulesdTaskManager WazuhLogsTag = "wazuh-modulesd:task-manager"

	WazuhLogsTagWazuhModulesdVulnerabilityDetector WazuhLogsTag = "wazuh-modulesd:vulnerability-detector"

	WazuhLogsTagWazuhMonitord WazuhLogsTag = "wazuh-monitord"

	WazuhLogsTagWazuhRemoted WazuhLogsTag = "wazuh-remoted"

	WazuhLogsTagWazuhReportd WazuhLogsTag = "wazuh-reportd"

	WazuhLogsTagWazuhRootcheck WazuhLogsTag = "wazuh-rootcheck"

	WazuhLogsTagWazuhSyscheckd WazuhLogsTag = "wazuh-syscheckd"
)

// Defines values for Component.
const (
	// Agent Component = "agent"

	// Agentless Component = "agentless"
	Analysis Component = "analysis"
	// Auth         Component = "auth"
	Com        Component = "com"
	Csyslog    Component = "csyslog"
	Integrator Component = "integrator"
	// Logcollector Component = "logcollector"
	Mail     Component = "mail"
	Monitor  Component = "monitor"
	Request  Component = "request"
	Syscheck Component = "syscheck"
	// Wmodules     Component = "wmodules"

	// ActiveResponse  Configuration = "active_response"
	ActiveResponse1 Configuration = "active-response"
	// Alerts          Configuration = "alerts"
	Buffer Configuration = "buffer"
	// Client          Configuration = "client"
	// Cluster         Configuration = "cluster"
	// Command  Configuration = "command"
	Decoders Configuration = "decoders"
	// Global          Configuration = "global"
	// Integration Configuration = "integration"
	Internal Configuration = "internal"
	// Labels          Configuration = "labels"
	// Localfile       Configuration = "localfile"
	// Logging         Configuration = "logging"
	// Remote          Configuration = "remote"
	// Reports   Configuration = "reports"
	Rootcheck Configuration = "rootcheck"

	RuleTest Configuration = "rule_test"

	Rules     Configuration = "rules"

	Socket    Configuration = "socket"

	// Syscheck        Configuration = "syscheck"

	Wdb Configuration = "wdb"

	Wmodules Configuration = "wmodules"
)

// Defines values for Filetype.
const (
	File Filetype = "file"

	RegistryKey Filetype = "registry_key"

	RegistryValue Filetype = "registry_value"
)

// Defines values for GroupConfigStatus.
const (
	NotSynced GroupConfigStatus = "not synced"

	Synced GroupConfigStatus = "synced"
)

// Defines values for Hash.
const (
	Blake2b Hash = "blake2b"

	Blake2s Hash = "blake2s"

	// Md5 Hash = "md5"

	// Sha1 Hash = "sha1"

	Sha224 Hash = "sha224"

	//  Sha256 Hash = "sha256"

	Sha3224 Hash = "sha3_224"

	Sha3256 Hash = "sha3_256"

	Sha3384 Hash = "sha3_384"

	Sha3512 Hash = "sha3_512"

	Sha384 Hash = "sha384"

	Sha512 Hash = "sha512"
)

// Defines values for LogLevel.
const (
	Critical LogLevel = "critical"

	Debug LogLevel = "debug"

	Debug2 LogLevel = "debug2"

	// Error LogLevel = "error"

	Info LogLevel = "info"

	Warning LogLevel = "warning"
)

// Defines values for NodeType.
const (
	Master NodeType = "master"

	Worker NodeType = "worker"
)

// Defines values for ResourceList.
const (
	// ResourceList = "*:*"

	// AgentGroup ResourceList = "agent:group"

	// AgentId ResourceList = "agent:id"

	// DecoderFile ResourceList = "decoder:file"

	// GroupId ResourceList = "group:id"

	ListFile ResourceList = "list:file"

	// NodeId ResourceList = "node:id"

	// PolicyId ResourceList = "policy:id"

	// RoleId ResourceList = "role:id"

	// RuleFile ResourceList = "rule:file"

	// UserId ResourceList = "user:id"
)

// Defines values for RuleRequirement.
const (
// Gdpr RuleRequirement = "gdpr"

// Gpg13 RuleRequirement = "gpg13"

// Hipaa RuleRequirement = "hipaa"

// Mitre RuleRequirement = "mitre"

// Nist80053 RuleRequirement = "nist-800-53"

// PciDss RuleRequirement = "pci_dss"

// Tsc RuleRequirement = "tsc"
)

// Defines values for Section.
const (
	ActiveResponse Section = "active-response"

	AgentKeyPolling Section = "agent-key-polling"

	Agentless Section = "agentless"

	Alerts Section = "alerts"

	Auth Section = "auth"

	AwsS3 Section = "aws-s3"

	AzureLogs Section = "azure-logs"

	CisCat Section = "cis-cat"

	// Client Section = "client"

	ClientBuffer Section = "client_buffer"

	Cluster Section = "cluster"

	// Command Section = "command"

	DatabaseOutput Section = "database_output"

	DockerListener Section = "docker-listener"

	EmailAlerts Section = "email_alerts"

	Global Section = "global"

	Integration Section = "integration"

	Labels Section = "labels"

	Localfile Section = "localfile"

	Logging Section = "logging"

	OpenScap Section = "open-scap"

	Osquery Section = "osquery"

	Remote Section = "remote"

	Reports Section = "reports"

	// Rootcheck Section = "rootcheck"

	Ruleset Section = "ruleset"

	// Sca Section = "sca"

	// Socket Section = "socket"

	// Syscheck Section = "syscheck"

	Syscollector Section = "syscollector"

	SyslogOutput Section = "syslog_output"

	VulnerabilityDetector Section = "vulnerability-detector"
)

// Defines values for StatsComponent.
const (
	// Agent StatsComponent = "agent"

	Logcollector StatsComponent = "logcollector"
)

// Defines values for StatusRLDParam.
const (
	All StatusRLDParam = "all"

	Disabled StatusRLDParam = "disabled"

	Enabled StatusRLDParam = "enabled"
)

// Defines values for SyscheckArch.
const (
	X32 SyscheckArch = "[x32]"

	X64 SyscheckArch = "[x64]"
)

// Defines values for Tag.
const (
	// Sca Tag = "sca"

	WazuhAgentlessd Tag = "wazuh-agentlessd"

	WazuhAnalysisd Tag = "wazuh-analysisd"

	WazuhAuthd Tag = "wazuh-authd"

	WazuhCsyslogd Tag = "wazuh-csyslogd"

	WazuhDb Tag = "wazuh-db"

	WazuhDbd Tag = "wazuh-dbd"

	WazuhExecd Tag = "wazuh-execd"

	WazuhIntegratord Tag = "wazuh-integratord"

	WazuhLogcollector Tag = "wazuh-logcollector"

	WazuhMaild Tag = "wazuh-maild"

	WazuhModulesd Tag = "wazuh-modulesd"

	WazuhModulesdAgentKeyPolling Tag = "wazuh-modulesd:agent-key-polling"

	WazuhModulesdAwsS3 Tag = "wazuh-modulesd:aws-s3"

	WazuhModulesdAzureLogs Tag = "wazuh-modulesd:azure-logs"

	WazuhModulesdCiscat Tag = "wazuh-modulesd:ciscat"

	WazuhModulesdCommand Tag = "wazuh-modulesd:command"

	WazuhModulesdControl Tag = "wazuh-modulesd:control"

	WazuhModulesdDatabase Tag = "wazuh-modulesd:database"

	WazuhModulesdDockerListener Tag = "wazuh-modulesd:docker-listener"

	WazuhModulesdDownload Tag = "wazuh-modulesd:download"

	WazuhModulesdOscap Tag = "wazuh-modulesd:oscap"

	WazuhModulesdOsquery Tag = "wazuh-modulesd:osquery"

	WazuhModulesdSyscollector Tag = "wazuh-modulesd:syscollector"

	WazuhModulesdVulnerabilityDetector Tag = "wazuh-modulesd:vulnerability-detector"

	WazuhMonitord Tag = "wazuh-monitord"

	WazuhRemoted Tag = "wazuh-remoted"

	WazuhReportd Tag = "wazuh-reportd"

	WazuhRootcheck Tag = "wazuh-rootcheck"

	WazuhSyscheckd Tag = "wazuh-syscheckd"
)

// ActiveResponseBody defines model for ActiveResponseBody.
type ActiveResponseBody struct {
	Alert *struct {
		// Alert data depending on the AR executed
		Data *map[string]interface{} `json:"data,omitempty"`
	} `json:"alert,omitempty"`

	// Command arguments
	Arguments *[]string `json:"arguments,omitempty"`

	// Command running in the agent. If this value starts by `!`, then it refers to a script name instead of a command name
	Command string `json:"command"`

	// Whether the specified command is a custom command or not
	Custom *bool `json:"custom,omitempty"`
}

// Agent defines model for Agent.
type Agent struct {
	// Embedded struct due to allOf(#/components/schemas/AgentSimple)
	AgentSimple `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ExtraAgentFields)
	ExtraAgentFields `yaml:",inline"`
}

// Current agent's configuration. The output varies with requested component and the agent configuration
type AgentConfiguration map[string]interface{}

// AgentDistinct defines model for AgentDistinct.
type AgentDistinct struct {
	// Embedded struct due to allOf(#/components/schemas/AgentSimple)
	AgentSimple `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ExtraAgentFields)
	ExtraAgentFields `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Number of agents with the specified unique fields
	Count *int32 `json:"count,omitempty"`
}

// AgentGroup defines model for AgentGroup.
type AgentGroup struct {
	// MD5 checksum of the group configuration file (agent.conf)
	ConfigSum string `json:"configSum"`

	// Number of agents belonging to that group
	Count int `json:"count"`

	// MD5 checksum of all group shared files merged in a single one (merged.mg)
	MergedSum *string `json:"mergedSum,omitempty"`
	Name      string  `json:"name"`
}

// AgentGroupDeleted defines model for AgentGroupDeleted.
type AgentGroupDeleted struct {
	// List of removed groups with the agents which belonged to it and might have been reassigned to group default
	AffectedItems []GroupDelete `json:"affected_items"`
}

// Agent ID
type AgentID string

// Agent ID|all
type AgentIDListAll string

// AgentIdKey defines model for AgentIdKey.
type AgentIdKey struct {
	// Agent ID
	Id  AgentID `json:"id"`
	Key string  `json:"key"`
}


type DisconnectedTime struct {
	// Enable force disconnected_time option
	Enabled *bool `json:"enabled,omitempty"`

	// Time the agent must has been disconnected to force the insertion. Time in seconds, ‘[n_days]d’, ‘[n_hours]h’, ‘[n_minutes]m’ or ‘[n_seconds]s’. For example, `7d`, `10s` and `10` are valid values. If no time unit is specified, seconds are used
	Value *string `json:"value,omitempty"`
}

// Remove the old agent with the same name, ID or IP if the configuration is matched
type AgentInsertForce struct {
	// Time the agent must has been registered to force the insertion. Time in seconds, ‘[n_days]d’, ‘[n_hours]h’, ‘[n_minutes]m’ or ‘[n_seconds]s’. For example, `7d`, `10s` and `10` are valid values. If no time unit is specified, seconds are used
	AfterRegistrationTime *string `json:"after_registration_time,omitempty"`
	// Enable force option
	Enabled *bool `json:"enabled,omitempty"`
	DisconnectedTime      *DisconnectedTime `json:"disconnected_time,omitempty"`
}

// AgentSimple defines model for AgentSimple.
type AgentSimple struct {
	// Agent ID
	Id *AgentID `json:"id,omitempty"`

	// Agent name used at registration process
	Name *string `json:"name,omitempty"`

	// Wazuh version the agent has installed
	Version *string `json:"version,omitempty"`
}

// Agent status. It is calculated based on the last keepalive and the Wazuh version
type AgentStatus string

// AgentSynced defines model for AgentSynced.
type AgentSynced struct {
	// Agent ID
	Id *string `json:"id,omitempty"`

	// Sync info
	Synced *bool `json:"synced,omitempty"`
}

// AgentsSummaryStatus defines model for AgentsSummaryStatus.
type AgentsSummaryStatus struct {
	Configuration *struct {
		NotSynced *int32 `json:"not_synced,omitempty"`
		Synced    *int32 `json:"synced,omitempty"`
		Total     *int32 `json:"total,omitempty"`
	} `json:"configuration,omitempty"`
	Connection *struct {
		Active         *int32 `json:"active,omitempty"`
		Disconnected   *int32 `json:"disconnected,omitempty"`
		NeverConnected *int32 `json:"never_connected,omitempty"`
		Pending        *int32 `json:"pending,omitempty"`
		Total          *int32 `json:"total,omitempty"`
	} `json:"connection,omitempty"`
}

// AllItemsResponse defines model for AllItemsResponse.
type AllItemsResponse struct {
	// List of items that have failed applying the requested operation
	FailedItems []SimpleApiError `json:"failed_items"`

	// Number of items that have successfully applied the requested operation
	TotalAffectedItems int32 `json:"total_affected_items"`

	// Number of items that have failed applying the requested operation
	TotalFailedItems int32 `json:"total_failed_items"`
}

// AllItemsResponseAgentIDs defines model for AllItemsResponseAgentIDs.
type AllItemsResponseAgentIDs struct {
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []AgentID `json:"affected_items"`
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
}

// AllItemsResponseAgents defines model for AllItemsResponseAgents.
type AllItemsResponseAgents struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []Agent `json:"affected_items"`
}

// AllItemsResponseAgentsDistinct defines model for AllItemsResponseAgentsDistinct.
type AllItemsResponseAgentsDistinct struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []AgentDistinct `json:"affected_items"`
}

// AllItemsResponseAgentsKeys defines model for AllItemsResponseAgentsKeys.
type AllItemsResponseAgentsKeys struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []AgentIdKey `json:"affected_items"`
}

// AllItemsResponseAgentsSimple defines model for AllItemsResponseAgentsSimple.
type AllItemsResponseAgentsSimple struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []AgentSimple `json:"affected_items"`
}

// AllItemsResponseAgentsSynced defines model for AllItemsResponseAgentsSynced.
type AllItemsResponseAgentsSynced struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []AgentSynced `json:"affected_items"`
}

// AllItemsResponseCiscatResult defines model for AllItemsResponseCiscatResult.
type AllItemsResponseCiscatResult struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []CiscatResults `json:"affected_items"`
}

// AllItemsResponseClusterNodes defines model for AllItemsResponseClusterNodes.
type AllItemsResponseClusterNodes struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []ClusterNode `json:"affected_items"`
}

// AllItemsResponseDecoders defines model for AllItemsResponseDecoders.
type AllItemsResponseDecoders struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []Decoder `json:"affected_items"`
}

// AllItemsResponseDecodersFiles defines model for AllItemsResponseDecodersFiles.
type AllItemsResponseDecodersFiles struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []DecoderFile `json:"affected_items"`
}

// AllItemsResponseGroupIDs defines model for AllItemsResponseGroupIDs.
type AllItemsResponseGroupIDs struct {
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []GroupID `json:"affected_items"`
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
}

// AllItemsResponseGroups defines model for AllItemsResponseGroups.
type AllItemsResponseGroups struct {
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []AgentGroup `json:"affected_items"`
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
}

// AllItemsResponseLastScan defines model for AllItemsResponseLastScan.
type AllItemsResponseLastScan struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []LastScan `json:"affected_items"`
}

// AllItemsResponseLists defines model for AllItemsResponseLists.
type AllItemsResponseLists struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []CDBList `json:"affected_items"`
}

// AllItemsResponseListsFiles defines model for AllItemsResponseListsFiles.
type AllItemsResponseListsFiles struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []CDBListFile `json:"affected_items"`
}

// AllItemsResponseNodeHealthcheck defines model for AllItemsResponseNodeHealthcheck.
type AllItemsResponseNodeHealthcheck struct {
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []NodeHealthcheck `json:"affected_items"`
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
}

// AllItemsResponseNodeIDs defines model for AllItemsResponseNodeIDs.
type AllItemsResponseNodeIDs struct {
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []NodeID `json:"affected_items"`
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
}

// AllItemsResponseNodeRulesetSynchronizationStatus defines model for AllItemsResponseNodeRulesetSynchronizationStatus.
type AllItemsResponseNodeRulesetSynchronizationStatus struct {
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []NodeRulesetSyncStatus `json:"affected_items"`
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
}

// AllItemsResponsePolicies defines model for AllItemsResponsePolicies.
type AllItemsResponsePolicies struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []interface{} `json:"affected_items"`
}

// AllItemsResponseRoles defines model for AllItemsResponseRoles.
type AllItemsResponseRoles struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []RolesResponse `json:"affected_items"`
}

// AllItemsResponseRules defines model for AllItemsResponseRules.
type AllItemsResponseRules struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []Rule `json:"affected_items"`
}

// AllItemsResponseRulesFiles defines model for AllItemsResponseRulesFiles.
type AllItemsResponseRulesFiles struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []RuleFile `json:"affected_items"`
}

// AllItemsResponseSCAChecks defines model for AllItemsResponseSCAChecks.
type AllItemsResponseSCAChecks struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SCAChecks `json:"affected_items"`
}

// AllItemsResponseSCADatabase defines model for AllItemsResponseSCADatabase.
type AllItemsResponseSCADatabase struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SCADatabase `json:"affected_items"`
}

// AllItemsResponseSyscheckResult defines model for AllItemsResponseSyscheckResult.
type AllItemsResponseSyscheckResult struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscheckDatabase `json:"affected_items"`
}

// AllItemsResponseSyscollectorHardware defines model for AllItemsResponseSyscollectorHardware.
type AllItemsResponseSyscollectorHardware struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscollectorHardware `json:"affected_items"`
}

// AllItemsResponseSyscollectorHotfixes defines model for AllItemsResponseSyscollectorHotfixes.
type AllItemsResponseSyscollectorHotfixes struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscollectorHotfix `json:"affected_items"`
}

// AllItemsResponseSyscollectorInterface defines model for AllItemsResponseSyscollectorInterface.
type AllItemsResponseSyscollectorInterface struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscollectorInterface `json:"affected_items"`
}

// AllItemsResponseSyscollectorNetwork defines model for AllItemsResponseSyscollectorNetwork.
type AllItemsResponseSyscollectorNetwork struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscollectorNetwork `json:"affected_items"`
}

// AllItemsResponseSyscollectorOS defines model for AllItemsResponseSyscollectorOS.
type AllItemsResponseSyscollectorOS struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscollectorOS `json:"affected_items"`
}

// AllItemsResponseSyscollectorPackages defines model for AllItemsResponseSyscollectorPackages.
type AllItemsResponseSyscollectorPackages struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscollectorPackages `json:"affected_items"`
}

// AllItemsResponseSyscollectorPorts defines model for AllItemsResponseSyscollectorPorts.
type AllItemsResponseSyscollectorPorts struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscollectorPorts `json:"affected_items"`
}

// AllItemsResponseSyscollectorProcesses defines model for AllItemsResponseSyscollectorProcesses.
type AllItemsResponseSyscollectorProcesses struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscollectorProcess `json:"affected_items"`
}

// AllItemsResponseSyscollectorProtocol defines model for AllItemsResponseSyscollectorProtocol.
type AllItemsResponseSyscollectorProtocol struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []SyscollectorProtocol `json:"affected_items"`
}

// AllItemsResponseUsers defines model for AllItemsResponseUsers.
type AllItemsResponseUsers struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []UsersResponse `json:"affected_items"`
}

// AllItemsResponseValidationStatus defines model for AllItemsResponseValidationStatus.
type AllItemsResponseValidationStatus struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []ValidationStatus `json:"affected_items"`
}

// AllItemsResponseWazuhDaemonStats defines model for AllItemsResponseWazuhDaemonStats.
type AllItemsResponseWazuhDaemonStats struct {
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []interface{} `json:"affected_items"`
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
}

// AllItemsResponseWazuhDaemonStatsAgents defines model for AllItemsResponseWazuhDaemonStatsAgents.
type AllItemsResponseWazuhDaemonStatsAgents struct {
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []interface{} `json:"affected_items"`
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
}

// AllItemsResponseWazuhLogs defines model for AllItemsResponseWazuhLogs.
type AllItemsResponseWazuhLogs struct {
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []WazuhLogs `json:"affected_items"`
}

// AllItemsResponseWazuhStats defines model for AllItemsResponseWazuhStats.
type AllItemsResponseWazuhStats struct {
	// Embedded fields due to inline allOf schema
	// Items that successfully applied the API call action
	AffectedItems []interface{} `json:"affected_items"`
	// Embedded struct due to allOf(#/components/schemas/AllItemsResponse)
	AllItemsResponse `yaml:",inline"`
}

// BasicInfo defines model for BasicInfo.
type BasicInfo struct {
	// API version in the manager
	ApiVersion *string `json:"api_version,omitempty"`

	// Server hostname
	Hostname *string `json:"hostname,omitempty"`

	// API license name
	LicenseName *string `json:"license_name,omitempty"`

	// API license url
	LicenseUrl *string `json:"license_url,omitempty"`

	// API revision
	Revision  *int32  `json:"revision,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`

	// API title name
	Title *string `json:"title,omitempty"`
}

// CDBList defines model for CDBList.
type CDBList struct {
	// Embedded struct due to allOf(#/components/schemas/RulesetFile)
	RulesetFile `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items *[]CDBListPair `json:"items,omitempty"`
}

// CDBListFile defines model for CDBListFile.
type CDBListFile RulesetFile

// CDBListPair defines model for CDBListPair.
type CDBListPair struct {
	// Value of the CDB list item key
	Key string `json:"key"`

	// Value of the CDB list item value
	Value string `json:"value"`
}

// CiscatResults defines model for CiscatResults.
type CiscatResults struct {
	// CIS-CAT benchmark where the profile is defined
	Benchmark *string `json:"benchmark,omitempty"`

	// Number of checks that CIS-CAT was not able to run
	Error *int32 `json:"error,omitempty"`

	// Number of failed checks. If this number is higher than 0 the host will probably have a vulnerability
	Fail *int32 `json:"fail,omitempty"`

	// Number of not passed checks
	Notchecked *int32 `json:"notchecked,omitempty"`

	// Number of passed checks
	Pass *int32 `json:"pass,omitempty"`

	// CIS-CAT profile scanned
	Profile *string     `json:"profile,omitempty"`
	Scan    *ScanIdTime `json:"scan,omitempty"`

	// Percentage of passed checks
	Score *int32 `json:"score,omitempty"`

	// Number of checks which status CIS-CAT was not able to determine
	Unknown *int32 `json:"unknown,omitempty"`
}

// ClusterNode defines model for ClusterNode.
type ClusterNode struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterNodeBasic)
	ClusterNodeBasic `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Node ID
	Name *ClusterNodeName `json:"name,omitempty"`
}

// ClusterNodeBasic defines model for ClusterNodeBasic.
type ClusterNodeBasic struct {
	// IP the node is using to communicate with other nodes in the cluster
	Ip *string `json:"ip,omitempty"`

	// Node type
	Type *ClusterNodeBasicType `json:"type,omitempty"`

	// Wazuh version installed in the node
	Version *string `json:"version,omitempty"`
}

// Node type
type ClusterNodeBasicType string

// Node ID
type ClusterNodeName string

// ConfigurationValidation defines model for ConfigurationValidation.
type ConfigurationValidation struct {
	// Configuration status
	Status *ConfigurationValidationStatus `json:"status,omitempty"`
}

// Configuration status
type ConfigurationValidationStatus string

// ConfirmationMessage defines model for ConfirmationMessage.
type ConfirmationMessage struct {
	// Confirmation message
	Message *string `json:"message,omitempty"`
}

// DHCP status
type DHCPStatus string

// DaemonStatus defines model for DaemonStatus.
type DaemonStatus string

// Decoder defines model for Decoder.
type Decoder struct {
	// Embedded struct due to allOf(#/components/schemas/DecoderFile)
	DecoderFile `yaml:",inline"`
}

// DecoderFile defines model for DecoderFile.
type DecoderFile struct {
	// Embedded struct due to allOf(#/components/schemas/RulesetFile)
	RulesetFile `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/RulesetStatus)
	RulesetStatus `yaml:",inline"`
}

// ExtraAgentFields defines model for ExtraAgentFields.
type ExtraAgentFields struct {
	// MD5 checksum of the group configuration file (agent.conf)
	ConfigSum *string `json:"configSum,omitempty"`

	// Date when the agent was registered
	DateAdd *string `json:"dateAdd,omitempty"`

	// List of groups the agent belongs to
	Group *[]string `json:"group,omitempty"`

	// IP where the agent communicates with the manager. If the manager can't get this information, it will be the same as registerIP field
	Ip *string `json:"ip,omitempty"`

	// Date when the last keepalive was received from the agent
	LastKeepAlive *string `json:"lastKeepAlive,omitempty"`

	// Hostname of the manager where the agent is reporting to
	Manager *string `json:"manager,omitempty"`

	// MD5 checksum of all group shared files merged in a single one (merged.mg)
	MergedSum *string `json:"mergedSum,omitempty"`

	// Node ID where the agent is reporting to
	NodeName *string `json:"node_name,omitempty"`

	// Agent OS information
	Os *struct {
		Arch     *string `json:"arch,omitempty"`
		Codename *string `json:"codename,omitempty"`
		Major    *string `json:"major,omitempty"`
		Minor    *string `json:"minor,omitempty"`
		Name     *string `json:"name,omitempty"`
		Platform *string `json:"platform,omitempty"`
		Uname    *string `json:"uname,omitempty"`
		Version  *string `json:"version,omitempty"`
	} `json:"os,omitempty"`

	// IP used at agent registration process
	RegisterIP *string `json:"registerIP,omitempty"`

	// Agent status. It is calculated based on the last keepalive and the Wazuh version
	Status *AgentStatus `json:"status,omitempty"`
}

// GroupConfiguration defines model for GroupConfiguration.
type GroupConfiguration struct {
	// Group configuration. The fields on this object depend on the actual group configuration
	Config  map[string]interface{} `json:"config"`
	Filters struct {
		// The name of the agent where that configuration is being applied
		Name *string `json:"name,omitempty"`

		// OS family where the configuration is being applied
		Os *string `json:"os,omitempty"`

		// Profile name. Any agent configured to use the defined profile may use the block
		Profile *string `json:"profile,omitempty"`
	} `json:"filters"`
}

// Deleted group with a list of agents that were assigned to it
type GroupDelete struct {
	AdditionalProperties map[string][]interface{} `json:"-"`
}

// Group name
type GroupID string

// Group name|all
type GroupIDListAll string

// ItemAffected defines model for ItemAffected.
type ItemAffected struct {
	// Items that successfully applied the API call action
	AffectedItems []interface{} `json:"affected_items"`
}

// LastScan defines model for LastScan.
type LastScan struct {
	// Date when the latest scan finished. If it is in progress, or no scans have been run, null will be returned
	End *time.Time `json:"end"`

	// Date when the latest scan started. If no scans have been run, null will be returned
	Start *time.Time `json:"start"`
}

// Information regarding local opened port
type LocalPortInfo struct {
	// Bind IP
	Ip *string `json:"ip,omitempty"`

	// Port used
	Port *int32 `json:"port,omitempty"`
}

// LogSummary defines model for LogSummary.
type LogSummary struct {
	All      *int32 `json:"all,omitempty"`
	Critical *int32 `json:"critical,omitempty"`
	Debug    *int32 `json:"debug,omitempty"`
	Error    *int32 `json:"error,omitempty"`
	Info     *int32 `json:"info,omitempty"`
	Warning  *int32 `json:"warning,omitempty"`
}

// LogtestRequest defines model for LogtestRequest.
type LogtestRequest struct {
	// Event to look for
	Event string `json:"event"`

	// Path string
	Location string `json:"location"`

	// Allowed values: syslog, json, snort-full, squid, eventlog, eventchannel, audit, mysql_log, postgresql_log, nmapg, iis, command, full_command, djb-multilog, multi-line
	LogFormat string `json:"log_format"`

	// Token for the logtest session
	Token *string `json:"token,omitempty"`
}

// MITRE group ID
type MitreGroupId string

// MITRE mitigation ID
type MitreMitigationId string

// MITRE Reference ID
type MitreReferenceId string

// MITRE software ID
type MitreSoftwareId string

// MITRE tactic ID
type MitreTacticId string

// MITRE technique ID
type MitreTechniqueId string

// Information related to received packets in the network interface
type NetworkInterfaceReceivedPackets struct {
	// Number of bytes in the network interface
	Bytes *int32 `json:"bytes,omitempty"`

	// Number of dropped packages in the network interface
	Dropped *int32 `json:"dropped,omitempty"`

	// Number of packages containing any error in the network interface
	Error *int32 `json:"error,omitempty"`

	// Number of packages in the network interface
	Packets *int32 `json:"packets,omitempty"`
}

// Information related to sent packets in the network interface
type NetworkInterfaceSentPackets struct {
	// Number of bytes in the network interface
	Bytes *int32 `json:"bytes,omitempty"`

	// Number of dropped packages in the network interface
	Dropped *int32 `json:"dropped,omitempty"`

	// Number of packages containing any error in the network interface
	Error *int32 `json:"error,omitempty"`

	// Number of packages in the network interface
	Packets *int32 `json:"packets,omitempty"`
}

// NewVersions defines model for NewVersions.
type NewVersions struct {
	// Current version in the format vX.Y.Z
	CurrentVersion *string `json:"current_version,omitempty"`

	// Information about the most recent available major update
	LastAvailableMajor *struct {
		Description   *string `json:"description,omitempty"`
		PublishedDate *string `json:"published_date,omitempty"`
		Semver        *struct {
			Major *int32 `json:"major,omitempty"`
			Minor *int32 `json:"minor,omitempty"`
			Patch *int32 `json:"patch,omitempty"`
		} `json:"semver,omitempty"`

		// Version in the format vX.Y.Z
		Tag   *string `json:"tag,omitempty"`
		Title *string `json:"title,omitempty"`
	} `json:"last_available_major,omitempty"`

	// Information about the most recent available minor update
	LastAvailableMinor *struct {
		Description   *string `json:"description,omitempty"`
		PublishedDate *string `json:"published_date,omitempty"`
		Semver        *struct {
			Major *int32 `json:"major,omitempty"`
			Minor *int32 `json:"minor,omitempty"`
			Patch *int32 `json:"patch,omitempty"`
		} `json:"semver,omitempty"`

		// Version in the format vX.Y.Z
		Tag   *string `json:"tag,omitempty"`
		Title *string `json:"title,omitempty"`
	} `json:"last_available_minor,omitempty"`

	// Information about the most recent available patch update
	LastAvailablePatch *struct {
		Description   *string `json:"description,omitempty"`
		PublishedDate *string `json:"published_date,omitempty"`
		Semver        *struct {
			Major *int32 `json:"major,omitempty"`
			Minor *int32 `json:"minor,omitempty"`
			Patch *int32 `json:"patch,omitempty"`
		} `json:"semver,omitempty"`

		// Version in the format vX.Y.Z
		Tag   *string `json:"tag,omitempty"`
		Title *string `json:"title,omitempty"`
	} `json:"last_available_patch,omitempty"`

	// Datetime of the last query to the CTI service
	LastCheckDate *string `json:"last_check_date,omitempty"`

	// Flag that indicates if the service is enabled
	UpdateCheck *bool `json:"update_check,omitempty"`

	// Identifier of the Wazuh instance
	Uuid *string `json:"uuid,omitempty"`
}

// NodeHealthcheck defines model for NodeHealthcheck.
type NodeHealthcheck struct {
	Name *struct {
		Info *struct {
			Info *struct {
				// Embedded struct due to allOf(#/components/schemas/ClusterNodeBasic)
				ClusterNodeBasic `yaml:",inline"`
				// Embedded fields due to inline allOf schema
				// Number of agents currently reporting to that node
				TotalActiveAgents *int32 `json:"totalActiveAgents,omitempty"`
			} `json:"info,omitempty"`

			// Node ID
			Name *ClusterNodeName `json:"name,omitempty"`
		} `json:"info,omitempty"`
		Status *struct {
			LastKeepAlive       *string `json:"last_keep_alive,omitempty"`
			LastSyncAgentGroups *struct {
				DateEndMaster    *string `json:"date_end_master,omitempty"`
				DateStartMaster  *string `json:"date_start_master,omitempty"`
				TotalAgentgroups *int32  `json:"total_agentgroups,omitempty"`
			} `json:"last_sync_agent_groups,omitempty"`
			LastSyncAgentinfo *struct {
				DateEndMaster   *string `json:"date_end_master,omitempty"`
				DateStartMaster *string `json:"date_start_master,omitempty"`
				NSyncedChunks   *int32  `json:"n_synced_chunks,omitempty"`
			} `json:"last_sync_agentinfo,omitempty"`
			LastSyncIntegrity *struct {
				DateEndMaster   *string `json:"date_end_master,omitempty"`
				DateStartMaster *string `json:"date_start_master,omitempty"`
				TotalFiles      *struct {
					Extra      *int32 `json:"extra,omitempty"`
					ExtraValid *int32 `json:"extra_valid,omitempty"`
					Missing    *int32 `json:"missing,omitempty"`
					Shared     *int32 `json:"shared,omitempty"`
				} `json:"total_files,omitempty"`
			} `json:"last_sync_integrity,omitempty"`
			SyncAgentInfoFree *bool `json:"sync_agent_info_free,omitempty"`
			SyncIntegrityFree *bool `json:"sync_integrity_free,omitempty"`
		} `json:"status,omitempty"`
	} `json:"name,omitempty"`
}

// Node ID
type NodeID string

// NodeRulesetSyncStatus defines model for NodeRulesetSyncStatus.
type NodeRulesetSyncStatus struct {
	// Node name
	Name *string `json:"name,omitempty"`

	// Whether the ruleset is synchronized or not
	Synced *bool `json:"synced,omitempty"`
}

// OverviewAgents defines model for OverviewAgents.
type OverviewAgents struct {
	// Recount of the number of Wazuh agents group by OS
	AgentOs []struct {
		Count *int32 `json:"count,omitempty"`
		Os    *struct {
			Name     *string `json:"name,omitempty"`
			Platform *string `json:"platform,omitempty"`
			Version  *string `json:"version,omitempty"`
		} `json:"os,omitempty"`
	} `json:"agent_os"`
	AgentStatus AgentsSummaryStatus `json:"agent_status"`

	// Recount of the number of Wazuh agents group by version
	AgentVersion []struct {
		Count   *int32  `json:"count,omitempty"`
		Version *string `json:"version,omitempty"`
	} `json:"agent_version"`

	// Recount of the number of Wazuh agents group by Wazuh groups
	Groups              []AgentGroup `json:"groups"`
	LastRegisteredAgent []Agent      `json:"last_registered_agent"`

	// Active nodes in the cluster
	Nodes []struct {
		Count    *int32  `json:"count,omitempty"`
		NodeName *string `json:"node_name,omitempty"`
	} `json:"nodes"`
}

// PoliciesRequest defines model for PoliciesRequest.
type PoliciesRequest struct {
	// Policy name
	Name string `json:"name"`

	// New policy definition
	Policy struct {
		// Actions to perform
		Actions []string `json:"actions"`

		// Effect of the policy
		Effect string `json:"effect"`

		// Resources to apply the actions on
		Resources []string `json:"resources"`
	} `json:"policy"`
}

// PoliciesRequestNoRequired defines model for PoliciesRequest_no_required.
type PoliciesRequestNoRequired struct {
	// Policy name
	Name *string `json:"name,omitempty"`

	// New policy definition
	Policy *struct {
		// Actions to perform
		Actions []string `json:"actions"`

		// Effect of the policy
		Effect string `json:"effect"`

		// Resources to apply the actions on
		Resources []string `json:"resources"`
	} `json:"policy,omitempty"`
}

// PoliciesResponse defines model for PoliciesResponse.
type PoliciesResponse struct {
	// Policy id
	Id *int `json:"id,omitempty"`

	// Policy name
	Name *string `json:"name,omitempty"`

	// New policy definition
	Policy *struct {
		// Actions to perform
		Actions *[]string `json:"actions,omitempty"`

		// Effect of the policy
		Effect *string `json:"effect,omitempty"`

		// Resources to apply the actions on
		Resources *[]string `json:"resources,omitempty"`
	} `json:"policy,omitempty"`
}

// Policy ID
type PolicyId string

// Policy ID|all
type PolicyIdDELETE string

// Information regarding the remote port the machine is connected to
type RemotePortInfo struct {
	// Bind IP
	Ip *string `json:"ip,omitempty"`

	// Port used
	Port *int32 `json:"port,omitempty"`
}

// Role ID
type RoleId string

// Role ID|all
type RoleIdDELETE string

// RolesRequest defines model for RolesRequest.
type RolesRequest struct {
	// Role name
	Name string `json:"name"`
}

// RolesRequestNoRequired defines model for RolesRequest_no_required.
type RolesRequestNoRequired struct {
	// Role name
	Name *string `json:"name,omitempty"`
}

// RolesResponse defines model for RolesResponse.
type RolesResponse struct {
	// Role id
	Id *int `json:"id,omitempty"`

	// Role name
	Name *string `json:"name,omitempty"`

	// Role rule
	Rule *map[string]interface{} `json:"rule,omitempty"`
}

// Rule defines model for Rule.
type Rule struct {
	// Embedded struct due to allOf(#/components/schemas/RuleFile)
	RuleFile `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Rule description. This description is shown when an alert matching the rule is raised
	Description *string `json:"description,omitempty"`

	// Rule definition details
	Details *map[string]interface{} `json:"details,omitempty"`

	// GDPR checks the rule is checking
	Gdpr *[]string `json:"gdpr,omitempty"`

	// GPG13 checks the rule is checking
	Gpg13 *[]string `json:"gpg13,omitempty"`

	// Groups the rule belongs to
	Groups *[]string `json:"groups,omitempty"`

	// HIPAA checks the rule is checking
	Hipaa *[]string `json:"hipaa,omitempty"`

	// Rule ID
	Id *int32 `json:"id,omitempty"`

	// Rule level
	Level *int32 `json:"level,omitempty"`

	// NIST-800-53 checks the rule is checking
	Nist80053 *[]string `json:"nist-800-53,omitempty"`

	// PCI DSS checks the rule is checking
	Pci *[]string `json:"pci,omitempty"`

	// TSC checks the rule is checking
	Tsc *[]string `json:"tsc,omitempty"`
}

// RuleFile defines model for RuleFile.
type RuleFile struct {
	// Embedded struct due to allOf(#/components/schemas/RulesetFile)
	RulesetFile `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/RulesetStatus)
	RulesetStatus `yaml:",inline"`
}

// RulesetFile defines model for RulesetFile.
type RulesetFile struct {
	// Name of the file
	Filename *string `json:"filename,omitempty"`

	// Folder path where the file is located. This path is relative to the Wazuh installation path
	RelativeDirname *string `json:"relative_dirname,omitempty"`
}

// RulesetStatus defines model for RulesetStatus.
type RulesetStatus struct {
	// Whether the specified ruleset file is enabled or disabled in Wazuh manager configuration
	Status *RulesetStatusStatus `json:"status,omitempty"`
}

// Whether the specified ruleset file is enabled or disabled in Wazuh manager configuration
type RulesetStatusStatus string

// SCAChecks defines model for SCAChecks.
type SCAChecks struct {
	// Specify how rule results are aggregated in order to calculate the final value of a check
	Condition *SCAChecksCondition `json:"condition,omitempty"`

	// A description of what is being checked
	Description *string `json:"description,omitempty"`

	// Analyzed directories
	Directory *string `json:"directory,omitempty"`

	// Analyzed file path
	File *string `json:"file,omitempty"`

	// Policy check ID. A policy contains multiple checks
	Id *int32 `json:"id,omitempty"`

	// Scanned policy ID
	PolicyId *string `json:"policy_id,omitempty"`

	// Check whether a process is running or not. It's only returned when the checked process is running
	Process *string `json:"process,omitempty"`

	// Explain why this check is necessary
	Rationale *string `json:"rationale,omitempty"`

	// A link to a documentation page about the check
	References *string `json:"references,omitempty"`

	// Analyzed registry
	Registry *string `json:"registry,omitempty"`

	// Explain how to fix the check, this field is very useful in case the check failed
	Remediation *string `json:"remediation,omitempty"`

	// Check result
	Result *SCAChecksResult `json:"result,omitempty"`

	// A brief description of what is being checked
	Title *string `json:"title,omitempty"`
}

// Specify how rule results are aggregated in order to calculate the final value of a check
type SCAChecksCondition string

// Check result
type SCAChecksResult string

// SCADatabase defines model for SCADatabase.
type SCADatabase struct {
	// Brief description of what the policy is checking
	Description *string `json:"description,omitempty"`

	// When the last scan finished
	EndScan *time.Time `json:"end_scan,omitempty"`

	// Number of failed checks. If this number is higher than 0 the host has a vulnerability
	Fail *int32 `json:"fail,omitempty"`

	// Policy name
	Name *string `json:"name,omitempty"`

	// Number of passed checks
	Pass *int32 `json:"pass,omitempty"`

	// Policy ID
	PolicyId *string `json:"policy_id,omitempty"`

	// A link to a documentation page about the policy
	References *string `json:"references,omitempty"`

	// Percentage of passed checks
	Score *int32 `json:"score,omitempty"`

	// When the last scan started
	StartScan *time.Time `json:"start_scan,omitempty"`
}

// ScanIdTime defines model for ScanIdTime.
type ScanIdTime struct {
	// Scan ID
	Id *int64 `json:"id,omitempty"`

	// Date when the scan was performed
	Time *time.Time `json:"time,omitempty"`
}

// SecurityConfiguration defines model for SecurityConfiguration.
type SecurityConfiguration struct {
	// Time in seconds until the token expires
	AuthTokenExpTimeout *int32 `json:"auth_token_exp_timeout,omitempty"`

	// RBAC mode (white/black)
	RbacMode *SecurityConfigurationRbacMode `json:"rbac_mode,omitempty"`
}

// RBAC mode (white/black)
type SecurityConfigurationRbacMode string

// SecurityRulesRequest defines model for SecurityRulesRequest.
type SecurityRulesRequest struct {
	// Rule name
	Name string `json:"name"`

	// Rule body
	Rule map[string]interface{} `json:"rule"`
}

// SecurityRulesRequestNoRequired defines model for SecurityRulesRequest_no_required.
type SecurityRulesRequestNoRequired struct {
	// Rule name
	Name *string `json:"name,omitempty"`

	// Rule body
	Rule *map[string]interface{} `json:"rule,omitempty"`
}

// Security rule ID
type SecurityRuleId string

// Security rule ID|all
type SecurityRuleIdDELETE string

// SimpleApiError defines model for SimpleApiError.
type SimpleApiError struct {
	Error SimpleApiError_Error `json:"error"`
	Ids    []string       `json:"id,omitempty"`
}

// SimpleApiError_Error defines model for SimpleApiError.Error.
type SimpleApiError_Error struct {
	AdditionalProperties map[string]struct {
		Code        *int32  `json:"code,omitempty"`
		Message     *string `json:"message,omitempty"`
		Remediation *string `json:"remediation,omitempty"`
	} `json:"-"`
}

// SyscheckDatabase defines model for SyscheckDatabase.
type SyscheckDatabase struct {
	// Number of changes applied
	Changes *int32 `json:"changes,omitempty"`

	// Date when the alert was raised
	Date *time.Time `json:"date,omitempty"`

	// File name that raised the alert
	File *string `json:"file,omitempty"`

	// GID of the file. Only available in Linux agents
	Gid *string `json:"gid,omitempty"`

	// Group name. Only available in Linux agents
	Gname *string `json:"gname,omitempty"`

	// Inode of the file. Only available in Linux agents
	Inode *int32 `json:"inode,omitempty"`

	// MD5 checksum of the file
	Md5 *string `json:"md5,omitempty"`

	// Last modification date of the file
	Mtime *string `json:"mtime,omitempty"`

	// File permissions
	Perm *string `json:"perm,omitempty"`

	// SHA1 checksum of the file
	Sha1 *string `json:"sha1,omitempty"`

	// SHA256 checksum of the file
	Sha256 *string `json:"sha256,omitempty"`

	// File size in bytes
	Size *int64 `json:"size,omitempty"`

	// UID of the file
	Uid *string `json:"uid,omitempty"`

	// User name of the file
	Uname *string `json:"uname,omitempty"`
}

// SyscollectorHardware defines model for SyscollectorHardware.
type SyscollectorHardware struct {
	// Agent ID
	AgentId *AgentID `json:"agent_id,omitempty"`

	// Motherboard serial number. This value will be empty in virtual machines
	BoardSerial *string `json:"board_serial,omitempty"`
	Cpu         *struct {
		// Number of cores the CPU has
		Cores *int32 `json:"cores,omitempty"`

		// Mhz the CPU has
		Mhz *float32 `json:"mhz,omitempty"`

		// CPU name
		Name *string `json:"name,omitempty"`
	} `json:"cpu,omitempty"`
	Ram *struct {
		// Current free RAM memory
		Free *int32 `json:"free,omitempty"`

		// Total RAM memory
		Total *int32 `json:"total,omitempty"`

		// RAM memory currently used
		Usage *int32 `json:"usage,omitempty"`
	} `json:"ram,omitempty"`
	Scan *ScanIdTime `json:"scan,omitempty"`
}

// SyscollectorHotfix defines model for SyscollectorHotfix.
type SyscollectorHotfix struct {
	// Hotfixes for windows agents
	Hotfix *string     `json:"hotfix,omitempty"`
	Scan   *ScanIdTime `json:"scan,omitempty"`
}

// SyscollectorInterface defines model for SyscollectorInterface.
type SyscollectorInterface struct {
	// Agent ID
	AgentId *AgentID `json:"agent_id,omitempty"`

	// MAC Address of the network interface
	Mac *string `json:"mac,omitempty"`

	// Network interface's Maximum Transfer Unit
	Mtu *int32 `json:"mtu,omitempty"`

	// Network interface name
	Name *string `json:"name,omitempty"`

	// Information related to received packets in the network interface
	Rx   *NetworkInterfaceReceivedPackets `json:"rx,omitempty"`
	Scan *ScanIdTime                      `json:"scan,omitempty"`

	// Network interface state
	State *SyscollectorInterfaceState `json:"state,omitempty"`

	// Information related to sent packets in the network interface
	Tx *NetworkInterfaceSentPackets `json:"tx,omitempty"`

	// Network interface type
	Type *string `json:"type,omitempty"`
}

// Network interface state
type SyscollectorInterfaceState string

// SyscollectorNetwork defines model for SyscollectorNetwork.
type SyscollectorNetwork struct {
	// IP address associated with the network interface
	Address *string `json:"address,omitempty"`

	// Agent ID
	AgentId *AgentID `json:"agent_id,omitempty"`

	// IP address associated with the broadcast
	Broadcast *string `json:"broadcast,omitempty"`

	// Network interface name
	Iface *string `json:"iface,omitempty"`

	// Netmask associated with the network interface
	Netmask *string `json:"netmask,omitempty"`

	// Protocol associated with the network interface
	Proto *string `json:"proto,omitempty"`

	// Scan ID
	ScanId *int64 `json:"scan_id,omitempty"`
}

// SyscollectorOS defines model for SyscollectorOS.
type SyscollectorOS struct {
	// Agent ID
	AgentId *AgentID `json:"agent_id,omitempty"`

	// OS architecture
	Architecture *string `json:"architecture,omitempty"`

	// Machine's hostname
	Hostname *string `json:"hostname,omitempty"`
	Os       *struct {
		// OS version codename
		Codename *string `json:"codename,omitempty"`

		// Major release version
		Major *string `json:"major,omitempty"`

		// Minor release version
		Minor *string `json:"minor,omitempty"`

		// OS name
		Name *string `json:"name,omitempty"`

		// OS platform name
		Platform *string `json:"platform,omitempty"`

		// Full version name
		Version *string `json:"version,omitempty"`
	} `json:"os,omitempty"`

	// Release name
	Release *string     `json:"release,omitempty"`
	Scan    *ScanIdTime `json:"scan,omitempty"`

	// System name
	Sysname *string `json:"sysname,omitempty"`

	// Release version
	Version *string `json:"version,omitempty"`
}

// SyscollectorPackages defines model for SyscollectorPackages.
type SyscollectorPackages struct {
	// Agent ID
	AgentId *AgentID `json:"agent_id,omitempty"`

	// Package architecture
	Architecture *string `json:"architecture,omitempty"`

	// Brief package description
	Description *string `json:"description,omitempty"`

	// Package format
	Format *SyscollectorPackagesFormat `json:"format,omitempty"`

	// Whether the package has multi architecture support
	Multiarch *SyscollectorPackagesMultiarch `json:"multiarch,omitempty"`

	// Package name
	Name *string `json:"name,omitempty"`

	// Package priority
	Priority *string     `json:"priority,omitempty"`
	Scan     *ScanIdTime `json:"scan,omitempty"`

	// Package section
	Section *string `json:"section,omitempty"`

	// Installed package size in bytes
	Size *int `json:"size,omitempty"`

	// Source section
	Source *string `json:"source,omitempty"`

	// Vendor name
	Vendor *string `json:"vendor,omitempty"`

	// Release version installed
	Version *string `json:"version,omitempty"`
}

// Package format
type SyscollectorPackagesFormat string

// Whether the package has multi architecture support
type SyscollectorPackagesMultiarch string

// SyscollectorPorts defines model for SyscollectorPorts.
type SyscollectorPorts struct {
	// Agent ID
	AgentId *AgentID `json:"agent_id,omitempty"`

	// Port inode
	Inode *int64 `json:"inode,omitempty"`

	// Information regarding local opened port
	Local *LocalPortInfo `json:"local,omitempty"`

	// PID owner of the opened port
	Pid *int32 `json:"pid,omitempty"`

	// Name of the PID
	Process *string `json:"process,omitempty"`

	// Protocol used in the communication
	Protocol *SyscollectorPortsProtocol `json:"protocol,omitempty"`

	// Information regarding the remote port the machine is connected to
	Remote *RemotePortInfo `json:"remote,omitempty"`

	// Packets at the receiver queue
	RxQueue *int32      `json:"rx_queue,omitempty"`
	Scan    *ScanIdTime `json:"scan,omitempty"`

	// Communication status
	State *SyscollectorPortsState `json:"state,omitempty"`

	// Packets pending to be transmitted
	TxQueue *int32 `json:"tx_queue,omitempty"`
}

// Protocol used in the communication
type SyscollectorPortsProtocol string

// Communication status
type SyscollectorPortsState string

// SyscollectorProcess defines model for SyscollectorProcess.
type SyscollectorProcess struct {
	// Agent ID
	AgentId *AgentID `json:"agent_id,omitempty"`

	// Process received arguments
	Argvs *string `json:"argvs,omitempty"`

	// Executed command
	Cmd *string `json:"cmd,omitempty"`

	// Effective group
	Egroup *string `json:"egroup,omitempty"`

	// Effective user
	Euser *string `json:"euser,omitempty"`

	// Filesystem group name
	Fgroup *string `json:"fgroup,omitempty"`

	// Process name
	Name *string `json:"name,omitempty"`

	// Nice value of the process
	Nice *int32 `json:"nice,omitempty"`

	// Number of light weight processes
	Nlwp *int32 `json:"nlwp,omitempty"`

	// Process group
	Pgrp *int32 `json:"pgrp,omitempty"`

	// Process PID
	Pid *string `json:"pid,omitempty"`

	// Process parent PID
	Ppid *int32 `json:"ppid,omitempty"`

	// Kernel scheduling priority
	Priority *int32 `json:"priority,omitempty"`

	// Processor number which is running the process
	Processor *int32 `json:"processor,omitempty"`

	// Process resident size in bytes
	Resident *int32 `json:"resident,omitempty"`

	// Real group
	Rgroup *string `json:"rgroup,omitempty"`

	// Real user
	Ruser *string     `json:"ruser,omitempty"`
	Scan  *ScanIdTime `json:"scan,omitempty"`

	// Process session
	Session *int32 `json:"session,omitempty"`

	// Saved-set group
	Sgroup *string `json:"sgroup,omitempty"`

	// Shared memory
	Share *int32 `json:"share,omitempty"`

	// Process size in bytes
	Size *int32 `json:"size,omitempty"`

	// Time when the process started
	StartTime *int64 `json:"start_time,omitempty"`

	// Process state
	State *string `json:"state,omitempty"`

	// Time spent executing system code
	Stime *int32 `json:"stime,omitempty"`

	// Saved-set user
	Suser *string `json:"suser,omitempty"`

	// Thread Group ID
	Tgid *int32 `json:"tgid,omitempty"`

	// Process TTY number
	Tty *int32 `json:"tty,omitempty"`

	// Time spent executing user code
	Utime *int32 `json:"utime,omitempty"`

	// Total VM size (KB)
	VmSize *int32 `json:"vm_size,omitempty"`
}

// SyscollectorProtocol defines model for SyscollectorProtocol.
type SyscollectorProtocol struct {
	// Agent ID
	AgentId *AgentID `json:"agent_id,omitempty"`

	// DHCP status
	Dhcp *DHCPStatus `json:"dhcp,omitempty"`

	// Gateway IP
	Gateway *string `json:"gateway,omitempty"`

	// Network interface name
	Iface *string `json:"iface,omitempty"`

	// Scan ID
	ScanId *int64 `json:"scan_id,omitempty"`

	// Protocol of the interface data
	Type *SyscollectorProtocolType `json:"type,omitempty"`
}

// Protocol of the interface data
type SyscollectorProtocolType string

// Task ID
type TaskId string

// Token defines model for Token.
type Token struct {
	// User's JWT token
	Token *string `json:"token,omitempty"`
}

// User ID
type UserId string

// User ID|all
type UserIdDELETE string

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	// Flag to enable the user to log in using authorization context
	AllowRunAs *bool `json:"allow_run_as,omitempty"`

	// User's id
	Id *int `json:"id,omitempty"`

	// User's roles
	Roles    *[]interface{} `json:"roles,omitempty"`
	Username *string        `json:"username,omitempty"`
}

// ValidationStatus defines model for ValidationStatus.
type ValidationStatus struct {
	// Node name
	Name *string `json:"name,omitempty"`

	// Status value
	Status *string `json:"status,omitempty"`
}

// WazuhAnalysisdStats defines model for WazuhAnalysisdStats.
type WazuhAnalysisdStats struct {
	// Pending to write in disk alerts queue size
	AlertsQueueSize *float32 `json:"alerts_queue_size,omitempty"`

	// If an event matches a rule, an alert is raised. The alerts are pushed to a _pending to write in disk alerts_ queue. This variable shows usage of that queue
	AlertsQueueUsage *float32 `json:"alerts_queue_usage,omitempty"`

	// Total of alerts written in disk during the last 5 seconds
	AlertsWritten *float32 `json:"alerts_written,omitempty"`

	// _Events to write in the archives.log_ queue size
	ArchivesQueueSize *float32 `json:"archives_queue_size,omitempty"`

	// _Events to write in the archives.log_ queue usage
	ArchivesQueueUsage *float32 `json:"archives_queue_usage,omitempty"`

	// Non catalogued events queue size
	EventQueueSize *float32 `json:"event_queue_size,omitempty"`

	// Same as `syscheck_queue_usage` but for events not catalogued in any of the previously mentioned queues
	EventQueueUsage *float32 `json:"event_queue_usage,omitempty"`

	// Discarded events because they didn't match any rule in the ruleset
	EventsDropped *float32 `json:"events_dropped,omitempty"`

	// Same as `events_processed` but per second
	EventsEdps *float32 `json:"events_edps,omitempty"`

	// Total of events processed (i.e. matched against Wazuh ruleset) in the last 5 seconds
	EventsProcessed *float32 `json:"events_processed,omitempty"`

	// Events received in `analysisd` from the rest of modules in the last 5 seconds
	EventsReceived *float32 `json:"events_received,omitempty"`

	// _Events to write in the firewall log_ queue size
	FirewallQueueSize *float32 `json:"firewall_queue_size,omitempty"`

	// Percentage of use in the queue of events to write in the firewall log
	FirewallQueueUsage *float32 `json:"firewall_queue_usage,omitempty"`

	// Same as `alerts_written` but focusing in firewall alerts
	FirewallWritten *float32 `json:"firewall_written,omitempty"`

	// Same as `alerts_written` but focusing in [FTS alerts] (https://documentation.wazuh.com/4.3/user-manual/ruleset/ruleset-xml-syntax/decoders.html?highlight=fts #fts)
	FtsWritten *float32 `json:"fts_written,omitempty"`

	// Hostinfo events decoded per second
	HostinfoEdps *float32 `json:"hostinfo_edps,omitempty"`

	// Same as `total_events_decoded` but for hostinfo events
	HostinfoEventsDecoded *float32 `json:"hostinfo_events_decoded,omitempty"`

	// Hostinfo events queue size
	HostinfoQueueSize *float32 `json:"hostinfo_queue_size,omitempty"`

	// Same as `syscheck_queue_usage` but for hostinfo events
	HostinfoQueueUsage *float32 `json:"hostinfo_queue_usage,omitempty"`

	// Same as `total_events_decoded` but for non catalogued events
	OtherEventsDecoded *float32 `json:"other_events_decoded,omitempty"`

	// Non catalogued events decoded per second
	OtherEventsEdps *float32 `json:"other_events_edps,omitempty"`

	// Rootcheck events decoded per second
	RootcheckEdps *float32 `json:"rootcheck_edps,omitempty"`

	// Same as `total_events_decoded` but for rootcheck events
	RootcheckEventsDecoded *float32 `json:"rootcheck_events_decoded,omitempty"`

	// Rootcheck events queue size
	RootcheckQueueSize *float32 `json:"rootcheck_queue_size,omitempty"`

	// Same as `syscheck_queue_usage` but for rootcheck events
	RootcheckQueueUsage *float32 `json:"rootcheck_queue_usage,omitempty"`

	// Pending to process events queue size
	RuleMatchingQueueSize *float32 `json:"rule_matching_queue_size,omitempty"`

	// After decoding, events are pushed to a _pending to process_ queue which will match the events against the Wazuh ruleset to raise alerts. This variable shows usage of that queue
	RuleMatchingQueueUsage *float32 `json:"rule_matching_queue_usage,omitempty"`

	// Policy monitoring events decoded per second
	ScaEdps *float32 `json:"sca_edps,omitempty"`

	// Same as `total_events_decoded` but for policy monitoring events
	ScaEventsDecoded *float32 `json:"sca_events_decoded,omitempty"`

	// Policy monitoring events queue size
	ScaQueueSize *float32 `json:"sca_queue_size,omitempty"`

	// Same as `syscheck_queue_usage` but for policy monitoring events
	ScaQueueUsage *float32 `json:"sca_queue_usage,omitempty"`

	// Stats log queue size
	StatisticalQueueSize *float32 `json:"statistical_queue_size,omitempty"`

	// Stats log queue usage
	StatisticalQueueUsage *float32 `json:"statistical_queue_usage,omitempty"`

	// FIM events decoded per second (EDPS = Events Decoded Per Second)
	SyscheckEdps *float32 `json:"syscheck_edps,omitempty"`

	// Same as `total_events_decoded` but for FIM events
	SyscheckEventsDecoded *float32 `json:"syscheck_events_decoded,omitempty"`

	// Syscheck events queue size
	SyscheckQueueSize *float32 `json:"syscheck_queue_size,omitempty"`

	// Percentage of use in the syscheck events queue pending to be decoded. Events are discarded when the queue is full
	SyscheckQueueUsage *float32 `json:"syscheck_queue_usage,omitempty"`

	// System inventory events decoded per second
	SyscollectorEdps *float32 `json:"syscollector_edps,omitempty"`

	// Same as `total_events_decoded` but for system inventory events
	SyscollectorEventsDecoded *float32 `json:"syscollector_events_decoded,omitempty"`

	// System inventory events queue size
	SyscollectorQueueSize *float32 `json:"syscollector_queue_size,omitempty"`

	// Same as `syscheck_queue_usage` but for system inventory events
	SyscollectorQueueUsage *float32 `json:"syscollector_queue_usage,omitempty"`

	// Total events decoded in the last 5 seconds. This number is not accumulative, the number in the following 5 seconds can be lower than the previous one
	TotalEventsDecoded *float32 `json:"total_events_decoded,omitempty"`

	// Windows events decoded per second
	WinevtEdps *float32 `json:"winevt_edps,omitempty"`

	// Same as `total_events_decoded` but for Windows events
	WinevtEventsDecoded *float32 `json:"winevt_events_decoded,omitempty"`

	// Windows events queue size
	WinevtQueueSize *float32 `json:"winevt_queue_size,omitempty"`

	// Same as `syscheck_queue_usage` but for Windows events
	WinevtQueueUsage *float32 `json:"winevt_queue_usage,omitempty"`
}

// WazuhAnalysisdStatsAgentsItem defines model for WazuhAnalysisdStatsAgentsItem.
type WazuhAnalysisdStatsAgentsItem struct {
	Agents *[]struct {
		// Agent ID
		Id      *int32 `json:"id,omitempty"`
		Metrics *struct {
			Events *struct {
				// Total processed events (analyzed by rules) from agent
				Processed         *int32 `json:"processed,omitempty"`
				ReceivedBreakdown *struct {
					DecodedBreakdown *struct {
						// Events coming from agentd (this agent)
						Agent *int32 `json:"agent,omitempty"`

						// Synchronization events (this agent)
						Dbsync                *int32 `json:"dbsync,omitempty"`
						IntegrationsBreakdown *struct {
							// Events coming from VirusTotal (this agent)
							Virustotal *int32 `json:"virustotal,omitempty"`
						} `json:"integrations_breakdown,omitempty"`
						ModulesBreakdown *struct {
							// Events coming from AWS module (this agent)
							Aws *int32 `json:"aws,omitempty"`

							// Events coming from Azure module (this agent)
							Azure *int32 `json:"azure,omitempty"`

							// Events coming from CIS-CAT module (this agent)
							Ciscat *int32 `json:"ciscat,omitempty"`

							// Events coming from command module (this agent)
							Command *int32 `json:"command,omitempty"`

							// Events coming from Docker module (this agent)
							Docker *int32 `json:"docker,omitempty"`

							// Events coming from GCP module (this agent)
							Gcp *int32 `json:"gcp,omitempty"`

							// Events coming from GitHub module (this agent)
							Github                *int32 `json:"github,omitempty"`
							LogcollectorBreakdown *struct {
								// EventChannel events collected by logcollector (this agent)
								Eventchannel *int32 `json:"eventchannel,omitempty"`

								// EventLog events collected by logcollector (this agent)
								Eventlog *int32 `json:"eventlog,omitempty"`

								// MacOS events collected by logcollector (this agent)
								Macos *int32 `json:"macos,omitempty"`

								// Other events collected by logcollector (this agent)
								Others *int32 `json:"others,omitempty"`
							} `json:"logcollector_breakdown,omitempty"`

							// Events coming from ms-graph module (this agent)
							MsGraph *int32 `json:"ms-graph,omitempty"`

							// Events coming from Office365 module (this agent)
							Office365 *int32 `json:"office365,omitempty"`

							// Events coming from OSCAP module (this agent)
							Oscap *int32 `json:"oscap,omitempty"`

							// Events coming from OSQuery module (this agent)
							Osquery *int32 `json:"osquery,omitempty"`

							// Events coming from rootcheck (syscheckd) (this agent)
							Rootcheck *int32 `json:"rootcheck,omitempty"`

							// Events coming from SCA module (this agent)
							Sca *int32 `json:"sca,omitempty"`

							// Events coming from syscheckd (this agent)
							Syscheck *int32 `json:"syscheck,omitempty"`

							// Events coming from syscollector module (this agent)
							Syscollector *int32 `json:"syscollector,omitempty"`

							// Events coming from upgrade agent module (this agent)
							Upgrade *int32 `json:"upgrade,omitempty"`
						} `json:"modules_breakdown,omitempty"`

						// Events coming from monitord (this agent)
						Monitor *int32 `json:"monitor,omitempty"`

						// Events coming from remoted (this agent)
						Remote *int32 `json:"remote,omitempty"`
					} `json:"decoded_breakdown,omitempty"`
				} `json:"received_breakdown,omitempty"`
				WrittenBreakdown *struct {
					// Alerts written in alerts log file (this agent)
					Alerts *int32 `json:"alerts,omitempty"`

					// Alerts written in archives log file (this agent)
					Archives *int32 `json:"archives,omitempty"`

					// Alerts written in firewall log file (this agent)
					Firewall *int32 `json:"firewall,omitempty"`
				} `json:"written_breakdown,omitempty"`
			} `json:"events,omitempty"`
		} `json:"metrics,omitempty"`

		// When the count of the metrics started
		Uptime *time.Time `json:"uptime,omitempty"`
	} `json:"agents,omitempty"`

	// Daemon name
	Name *WazuhAnalysisdStatsAgentsItemName `json:"name,omitempty"`

	// Daemon stats request time
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// Daemon name
type WazuhAnalysisdStatsAgentsItemName string

// WazuhAnalysisdStatsItem defines model for WazuhAnalysisdStatsItem.
type WazuhAnalysisdStatsItem struct {
	Metrics *struct {
		Bytes *struct {
			// Bytes received from agents and local modules
			Received *int32 `json:"received,omitempty"`
		} `json:"bytes,omitempty"`
		Eps *struct {
			// Available credits to process events in the current timeframe
			AvailableCredits *int32 `json:"available_credits,omitempty"`

			// Available credits to process events in the previous timeframe
			AvailableCreditsPrev *int32 `json:"available_credits_prev,omitempty"`

			// Events discarded because the EPS limit was reached and queues were full
			EventsDropped *int32 `json:"events_dropped,omitempty"`

			// Events discarded due to causes unrelated to EPS limit
			EventsDroppedNotEps *int32 `json:"events_dropped_not_eps,omitempty"`

			// Time in seconds the EPS limit was exceeded
			SecondsOverLimit *int32 `json:"seconds_over_limit,omitempty"`
		} `json:"eps,omitempty"`
		Events *struct {
			// Total processed events (analyzed by rules)
			Processed *int32 `json:"processed,omitempty"`

			// Total received events from agents and local modules
			Received          *int32 `json:"received,omitempty"`
			ReceivedBreakdown *struct {
				DecodedBreakdown *struct {
					// Events coming from agentd
					Agent *int32 `json:"agent,omitempty"`

					// Events coming from agentlessd
					Agentless *int32 `json:"agentless,omitempty"`

					// Synchronization events
					Dbsync                *int32 `json:"dbsync,omitempty"`
					IntegrationsBreakdown *struct {
						// Events coming from VirusTotal integration
						Virustotal *int32 `json:"virustotal,omitempty"`
					} `json:"integrations_breakdown,omitempty"`
					ModulesBreakdown *struct {
						// Events coming from AWS module
						Aws *int32 `json:"aws,omitempty"`

						// Events coming from Azure module
						Azure *int32 `json:"azure,omitempty"`

						// Events coming from CIS-CAT module
						Ciscat *int32 `json:"ciscat,omitempty"`

						// Events coming from command module
						Command *int32 `json:"command,omitempty"`

						// Events coming from Docker module
						Docker *int32 `json:"docker,omitempty"`

						// Events coming from GCP module
						Gcp *int32 `json:"gcp,omitempty"`

						// Events coming from GitHub module
						Github                *int32 `json:"github,omitempty"`
						LogcollectorBreakdown *struct {
							// EventChannel events collected by logcollector
							Eventchannel *int32 `json:"eventchannel,omitempty"`

							// EventLog events collected by logcollector
							Eventlog *int32 `json:"eventlog,omitempty"`

							// MacOS events collected by logcollector
							Macos *int32 `json:"macos,omitempty"`

							// Other events collected by logcollector
							Others *int32 `json:"others,omitempty"`
						} `json:"logcollector_breakdown,omitempty"`

						// Events coming from ms-graph module
						MsGraph *int32 `json:"ms-graph,omitempty"`

						// Events coming from Office365 module
						Office365 *int32 `json:"office365,omitempty"`

						// Events coming from OSCAP module
						Oscap *int32 `json:"oscap,omitempty"`

						// Events coming from OSQuery module
						Osquery *int32 `json:"osquery,omitempty"`

						// Events coming from rootcheck (syscheckd)
						Rootcheck *int32 `json:"rootcheck,omitempty"`

						// Events coming from SCA module
						Sca *int32 `json:"sca,omitempty"`

						// Events coming from syscheckd
						Syscheck *int32 `json:"syscheck,omitempty"`

						// Events coming from syscollector module
						Syscollector *int32 `json:"syscollector,omitempty"`

						// Events coming from upgrade agent module (upgrade responses)
						Upgrade *int32 `json:"upgrade,omitempty"`
					} `json:"modules_breakdown,omitempty"`

					// Events coming from monitord
					Monitor *int32 `json:"monitor,omitempty"`

					// Events coming from remoted
					Remote *int32 `json:"remote,omitempty"`

					// Events coming from syslog remoted
					Syslog *int32 `json:"syslog,omitempty"`
				} `json:"decoded_breakdown,omitempty"`
				DroppedBreakdown *struct {
					// Events discarded from agentd because the queue was full
					Agent *int32 `json:"agent,omitempty"`

					// Events discarded from agentlessd because the queue was full
					Agentless *int32 `json:"agentless,omitempty"`

					// Synchronization events discarded because the queue was full
					Dbsync                *int32 `json:"dbsync,omitempty"`
					IntegrationsBreakdown *struct {
						// Events discarded from VirusTotal integration because the queue was full
						Virustotal *int32 `json:"virustotal,omitempty"`
					} `json:"integrations_breakdown,omitempty"`
					ModulesBreakdown *struct {
						// Events discarded from AWS module because the queue was full
						Aws *int32 `json:"aws,omitempty"`

						// Events discarded from Azure module because the queue was full
						Azure *int32 `json:"azure,omitempty"`

						// Events discarded from CIS-CAT module because the queue was full
						Ciscat *int32 `json:"ciscat,omitempty"`

						// Events discarded from command module because the queue was full
						Command *int32 `json:"command,omitempty"`

						// Events discarded from Docker module because the queue was full
						Docker *int32 `json:"docker,omitempty"`

						// Events discarded from GCP module because the queue was full
						Gcp *int32 `json:"gcp,omitempty"`

						// Events discarded from GitHub module because the queue was full
						Github                *int32 `json:"github,omitempty"`
						LogcollectorBreakdown *struct {
							// EventChannel events collected by logcollector discarded because the queue was full
							Eventchannel *int32 `json:"eventchannel,omitempty"`

							// EventLog events collected by logcollector discarded because the queue was full
							Eventlog *int32 `json:"eventlog,omitempty"`

							// MacOS events collected by logcollector discarded because the queue was full
							Macos *int32 `json:"macos,omitempty"`

							// Other events collected by logcollector discarded because the queue was full
							Others *int32 `json:"others,omitempty"`
						} `json:"logcollector_breakdown,omitempty"`

						// Events discarded from ms-graph module because the queue was full
						MsGraph *int32 `json:"ms-graph,omitempty"`

						// Events discarded from Office365 module because the queue was full
						Office365 *int32 `json:"office365,omitempty"`

						// Events discarded from OSCAP module because the queue was full
						Oscap *int32 `json:"oscap,omitempty"`

						// Events discarded from OSQuery module because the queue was full
						Osquery *int32 `json:"osquery,omitempty"`

						// Events discarded from rootcheck (syscheckd) because the queue was full
						Rootcheck *int32 `json:"rootcheck,omitempty"`

						// Events discarded from SCA module because the queue was full
						Sca *int32 `json:"sca,omitempty"`

						// Events discarded from syscheckd because the queue was full
						Syscheck *int32 `json:"syscheck,omitempty"`

						// Events discarded from syscollector module because the queue was full
						Syscollector *int32 `json:"syscollector,omitempty"`

						// Events discarded from upgrade agent module because the queue was full
						Upgrade *int32 `json:"upgrade,omitempty"`
					} `json:"modules_breakdown,omitempty"`

					// Events discarded from monitord because the queue was full
					Monitor *int32 `json:"monitor,omitempty"`

					// Events discarded from remoted because the queue was full
					Remote *int32 `json:"remote,omitempty"`

					// Events discarded from syslog remoted because the queue was full
					Syslog *int32 `json:"syslog,omitempty"`
				} `json:"dropped_breakdown,omitempty"`
			} `json:"received_breakdown,omitempty"`
			WrittenBreakdown *struct {
				// Alerts written in alerts log file
				Alerts *int32 `json:"alerts,omitempty"`

				// Alerts written in archives log file
				Archives *int32 `json:"archives,omitempty"`

				// Alerts written in firewall log file
				Firewall *int32 `json:"firewall,omitempty"`

				// Alerts written in FTS queue file
				Fts *int32 `json:"fts,omitempty"`

				// Alerts written in stats files
				Stats *int32 `json:"stats,omitempty"`
			} `json:"written_breakdown,omitempty"`
		} `json:"events,omitempty"`
		Queues *struct {
			Alerts *struct {
				// Size of alerts messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the alerts queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"alerts,omitempty"`
			Archives *struct {
				// Size of archives messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the archives queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"archives,omitempty"`
			Dbsync *struct {
				// Size of dbsync messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the dbsync queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"dbsync,omitempty"`
			Eventchannel *struct {
				// Size of eventchannel messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the eventchannel queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"eventchannel,omitempty"`
			Firewall *struct {
				// Size of firewall messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the firewall queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"firewall,omitempty"`
			Fts *struct {
				// Size of FTS messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the FTS queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"fts,omitempty"`
			Hostinfo *struct {
				// Size of hostinfo messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the hostinfo queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"hostinfo,omitempty"`
			Others *struct {
				// Size of other events messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the other events queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"others,omitempty"`
			Processed *struct {
				// Size of processed messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the processed queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"processed,omitempty"`
			Rootcheck *struct {
				// Size of rootcheck messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the rootcheck queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"rootcheck,omitempty"`
			Sca *struct {
				// Size of SCA messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the SCA queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"sca,omitempty"`
			Stats *struct {
				// Size of stats messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the stats queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"stats,omitempty"`
			Syscheck *struct {
				// Size of syscheck messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the syscheck queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"syscheck,omitempty"`
			Syscollector *struct {
				// Size of syscollector messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the syscollector queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"syscollector,omitempty"`
			Upgrade *struct {
				// Size of upgrade messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the upgrade queue (percentage)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"upgrade,omitempty"`
		} `json:"queues,omitempty"`
	} `json:"metrics,omitempty"`

	// Daemon name
	Name *WazuhAnalysisdStatsItemName `json:"name,omitempty"`

	// Daemon stats request time
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// When the count of the metrics started
	Uptime *time.Time `json:"uptime,omitempty"`
}

// Daemon name
type WazuhAnalysisdStatsItemName string

// WazuhDBStatsItem defines model for WazuhDBStatsItem.
type WazuhDBStatsItem struct {
	Metrics *struct {
		Queries *struct {
			// Total of queries through WazuhDB socket
			Received          *int32 `json:"received,omitempty"`
			ReceivedBreakdown *struct {
				// Number of agent queries through WazuhDB socket
				Agent          *int32 `json:"agent,omitempty"`
				AgentBreakdown *struct {
					// Number of queries per operation
					Db *struct {
						Begin  *int32 `json:"begin,omitempty"`
						Close  *int32 `json:"close,omitempty"`
						Commit *int32 `json:"commit,omitempty"`
						Remove *int32 `json:"remove,omitempty"`
						Sql    *int32 `json:"sql,omitempty"`
					} `json:"db,omitempty"`

					// Number of queries per table
					Tables *struct {
						Ciscat *struct {
							Ciscat *int32 `json:"ciscat,omitempty"`
						} `json:"ciscat,omitempty"`
						Rootcheck *struct {
							Rootcheck *int32 `json:"rootcheck,omitempty"`
						} `json:"rootcheck,omitempty"`
						Sca *struct {
							Sca *int32 `json:"sca,omitempty"`
						} `json:"sca,omitempty"`
						Sync *struct {
							Dbsync *int32 `json:"dbsync,omitempty"`
						} `json:"sync,omitempty"`
						Syscheck *struct {
							FimFile          *int32 `json:"fim_file,omitempty"`
							FimRegistry      *int32 `json:"fim_registry,omitempty"`
							FimRegistryKey   *int32 `json:"fim_registry_key,omitempty"`
							FimRegistryValue *int32 `json:"fim_registry_value,omitempty"`
							Syscheck         *int32 `json:"syscheck,omitempty"`
						} `json:"syscheck,omitempty"`
						Syscollector *struct {
							Deprecated *struct {
								Hardware *int32 `json:"hardware,omitempty"`
								Hotfix   *int32 `json:"hotfix,omitempty"`
								Netaddr  *int32 `json:"netaddr,omitempty"`
								Netinfo  *int32 `json:"netinfo,omitempty"`
								Netproto *int32 `json:"netproto,omitempty"`
								Osinfo   *int32 `json:"osinfo,omitempty"`
								Package  *int32 `json:"package,omitempty"`
								Port     *int32 `json:"port,omitempty"`
								Process  *int32 `json:"process,omitempty"`
							} `json:"deprecated,omitempty"`
							SyscollectorHotfixes        *int32 `json:"syscollector_hotfixes,omitempty"`
							SyscollectorHwinfo          *int32 `json:"syscollector_hwinfo,omitempty"`
							SyscollectorNetworkAddress  *int32 `json:"syscollector_network_address,omitempty"`
							SyscollectorNetworkIface    *int32 `json:"syscollector_network_iface,omitempty"`
							SyscollectorNetworkProtocol *int32 `json:"syscollector_network_protocol,omitempty"`
							SyscollectorOsinfo          *int32 `json:"syscollector_osinfo,omitempty"`
							SyscollectorPackages        *int32 `json:"syscollector_packages,omitempty"`
							SyscollectorPorts           *int32 `json:"syscollector_ports,omitempty"`
							SyscollectorProcesses       *int32 `json:"syscollector_processes,omitempty"`
						} `json:"syscollector,omitempty"`
					} `json:"tables,omitempty"`
				} `json:"agent_breakdown,omitempty"`

				// Number of global queries through WazuhDB socket
				Global          *int32 `json:"global,omitempty"`
				GlobalBreakdown *struct {
					// Number of queries per operation
					Db *struct {
						Backup *int32 `json:"backup,omitempty"`
						Sql    *int32 `json:"sql,omitempty"`
					} `json:"db,omitempty"`

					// Number of queries per operation in tables
					Tables *struct {
						Agent *struct {
							DeleteAgent                 *int32 `json:"delete-agent,omitempty"`
							DisconnectAgents            *int32 `json:"disconnect-agents,omitempty"`
							FindAgent                   *int32 `json:"find-agent,omitempty"`
							GetAgentInfo                *int32 `json:"get-agent-info,omitempty"`
							GetAgentsByConnectionStatus *int32 `json:"get-agents-by-connection-status,omitempty"`
							GetAllAgents                *int32 `json:"get-all-agents,omitempty"`
							GetGroupsIntegrity          *int32 `json:"get-groups-integrity,omitempty"`
							InsertAgent                 *int32 `json:"insert-agent,omitempty"`
							ResetAgentsConnection       *int32 `json:"reset-agents-connection,omitempty"`
							SelectAgentGroup            *int32 `json:"select-agent-group,omitempty"`
							SelectAgentName             *int32 `json:"select-agent-name,omitempty"`
							SetAgentGroups              *int32 `json:"set-agent-groups,omitempty"`
							SyncAgentGroupsGet          *int32 `json:"sync-agent-groups-get,omitempty"`
							SyncAgentInfoGet            *int32 `json:"sync-agent-info-get,omitempty"`
							SyncAgentInfoSet            *int32 `json:"sync-agent-info-set",omitempty"`
							UpdateAgentData             *int32 `json:"update-agent-data,omitempty"`
							UpdateAgentName             *int32 `json:"update-agent-name,omitempty"`
							UpdateConnectionStatus      *int32 `json:"update-connection-status,omitempty"`
							UpdateKeepalive             *int32 `json:"update-keepalive,omitempty"`
						} `json:"agent,omitempty"`
						Belongs *struct {
							GetGroupAgents    *int32 `json:"get-group-agents,omitempty"`
							SelectGroupBelong *int32 `json:"select-group-belong,omitempty"`
						} `json:"belongs,omitempty"`
						Group *struct {
							DeleteGroup      *int32 `json:"delete-group,omitempty"`
							FindGroup        *int32 `json:"find-group,omitempty"`
							InsertAgentGroup *int32 `json:"insert-agent-group,omitempty"`
							SelectGroups     *int32 `json:"select-groups,omitempty"`
						} `json:"group,omitempty"`
						Labels *struct {
							GetLabels *int32 `json:"get-labels,omitempty"`
						} `json:"labels,omitempty"`
					} `json:"tables,omitempty"`
				} `json:"global_breakdown,omitempty"`

				// Number of mitre queries through WazuhDB socket
				Mitre          *int32 `json:"mitre,omitempty"`
				MitreBreakdown *struct {
					// Number of queries per operation
					Db *struct {
						Sql *int32 `json:"sql,omitempty"`
					} `json:"db,omitempty"`
				} `json:"mitre_breakdown,omitempty"`

				// Number of task queries through WazuhDB socket
				Task          *int32 `json:"task,omitempty"`
				TaskBreakdown *struct {
					// Number of queries per operation
					Db *struct {
						Sql *int32 `json:"sql,omitempty"`
					} `json:"db,omitempty"`

					// Number of queries per operation in tables
					Tables *struct {
						Tasks *struct {
							DeleteOld           *int32 `json:"delete_old,omitempty"`
							SetTimeout          *int32 `json:"set_timeout,omitempty"`
							Upgrade             *int32 `json:"upgrade,omitempty"`
							UpgradeCancelTasks  *int32 `json:"upgrade_cancel_tasks,omitempty"`
							UpgradeCustom       *int32 `json:"upgrade_custom,omitempty"`
							UpgradeGetStatus    *int32 `json:"upgrade_get_status,omitempty"`
							UpgradeResult       *int32 `json:"upgrade_result,omitempty"`
							UpgradeUpdateStatus *int32 `json:"upgrade_update_status,omitempty"`
						} `json:"tasks,omitempty"`
					} `json:"tables,omitempty"`
				} `json:"task_breakdown,omitempty"`

				// Number of wazuhdb queries through WazuhDB socket
				Wazuhdb          *int32 `json:"wazuhdb,omitempty"`
				WazuhdbBreakdown *struct {
					// Number of queries per operation
					Db *struct {
						Remove *int32 `json:"remove,omitempty"`
					} `json:"db,omitempty"`
				} `json:"wazuhdb_breakdown,omitempty"`
			} `json:"received_breakdown,omitempty"`
		} `json:"queries,omitempty"`
		Time *struct {
			// Total time taken by all the queries (milliseconds)
			Execution          *int32 `json:"execution,omitempty"`
			ExecutionBreakdown *struct {
				// Time taken by all agent queries (milliseconds)
				Agent          *int32 `json:"agent,omitempty"`
				AgentBreakdown *struct {
					// Time taken by all queries per operation (milliseconds)
					Db *struct {
						Begin  *int32 `json:"begin,omitempty"`
						Close  *int32 `json:"close,omitempty"`
						Commit *int32 `json:"commit,omitempty"`
						Remove *int32 `json:"remove,omitempty"`
						Sql    *int32 `json:"sql,omitempty"`
					} `json:"db,omitempty"`

					// Time taken by all queries per table (milliseconds)
					Tables *struct {
						Ciscat *struct {
							Ciscat *int32 `json:"ciscat,omitempty"`
						} `json:"ciscat,omitempty"`
						Rootcheck *struct {
							Rootcheck *int32 `json:"rootcheck,omitempty"`
						} `json:"rootcheck,omitempty"`
						Sca *struct {
							Sca *int32 `json:"sca,omitempty"`
						} `json:"sca,omitempty"`
						Sync *struct {
							Dbsync *int32 `json:"dbsync,omitempty"`
						} `json:"sync,omitempty"`
						Syscheck *struct {
							FimFile          *int32 `json:"fim_file,omitempty"`
							FimRegistry      *int32 `json:"fim_registry,omitempty"`
							FimRegistryKey   *int32 `json:"fim_registry_key,omitempty"`
							FimRegistryValue *int32 `json:"fim_registry_value,omitempty"`
							Syscheck         *int32 `json:"syscheck,omitempty"`
						} `json:"syscheck,omitempty"`
						Syscollector *struct {
							Deprecated *struct {
								Hardware *int32 `json:"hardware,omitempty"`
								Hotfix   *int32 `json:"hotfix,omitempty"`
								Netaddr  *int32 `json:"netaddr,omitempty"`
								Netinfo  *int32 `json:"netinfo,omitempty"`
								Netproto *int32 `json:"netproto,omitempty"`
								Osinfo   *int32 `json:"osinfo,omitempty"`
								Package  *int32 `json:"package,omitempty"`
								Port     *int32 `json:"port,omitempty"`
								Process  *int32 `json:"process,omitempty"`
							} `json:"deprecated,omitempty"`
							SyscollectorHotfixes        *int32 `json:"syscollector_hotfixes,omitempty"`
							SyscollectorHwinfo          *int32 `json:"syscollector_hwinfo,omitempty"`
							SyscollectorNetworkAddress  *int32 `json:"syscollector_network_address,omitempty"`
							SyscollectorNetworkIface    *int32 `json:"syscollector_network_iface,omitempty"`
							SyscollectorNetworkProtocol *int32 `json:"syscollector_network_protocol,omitempty"`
							SyscollectorOsinfo          *int32 `json:"syscollector_osinfo,omitempty"`
							SyscollectorPackages        *int32 `json:"syscollector_packages,omitempty"`
							SyscollectorPorts           *int32 `json:"syscollector_ports,omitempty"`
							SyscollectorProcesses       *int32 `json:"syscollector_processes,omitempty"`
						} `json:"syscollector,omitempty"`
					} `json:"tables,omitempty"`
				} `json:"agent_breakdown,omitempty"`

				// Time taken by all global queries (milliseconds)
				Global          *int32 `json:"global,omitempty"`
				GlobalBreakdown *struct {
					// Time taken by all queries per operation (milliseconds)
					Db *struct {
						Backup *int32 `json:"backup,omitempty"`
						Sql    *int32 `json:"sql,omitempty"`
					} `json:"db,omitempty"`

					// Time taken by all queries per operation in tables (milliseconds)
					Tables *struct {
						Agent *struct {
							DeleteAgent                 *int32 `json:"delete-agent,omitempty"`
							DisconnectAgents            *int32 `json:"disconnect-agents,omitempty"`
							FindAgent                   *int32 `json:"find-agent,omitempty"`
							GetAgentInfo                *int32 `json:"get-agent-info,omitempty"`
							GetAgentsByConnectionStatus *int32 `json:"get-agents-by-connection-status,omitempty"`
							GetAllAgents                *int32 `json:"get-all-agents,omitempty"`
							GetGroupsIntegrity          *int32 `json:"get-groups-integrity,omitempty"`
							InsertAgent                 *int32 `json:"insert-agent,omitempty"`
							ResetAgentsConnection       *int32 `json:"reset-agents-connection,omitempty"`
							SelectAgentGroup            *int32 `json:"select-agent-group,omitempty"`
							SelectAgentName             *int32 `json:"select-agent-name,omitempty"`
							SetAgentGroups              *int32 `json:"set-agent-groups,omitempty"`
							SyncAgentGroupsGet          *int32 `json:"sync-agent-groups-get,omitempty"`
							SyncAgentInfoGet            *int32 `json:"sync-agent-info-get,omitempty"`
							SyncAgentInfoSet            *int32 `json:"sync-agent-info-set",omitempty"`
							UpdateAgentData             *int32 `json:"update-agent-data,omitempty"`
							UpdateAgentName             *int32 `json:"update-agent-name,omitempty"`
							UpdateConnectionStatus      *int32 `json:"update-connection-status,omitempty"`
							UpdateKeepalive             *int32 `json:"update-keepalive,omitempty"`
						} `json:"agent,omitempty"`
						Belongs *struct {
							GetGroupAgents    *int32 `json:"get-group-agents,omitempty"`
							SelectGroupBelong *int32 `json:"select-group-belong,omitempty"`
						} `json:"belongs,omitempty"`
						Group *struct {
							DeleteGroup      *int32 `json:"delete-group,omitempty"`
							FindGroup        *int32 `json:"find-group,omitempty"`
							InsertAgentGroup *int32 `json:"insert-agent-group,omitempty"`
							SelectGroups     *int32 `json:"select-groups,omitempty"`
						} `json:"group,omitempty"`
						Labels *struct {
							GetLabels *int32 `json:"get-labels,omitempty"`
						} `json:"labels,omitempty"`
					} `json:"tables,omitempty"`
				} `json:"global_breakdown,omitempty"`

				// Time taken by all mitre queries (milliseconds)
				Mitre          *int32 `json:"mitre,omitempty"`
				MitreBreakdown *struct {
					// Time taken by all queries per operation (milliseconds)
					Db *struct {
						Sql *int32 `json:"sql,omitempty"`
					} `json:"db,omitempty"`
				} `json:"mitre_breakdown,omitempty"`

				// Time taken by all task queries (milliseconds)
				Task          *int32 `json:"task,omitempty"`
				TaskBreakdown *struct {
					// Time taken by all queries per operation (milliseconds)
					Db *struct {
						Sql *int32 `json:"sql,omitempty"`
					} `json:"db,omitempty"`

					// Time taken by all queries per operation in tables (milliseconds)
					Tables *struct {
						Tasks *struct {
							DeleteOld           *int32 `json:"delete_old,omitempty"`
							SetTimeout          *int32 `json:"set_timeout,omitempty"`
							Upgrade             *int32 `json:"upgrade,omitempty"`
							UpgradeCancelTasks  *int32 `json:"upgrade_cancel_tasks,omitempty"`
							UpgradeCustom       *int32 `json:"upgrade_custom,omitempty"`
							UpgradeGetStatus    *int32 `json:"upgrade_get_status,omitempty"`
							UpgradeResult       *int32 `json:"upgrade_result,omitempty"`
							UpgradeUpdateStatus *int32 `json:"upgrade_update_status,omitempty"`
						} `json:"tasks,omitempty"`
					} `json:"tables,omitempty"`
				} `json:"task_breakdown,omitempty"`

				// Time taken by all wazuhdb queries (milliseconds)
				Wazuhdb          *int32 `json:"wazuhdb,omitempty"`
				WazuhdbBreakdown *struct {
					// Time taken by all queries per operation (milliseconds)
					Db *struct {
						Remove *int32 `json:"remove,omitempty"`
					} `json:"db,omitempty"`
				} `json:"wazuhdb_breakdown,omitempty"`
			} `json:"execution_breakdown,omitempty"`
		} `json:"time,omitempty"`
	} `json:"metrics,omitempty"`

	// Daemon name
	Name *WazuhDBStatsItemName `json:"name,omitempty"`

	// Daemon stats request time
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// When the count of the metrics started
	Uptime *time.Time `json:"uptime,omitempty"`
}

// Daemon name
type WazuhDBStatsItemName string

// WazuhDaemonsStatus defines model for WazuhDaemonsStatus.
type WazuhDaemonsStatus struct {
	WazuhAgentlessd   *DaemonStatus `json:"wazuh-agentlessd,omitempty"`
	WazuhAnalysisd    *DaemonStatus `json:"wazuh-analysisd,omitempty"`
	WazuhApid         *DaemonStatus `json:"wazuh-apid,omitempty"`
	WazuhAuthd        *DaemonStatus `json:"wazuh-authd,omitempty"`
	WazuhClusterd     *DaemonStatus `json:"wazuh-clusterd,omitempty"`
	WazuhCsyslogd     *DaemonStatus `json:"wazuh-csyslogd,omitempty"`
	WazuhDb           *DaemonStatus `json:"wazuh-db,omitempty"`
	WazuhDbd          *DaemonStatus `json:"wazuh-dbd,omitempty"`
	WazuhExecd        *DaemonStatus `json:"wazuh-execd,omitempty"`
	WazuhIntegratord  *DaemonStatus `json:"wazuh-integratord,omitempty"`
	WazuhLogcollector *DaemonStatus `json:"wazuh-logcollector,omitempty"`
	WazuhMaild        *DaemonStatus `json:"wazuh-maild,omitempty"`
	WazuhModulesd     *DaemonStatus `json:"wazuh-modulesd,omitempty"`
	WazuhMonitord     *DaemonStatus `json:"wazuh-monitord,omitempty"`
	WazuhRemoted      *DaemonStatus `json:"wazuh-remoted,omitempty"`
	WazuhReportd      *DaemonStatus `json:"wazuh-reportd,omitempty"`
	WazuhSyscheckd    *DaemonStatus `json:"wazuh-syscheckd,omitempty"`
}

// WazuhHourlyStats defines model for WazuhHourlyStats.
type WazuhHourlyStats struct {
	// Array containing the number of alerts for every hour
	Averages     *[]int `json:"averages,omitempty"`
	Interactions *int32 `json:"interactions,omitempty"`
}

// WazuhInfo defines model for WazuhInfo.
type WazuhInfo struct {
	CompilationDate *time.Time `json:"compilation_date,omitempty"`

	// Maximum number of agents that can be registered.
	MaxAgents      *string `json:"max_agents,omitempty"`
	OpensslSupport *string `json:"openssl_support,omitempty"`

	// Wazuh installation path
	Path *string `json:"path,omitempty"`

	// Wazuh installation type
	Type     *WazuhInfoType `json:"type,omitempty"`
	TzName   *string        `json:"tz_name,omitempty"`
	TzOffset *string        `json:"tz_offset,omitempty"`

	// Wazuh version
	Version *string `json:"version,omitempty"`
}

// Wazuh installation type
type WazuhInfoType string

// WazuhLogs defines model for WazuhLogs.
type WazuhLogs struct {
	// Log message
	Description *string `json:"description,omitempty"`

	// Log level
	Level *WazuhLogsLevel `json:"level,omitempty"`

	// Wazuh component that logged the event
	Tag       *WazuhLogsTag `json:"tag,omitempty"`
	Timestamp *time.Time    `json:"timestamp,omitempty"`
}

// Log level
type WazuhLogsLevel string

// Wazuh component that logged the event
type WazuhLogsTag string

// WazuhLogsSummary defines model for WazuhLogsSummary.
type WazuhLogsSummary struct {
	IndexerConnector                  *LogSummary `json:"indexer-connector,omitempty"`
	Rootcheck                         *LogSummary `json:"rootcheck,omitempty"`
	Sca                               *LogSummary `json:"sca,omitempty"`
	WazuhAgentlessd                   *LogSummary `json:"wazuh-agentlessd,omitempty"`
	WazuhAnalysisd                    *LogSummary `json:"wazuh-analysisd,omitempty"`
	WazuhAuthd                        *LogSummary `json:"wazuh-authd,omitempty"`
	WazuhCsyslogd                     *LogSummary `json:"wazuh-csyslogd,omitempty"`
	WazuhDb                           *LogSummary `json:"wazuh-db,omitempty"`
	WazuhDbd                          *LogSummary `json:"wazuh-dbd,omitempty"`
	WazuhExecd                        *LogSummary `json:"wazuh-execd,omitempty"`
	WazuhIntegratord                  *LogSummary `json:"wazuh-integratord,omitempty"`
	WazuhLogcollector                 *LogSummary `json:"wazuh-logcollector,omitempty"`
	WazuhMaild                        *LogSummary `json:"wazuh-maild,omitempty"`
	WazuhModulesd                     *LogSummary `json:"wazuh-modulesd,omitempty"`
	WazuhModulesdAgentUpgrade         *LogSummary `json:"wazuh-modulesd:agent-upgrade,omitempty"`
	WazuhModulesdAwsS3                *LogSummary `json:"wazuh-modulesd:aws-s3,omitempty"`
	WazuhModulesdAzureLogs            *LogSummary `json:"wazuh-modulesd:azure-logs,omitempty"`
	WazuhModulesdCiscat               *LogSummary `json:"wazuh-modulesd:ciscat,omitempty"`
	WazuhModulesdCommand              *LogSummary `json:"wazuh-modulesd:command,omitempty"`
	WazuhModulesdContentManager       *LogSummary `json:"wazuh-modulesd:content_manager,omitempty"`
	WazuhModulesdControl              *LogSummary `json:"wazuh-modulesd:control,omitempty"`
	WazuhModulesdDatabase             *LogSummary `json:"wazuh-modulesd:database,omitempty"`
	WazuhModulesdDockerListener       *LogSummary `json:"wazuh-modulesd:docker-listener,omitempty"`
	WazuhModulesdDownload             *LogSummary `json:"wazuh-modulesd:download,omitempty"`
	WazuhModulesdOscap                *LogSummary `json:"wazuh-modulesd:oscap,omitempty"`
	WazuhModulesdOsquery              *LogSummary `json:"wazuh-modulesd:osquery,omitempty"`
	WazuhModulesdSyscollector         *LogSummary `json:"wazuh-modulesd:syscollector,omitempty"`
	WazuhModulesdTaskManager          *LogSummary `json:"wazuh-modulesd:task-manager,omitempty"`
	WazuhModulesdVulnerabilityScanner *LogSummary `json:"wazuh-modulesd:vulnerability-scanner,omitempty"`
	WazuhMonitord                     *LogSummary `json:"wazuh-monitord,omitempty"`
	WazuhRemoted                      *LogSummary `json:"wazuh-remoted,omitempty"`
	WazuhReportd                      *LogSummary `json:"wazuh-reportd,omitempty"`
	WazuhSyscheckd                    *LogSummary `json:"wazuh-syscheckd,omitempty"`
}

// WazuhManagerConfiguration defines model for WazuhManagerConfiguration.
type WazuhManagerConfiguration struct {
	ActiveResponse *[]map[string]interface{} `json:"active-response,omitempty"`
	Agentless      *[]map[string]interface{} `json:"agentless,omitempty"`
	Alerts         *map[string]interface{}   `json:"alerts,omitempty"`
	Auth           *map[string]interface{}   `json:"auth,omitempty"`
	AwsS3          *map[string]interface{}   `json:"aws-s3,omitempty"`
	AzureLogs      *map[string]interface{}   `json:"azure-logs,omitempty"`
	CisCat         *map[string]interface{}   `json:"cis-cat,omitempty"`
	Cluster        *map[string]interface{}   `json:"cluster,omitempty"`
	Command        *[]map[string]interface{} `json:"command,omitempty"`
	DatabaseOutput *map[string]interface{}   `json:"database_output,omitempty"`
	DockerListener *map[string]interface{}   `json:"docker-listener,omitempty"`
	EmailAlerts    *map[string]interface{}   `json:"email_alerts,omitempty"`
	GcpPubsub      *map[string]interface{}   `json:"gcp-pubsub,omitempty"`
	Global         *map[string]interface{}   `json:"global,omitempty"`
	Integration    *[]map[string]interface{} `json:"integration,omitempty"`
	Labels         *map[string]interface{}   `json:"labels,omitempty"`
	Localfile      *[]map[string]interface{} `json:"localfile,omitempty"`
	Logging        *map[string]interface{}   `json:"logging,omitempty"`
	OpenScap       *map[string]interface{}   `json:"open-scap,omitempty"`
	Osquery        *map[string]interface{}   `json:"osquery,omitempty"`
	Remote         *[]map[string]interface{} `json:"remote,omitempty"`
	Reports        *map[string]interface{}   `json:"reports,omitempty"`
	Rootcheck      *map[string]interface{}   `json:"rootcheck,omitempty"`
	Ruleset        *map[string]interface{}   `json:"ruleset,omitempty"`
	Sca            *map[string]interface{}   `json:"sca,omitempty"`
	Socket         *map[string]interface{}   `json:"socket,omitempty"`
	Syscheck       *map[string]interface{}   `json:"syscheck,omitempty"`
	Syscollector   *map[string]interface{}   `json:"syscollector,omitempty"`
	SyslogOutput   *[]map[string]interface{} `json:"syslog_output,omitempty"`
}

// WazuhRemotedStats defines model for WazuhRemotedStats.
type WazuhRemotedStats struct {
	// Number of control messages received from all agents during the last five seconds
	CtrlMsgCount *float32 `json:"ctrl_msg_count,omitempty"`

	// Number of discarded events received from agents during the last five seconds
	DiscardedCount *float32 `json:"discarded_count,omitempty"`

	// Number of events sent to analysisd during the last five seconds
	EvtCount *float32 `json:"evt_count,omitempty"`

	// Usage of the queue to storage events from agents
	QueueSize *float32 `json:"queue_size,omitempty"`

	// Number of messages queued to be sent to agents during the last five seconds
	QueuedMsgs *float32 `json:"queued_msgs,omitempty"`

	// Number of received bytes from all agents during the last five seconds
	RecvBytes *float32 `json:"recv_bytes,omitempty"`

	// Number of sent bytes to the agents during the last five seconds
	SentBytes *float32 `json:"sent_bytes,omitempty"`

	// Number of TCP active sessions during the last five seconds
	TcpSessions *float32 `json:"tcp_sessions,omitempty"`

	// Total queue size to store events from agents
	TotalQueueSize *float32 `json:"total_queue_size,omitempty"`
}

// WazuhRemotedStatsAgentsItem defines model for WazuhRemotedStatsAgentsItem.
type WazuhRemotedStatsAgentsItem struct {
	Agents *[]struct {
		// Agent ID
		Id      *int32 `json:"id,omitempty"`
		Metrics *struct {
			Messages *struct {
				ReceivedBreakdown *struct {
					// Control messages received from agent
					Control          *int32 `json:"control,omitempty"`
					ControlBreakdown *struct {
						// Keepalive messages from agent
						Keepalive *int32 `json:"keepalive,omitempty"`

						// Request messages (for example, WPK responses) from agent
						Request *int32 `json:"request,omitempty"`

						// Shutdown messages from agent
						Shutdown *int32 `json:"shutdown,omitempty"`

						// Startup messages from agent
						Startup *int32 `json:"startup,omitempty"`
					} `json:"control_breakdown,omitempty"`

					// Event messages (syscheck, syscollector, logcollector, etc.) received from agent
					Event *int32 `json:"event,omitempty"`
				} `json:"received_breakdown,omitempty"`
				SentBreakdown *struct {
					// ACK messages (response to keepalive, startup and shutdown) sent to agent
					Ack *int32 `json:"ack,omitempty"`

					// Active response messages sent to agent
					Ar *int32 `json:"ar,omitempty"`

					// Messages discarded because the send queue was full (for this agent)
					Discarded *int32 `json:"discarded,omitempty"`

					// Request messages (for example, WPK chunks) sent to agent
					Request *int32 `json:"request,omitempty"`

					// SCA messages sent to agent
					Sca *int32 `json:"sca,omitempty"`

					// Shared configuration messages (merged.mg) sent to agent
					Shared *int32 `json:"shared,omitempty"`
				} `json:"sent_breakdown,omitempty"`
			} `json:"messages,omitempty"`
		} `json:"metrics,omitempty"`

		// When the count of the metrics started
		Uptime *time.Time `json:"uptime,omitempty"`
	} `json:"agents,omitempty"`

	// Daemon name
	Name *WazuhRemotedStatsAgentsItemName `json:"name,omitempty"`

	// Daemon stats request time
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// Daemon name
type WazuhRemotedStatsAgentsItemName string

// WazuhRemotedStatsItem defines model for WazuhRemotedStatsItem.
type WazuhRemotedStatsItem struct {
	Metrics *struct {
		Bytes *struct {
			// Bytes received from agents
			Received *int32 `json:"received,omitempty"`

			// Bytes sent to agents
			Sent *int32 `json:"sent,omitempty"`
		} `json:"bytes,omitempty"`

		// Number of times keys were reloaded into memory
		KeysReloadCount *int32 `json:"keys_reload_count,omitempty"`
		Messages        *struct {
			ReceivedBreakdown *struct {
				// Control messages received from agents
				Control          *int32 `json:"control,omitempty"`
				ControlBreakdown *struct {
					// Keepalive messages from agents
					Keepalive *int32 `json:"keepalive,omitempty"`

					// Request messages (for example, WPK responses) from agents
					Request *int32 `json:"request,omitempty"`

					// Shutdown messages from agents
					Shutdown *int32 `json:"shutdown,omitempty"`

					// Startup messages from agents
					Startup *int32 `json:"startup,omitempty"`
				} `json:"control_breakdown,omitempty"`

				// Messages dequeued after newer messages (counter < current counter)
				DequeuedAfter *int32 `json:"dequeued_after,omitempty"`

				// Messages discarded because the received queue was full
				Discarded *int32 `json:"discarded,omitempty"`

				// Event messages (syscheck, syscollector, logcollector, etc.) received from agents
				Event *int32 `json:"event,omitempty"`

				// Ping messages received
				Ping *int32 `json:"ping,omitempty"`

				// Not recognized messages
				Unknown *int32 `json:"unknown,omitempty"`
			} `json:"received_breakdown,omitempty"`
			SentBreakdown *struct {
				// ACK messages (response to keepalive, startup and shutdown) sent to agents
				Ack *int32 `json:"ack,omitempty"`

				// Active response messages sent to agents
				Ar *int32 `json:"ar,omitempty"`

				// Messages discarded because the send queue was full
				Discarded *int32 `json:"discarded,omitempty"`

				// Request messages (for example, WPK chunks) sent to agents
				Request *int32 `json:"request,omitempty"`

				// SCA messages sent to agents
				Sca *int32 `json:"sca,omitempty"`

				// Shared configuration messages (merged.mg) sent to agents
				Shared *int32 `json:"shared,omitempty"`
			} `json:"sent_breakdown,omitempty"`
		} `json:"messages,omitempty"`
		Queues *struct {
			Received *struct {
				// Size of received messages queue
				Size *int32 `json:"size,omitempty"`

				// Current usage of the received queue (count)
				Usage *int32 `json:"usage,omitempty"`
			} `json:"received,omitempty"`
		} `json:"queues,omitempty"`

		// Current active TCP sessions (agents)
		TcpSessions *int32 `json:"tcp_sessions,omitempty"`
	} `json:"metrics,omitempty"`

	// Daemon name
	Name *WazuhRemotedStatsItemName `json:"name,omitempty"`

	// Daemon stats request time
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// When the count of the metrics started
	Uptime *time.Time `json:"uptime,omitempty"`
}

// Daemon name
type WazuhRemotedStatsItemName string

// WazuhStats defines model for WazuhStats.
type WazuhStats map[string]interface{}

// WazuhWeeklyStats defines model for WazuhWeeklyStats.
type WazuhWeeklyStats struct {
	Fri *WazuhHourlyStats `json:"Fri,omitempty"`
	Mon *WazuhHourlyStats `json:"Mon,omitempty"`
	Sat *WazuhHourlyStats `json:"Sat,omitempty"`
	Sun *WazuhHourlyStats `json:"Sun,omitempty"`
	Thu *WazuhHourlyStats `json:"Thu,omitempty"`
	Tue *WazuhHourlyStats `json:"Tue,omitempty"`
	Wed *WazuhHourlyStats `json:"Wed,omitempty"`
}

// Adapter defines model for adapter.
type Adapter string

// Address defines model for address.
type Address string

// Agent ID
type AgentId AgentID

// AgentName defines model for agent_name.
type AgentName string

// AgentsList defines model for agents_list.
type AgentsList []AgentID

// AgentsListAll defines model for agents_list_all.
type AgentsListAll []AgentIDListAll

// AllowRunAs defines model for allow_run_as.
type AllowRunAs bool

// Architecture defines model for architecture.
type Architecture string

// Benchmark defines model for benchmark.
type Benchmark string

// BoardSerial defines model for board_serial.
type BoardSerial string

// Broadcast defines model for broadcast.
type Broadcast string

// Cis defines model for cis.
type Cis string

// Command defines model for command.
type Command string

// Component defines model for component.
type Component string

// Condition defines model for condition.
type Condition string

// Configuration defines model for configuration.
type Configuration string

// CpuCores defines model for cpu.cores.
type CpuCores int32

// CpuMhz defines model for cpu.mhz.
type CpuMhz float32

// CpuName defines model for cpu.name.
type CpuName string

// DaemonsList defines model for daemons_list.
type DaemonsList []string

// DaemonsListAgents defines model for daemons_list_agents.
type DaemonsListAgents []string

// Cve defines model for cve.
type Cve string

// CveSeverity defines model for cve_severity.
type CveSeverity string

// CveStatus defines model for cve_status.
type CveStatus string

// CveType defines model for cve_type.
type CveType string

// CveVersion defines model for cve_version.
type CveVersion string

// Date defines model for date.
type Date openapi_types.Date

// DecoderName defines model for decoder_name.
type DecoderName []string

// Description defines model for description.
type Description string

// DHCP status
type Dhcp DHCPStatus

// Directory defines model for directory.
type Directory string

// Distinct defines model for distinct.
type Distinct bool

// Egroup defines model for egroup.
type Egroup string

// Endpoint defines model for endpoint.
type Endpoint string

// Error defines model for error.
type Error int32

// Euser defines model for euser.
type Euser string

// Fail defines model for fail.
type Fail int32

// Fgroup defines model for fgroup.
type Fgroup string

// Field defines model for field.
type Field string

// Fields defines model for fields.
type Fields []string

// FileFormat defines model for file_format.
type FileFormat string

// FileName defines model for file_name.
type FileName string

// FilePath defines model for file_path.
type FilePath string

// Filename defines model for filename.
type Filename []string

// Filetype defines model for filetype.
type Filetype string

// Force defines model for force.
type Force bool

// ForceQuery defines model for force_query.
type ForceQuery bool

// ForceSingleGroup defines model for force_single_group.
type ForceSingleGroup bool

// FullPathFilter defines model for full_path_filter.
type FullPathFilter string

// Gateway defines model for gateway.
type Gateway string

// Gdpr defines model for gdpr.
type Gdpr string

// GetDirnamesPath defines model for get_dirnames_path.
type GetDirnamesPath string

// Gpg13 defines model for gpg13.
type Gpg13 string

// Group defines model for group.
type Group string

// GroupConfigStatus defines model for group_config_status.
type GroupConfigStatus string

// Group name
type GroupId GroupID

// Group name
type GroupIdQuery GroupID

// GroupsList defines model for groups_list.
type GroupsList []GroupID

// GroupsListAll defines model for groups_list_all.
type GroupsListAll []GroupIDListAll

// Hash defines model for hash.
type Hash string

// Hashfilter defines model for hashfilter.
type Hashfilter string

// Hipaa defines model for hipaa.
type Hipaa string

// Hotfix defines model for hotfix.
type Hotfix string

// Iface defines model for iface.
type Iface string

// Installer defines model for installer.
type Installer string

// Ip defines model for ip.
type Ip string

// Level defines model for level.
type Level string

// Limit defines model for limit.
type Limit int32

// ListFilenamePath defines model for list_filename_path.
type ListFilenamePath string

// LocalIp defines model for local.ip.
type LocalIp string

// LocalPort defines model for local.port.
type LocalPort string

// LogLevel defines model for log_level.
type LogLevel string

// LogLines defines model for log_lines.
type LogLines int32

// LogtestToken defines model for logtest_token.
type LogtestToken string

// ManagerHost defines model for manager_host.
type ManagerHost string

// Md5 defines model for md5.
type Md5 string

// Mitre defines model for mitre.
type Mitre string

// MitreGroupIds defines model for mitre_group_ids.
type MitreGroupIds []MitreGroupId

// MitreMitigationIds defines model for mitre_mitigation_ids.
type MitreMitigationIds []MitreMitigationId

// MitreReferenceIds defines model for mitre_reference_ids.
type MitreReferenceIds []MitreReferenceId

// MitreSoftwareIds defines model for mitre_software_ids.
type MitreSoftwareIds []MitreSoftwareId

// MitreTacticIds defines model for mitre_tactic_ids.
type MitreTacticIds []MitreTacticId

// MitreTechniqueIds defines model for mitre_technique_ids.
type MitreTechniqueIds []MitreTechniqueId

// Module defines model for module.
type Module string

// Mtu defines model for mtu.
type Mtu int32

// Name defines model for name.
type Name string

// Netmask defines model for netmask.
type Netmask string

// Nist80053 defines model for nist-800-53.
type Nist80053 string

// Nlwp defines model for nlwp.
type Nlwp string

// Node defines model for node.
type Node string

// NodeId defines model for node_id.
type NodeId string

// NodeName defines model for node_name.
type NodeName string

// NodeType defines model for node_type.
type NodeType string

// NodesList defines model for nodes_list.
type NodesList []string

// Notchecked defines model for notchecked.
type Notchecked int32

// Offset defines model for offset.
type Offset int32

// OlderThanParam defines model for olderThanParam.
type OlderThanParam string

// OlderThan defines model for older_than.
type OlderThan string

// OsName defines model for os.name.
type OsName string

// OsPlatform defines model for os.platform.
type OsPlatform string

// OsVersion defines model for os.version.
type OsVersion string

// Overwrite defines model for overwrite.
type Overwrite bool

// PackageVersion defines model for package_version.
type PackageVersion string

// Pass defines model for pass.
type Pass int32

// PciDss defines model for pci_dss.
type PciDss string

// Pgrp defines model for pgrp.
type Pgrp string

// Pid defines model for pid.
type Pid string

// Policy ID
type PolicyIdRbac PolicyId

// PolicyIdsRbac defines model for policy_ids_rbac.
type PolicyIdsRbac []PolicyId

// PolicyIdsRbacDelete defines model for policy_ids_rbac_delete.
type PolicyIdsRbacDelete []PolicyIdDELETE

// PolicyIdsRbacRequired defines model for policy_ids_rbac_required.
type PolicyIdsRbacRequired []PolicyId

// Ppid defines model for ppid.
type Ppid string

// Pretty defines model for pretty.
type Pretty bool

// Priority defines model for priority.
type Priority string

// Process defines model for process.
type Process string

// ProcessName defines model for process_name.
type ProcessName string

// ProcessPid defines model for process_pid.
type ProcessPid string

// ProcessState defines model for process_state.
type ProcessState string

// Profile defines model for profile.
type Profile string

// Proto defines model for proto.
type Proto string

// Protocol defines model for protocol.
type Protocol string

// Purge defines model for purge.
type Purge bool

// Query defines model for query.
type Query string

// RamFree defines model for ram.free.
type RamFree int64

// RamTotal defines model for ram.total.
type RamTotal int64

// Rationale defines model for rationale.
type Rationale string

// Raw defines model for raw.
type Raw bool

// Reason defines model for reason.
type Reason string

// References defines model for references.
type References string

// RegisterIP defines model for registerIP.
type RegisterIP string

// Registry defines model for registry.
type Registry string

// Release defines model for release.
type Release string

// Remediation defines model for remediation.
type Remediation string

// RemoteIp defines model for remote.ip.
type RemoteIp string

// ResourceList defines model for resource_list.
type ResourceList string

// Result defines model for result.
type Result string

// Rgroup defines model for rgroup.
type Rgroup string

// RoleIds defines model for role_ids.
type RoleIds []RoleId

// RoleIdsDelete defines model for role_ids_delete.
type RoleIdsDelete []RoleIdDELETE

// RoleIdsRequired defines model for role_ids_required.
type RoleIdsRequired []RoleIdDELETE

// RuleIds defines model for rule_ids.
type RuleIds []int32

// RuleRequirement defines model for rule_requirement.
type RuleRequirement string

// Ruser defines model for ruser.
type Ruser string

// RxBytes defines model for rx.bytes.
type RxBytes int32

// RxDropped defines model for rx.dropped.
type RxDropped int32

// RxErrors defines model for rx.errors.
type RxErrors int32

// RxPackets defines model for rx.packets.
type RxPackets int32

// ScaName defines model for sca_name.
type ScaName string

// Score defines model for score.
type Score int32

// Search defines model for search.
type Search string

// Section defines model for section.
type Section string

// SecurityPosition defines model for security_position.
type SecurityPosition int

// SecurityRuleIds defines model for security_rule_ids.
type SecurityRuleIds []SecurityRuleId

// SecurityRuleIdsDelete defines model for security_rule_ids_delete.
type SecurityRuleIdsDelete []SecurityRuleIdDELETE

// SecurityRuleIdsRequired defines model for security_rule_ids_required.
type SecurityRuleIdsRequired []SecurityRuleId

// Select defines model for select.
type Select []string

// Sgroup defines model for sgroup.
type Sgroup string

// Sha1 defines model for sha1.
type Sha1 string

// Sha256 defines model for sha256.
type Sha256 string

// Sort defines model for sort.
type Sort string

// State defines model for state.
type State string

// StatsComponent defines model for stats_component.
type StatsComponent string

// Status defines model for status.
type Status string

// StatusAgentParam defines model for statusAgentParam.
type StatusAgentParam []string

// StatusDeleteAgentParam defines model for statusDeleteAgentParam.
type StatusDeleteAgentParam []string

// StatusRLDParam defines model for statusRLDParam.
type StatusRLDParam string

// Summary defines model for summary.
type Summary bool

// Suser defines model for suser.
type Suser string

// SyscheckArch defines model for syscheck_arch.
type SyscheckArch string

// Tag defines model for tag.
type Tag string

// TasksList defines model for tasks_list.
type TasksList []TaskId

// Title defines model for title.
type Title string

// Tsc defines model for tsc.
type Tsc string

// TxBytes defines model for tx.bytes.
type TxBytes int32

// TxDropped defines model for tx.dropped.
type TxDropped int32

// TxErrors defines model for tx.errors.
type TxErrors int32

// TxPackets defines model for tx.packets.
type TxPackets int32

// TxQueue defines model for tx_queue.
type TxQueue string

// TypeAgents defines model for type_agents.
type TypeAgents []string

// TypeSyscollector defines model for type_syscollector.
type TypeSyscollector string

// Typesys defines model for typesys.
type Typesys string

// Unknown defines model for unknown.
type Unknown int32

// UpgradeVersion defines model for upgrade_version.
type UpgradeVersion string

// UseHttp defines model for use_http.
type UseHttp bool

// User ID
type UserIdRequired UserId

// UserIds defines model for user_ids.
type UserIds []UserId

// UserIdsDelete defines model for user_ids_delete.
type UserIdsDelete []UserIdDELETE

// ValueName defines model for value.name.
type ValueName string

// ValueType defines model for value.type.
type ValueType string

// Vendor defines model for vendor.
type Vendor string

// Version defines model for version.
type Version string

// VulnerabilityField defines model for vulnerability_field.
type VulnerabilityField string

// WaitForComplete defines model for wait_for_complete.
type WaitForComplete bool

// WpkRepo defines model for wpk_repo.
type WpkRepo string

// XmlFilename defines model for xml_filename.
type XmlFilename []string

// XmlFilenamePath defines model for xml_filename_path.
type XmlFilenamePath string

// InvalidCredentialsResponse defines model for InvalidCredentialsResponse.
type InvalidCredentialsResponse RequestError

// InvalidHTTPMethodResponse defines model for InvalidHTTPMethodResponse.
type InvalidHTTPMethodResponse RequestError

// PermissionDeniedResponse defines model for PermissionDeniedResponse.
type PermissionDeniedResponse ApiError

// RequestTooLargeResponse defines model for RequestTooLargeResponse.
type RequestTooLargeResponse RequestError

// ResourceNotFoundResponse defines model for ResourceNotFoundResponse.
type ResourceNotFoundResponse ApiError

// ResponseError defines model for ResponseError.
type ResponseError RequestError

// TooManyRequestsResponse defines model for TooManyRequestsResponse.
type TooManyRequestsResponse RequestError

// UnauthorizedResponse defines model for UnauthorizedResponse.
type UnauthorizedResponse RequestError

// WrongContentTypeResponse defines model for WrongContentTypeResponse.
type WrongContentTypeResponse RequestError

// DefaultControllerDefaultInfoParams defines parameters for DefaultControllerDefaultInfo.
type DefaultControllerDefaultInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`
}

// ActiveResponseControllerRunCommandJSONBody defines parameters for ActiveResponseControllerRunCommand.
type ActiveResponseControllerRunCommandJSONBody ActiveResponseBody

// ActiveResponseControllerRunCommandParams defines parameters for ActiveResponseControllerRunCommand.
type ActiveResponseControllerRunCommandParams struct {
	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerDeleteAgentsParams defines parameters for AgentControllerDeleteAgents.
type AgentControllerDeleteAgentsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), use the keyword `all` to select all agents
	AgentsList AgentsListAll `json:"agents_list"`

	// Permanently delete an agent from the key store
	Purge *Purge `json:"purge,omitempty"`

	// Filter by agent status (use commas to enter multiple statuses)
	Status StatusDeleteAgentParam `json:"status"`

	// Consider only agents whose last keep alive is older than the specified time frame. For never_connected agents, register date is considered instead of last keep alive. For example, `7d`, `10s` and `10` are valid values. When no time unit is specified, seconds are assumed. Use 0s to select all agents
	OlderThan *OlderThan `json:"older_than,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Filter by OS platform
	OsPlatform *OsPlatform `json:"os.platform,omitempty"`

	// Filter by OS version
	OsVersion *OsVersion `json:"os.version,omitempty"`

	// Filter by OS name
	OsName *OsName `json:"os.name,omitempty"`

	// Filter by manager hostname where agents are connected to
	Manager *ManagerHost `json:"manager,omitempty"`

	// Filter by agents version using one of the following formats: 'X.Y.Z', 'vX.Y.Z', 'wazuh X.Y.Z' or 'wazuh vX.Y.Z'. For example: '4.4.0'
	Version *Version `json:"version,omitempty"`

	// Filter by group of agents
	Group *AgentGroup `json:"group,omitempty"`

	// Filter by node name
	NodeName *NodeName `json:"node_name,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by the IP used by the agent to communicate with the manager. If it's not available, it will have the same value as registerIP
	Ip *Ip `json:"ip,omitempty"`

	// Filter by the IP used when registering the agent
	RegisterIP *RegisterIP `json:"registerIP,omitempty"`
}

// AgentControllerDeleteAgentsParamsStatus defines parameters for AgentControllerDeleteAgents.
type AgentControllerDeleteAgentsParamsStatus string

// AgentControllerGetAgentsParams defines parameters for AgentControllerGetAgents.
type AgentControllerGetAgentsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Filter by agent status (use commas to enter multiple statuses)
	Status *StatusAgentParam `json:"status,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Filter out agents whose time lapse from last keep alive signal is longer than specified. Time in seconds, ‘[n_days]d’, ‘[n_hours]h’, ‘[n_minutes]m’ or ‘[n_seconds]s’. For never_connected agents, uses the register date. For example, `7d`, `10s` and `10` are valid values. If no time unit is specified, seconds are used
	OlderThan *OlderThanParam `json:"older_than,omitempty"`

	// Filter by OS platform
	OsPlatform *OsPlatform `json:"os.platform,omitempty"`

	// Filter by OS version
	OsVersion *OsVersion `json:"os.version,omitempty"`

	// Filter by OS name
	OsName *OsName `json:"os.name,omitempty"`

	// Filter by manager hostname where agents are connected to
	Manager *ManagerHost `json:"manager,omitempty"`

	// Filter by agents version using one of the following formats: 'X.Y.Z', 'vX.Y.Z', 'wazuh X.Y.Z' or 'wazuh vX.Y.Z'. For example: '4.4.0'
	Version *Version `json:"version,omitempty"`

	// Filter by group of agents
	Group *AgentGroup `json:"group,omitempty"`

	// Filter by node name
	NodeName *NodeName `json:"node_name,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by the IP used by the agent to communicate with the manager. If it's not available, it will have the same value as registerIP
	Ip *Ip `json:"ip,omitempty"`

	// Filter by the IP used when registering the agent
	RegisterIP *RegisterIP `json:"registerIP,omitempty"`

	// Agent groups configuration sync status
	GroupConfigStatus *AgentControllerGetAgentsParamsGroupConfigStatus `json:"group_config_status,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// AgentControllerGetAgentsParamsStatus defines parameters for AgentControllerGetAgents.
type AgentControllerGetAgentsParamsStatus string

// AgentControllerGetAgentsParamsGroupConfigStatus defines parameters for AgentControllerGetAgents.
type AgentControllerGetAgentsParamsGroupConfigStatus string

// AgentControllerAddAgentJSONBody defines parameters for AgentControllerAddAgent.
type AgentControllerAddAgentJSONBody struct {
	// If this is not included, the API will get the IP automatically. Allowed values: IP, IP/NET, ANY
	Ip *string `json:"ip,omitempty"`

	// Agent name
	Name string `json:"name"`
}

// AgentControllerAddAgentParams defines parameters for AgentControllerAddAgent.
type AgentControllerAddAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerDeleteMultipleAgentSingleGroupParams defines parameters for AgentControllerDeleteMultipleAgentSingleGroup.
type AgentControllerDeleteMultipleAgentSingleGroupParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), use the keyword `all` to select all agents
	AgentsList AgentsListAll `json:"agents_list"`

	// Group ID. (Name of the group)
	GroupId GroupIdQuery `json:"group_id"`
}

// AgentControllerPutMultipleAgentSingleGroupParams defines parameters for AgentControllerPutMultipleAgentSingleGroup.
type AgentControllerPutMultipleAgentSingleGroupParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// Group ID. (Name of the group)
	GroupId GroupIdQuery `json:"group_id"`

	// Removes the agent from all groups to which it belongs and assigns it to the specified group
	ForceSingleGroup *ForceSingleGroup `json:"force_single_group,omitempty"`
}

// AgentControllerRestartAgentsByGroupParams defines parameters for AgentControllerRestartAgentsByGroup.
type AgentControllerRestartAgentsByGroupParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerInsertAgentJSONBody defines parameters for AgentControllerInsertAgent.
type AgentControllerInsertAgentJSONBody struct {
	// Remove the old agent with the same name, ID or IP if the configuration is matched
	Force *AgentInsertForce `json:"force,omitempty"`

	// Agent ID
	Id *AgentID `json:"id,omitempty"`

	// If this is not included, the API will get the IP automatically. Allowed values: IP, IP/NET, ANY
	Ip *string `json:"ip,omitempty"`

	// Key to use when communicating with the manager. The agent must have the same key on its `client.keys` file
	Key *string `json:"key,omitempty"`

	// Agent name
	Name string `json:"name"`
}

// AgentControllerInsertAgentParams defines parameters for AgentControllerInsertAgent.
type AgentControllerInsertAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerPostNewAgentParams defines parameters for AgentControllerPostNewAgent.
type AgentControllerPostNewAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Agent name. The special characters allowed are: '-','_','.'
	AgentName AgentName `json:"agent_name"`
}

// AgentControllerGetAgentNoGroupParams defines parameters for AgentControllerGetAgentNoGroup.
type AgentControllerGetAgentNoGroupParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`
}

// AgentControllerRestartAgentsByNodeParams defines parameters for AgentControllerRestartAgentsByNode.
type AgentControllerRestartAgentsByNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerGetAgentOutdatedParams defines parameters for AgentControllerGetAgentOutdated.
type AgentControllerGetAgentOutdatedParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`
}

// AgentControllerReconnectAgentsParams defines parameters for AgentControllerReconnectAgents.
type AgentControllerReconnectAgentsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`
}

// AgentControllerRestartAgentsParams defines parameters for AgentControllerRestartAgents.
type AgentControllerRestartAgentsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`
}

// AgentControllerGetAgentFieldsParams defines parameters for AgentControllerGetAgentFields.
type AgentControllerGetAgentFieldsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of fields affecting the operation
	Fields *Fields `json:"fields,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`
}

// AgentControllerGetAgentSummaryOsParams defines parameters for AgentControllerGetAgentSummaryOs.
type AgentControllerGetAgentSummaryOsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerGetAgentSummaryStatusParams defines parameters for AgentControllerGetAgentSummaryStatus.
type AgentControllerGetAgentSummaryStatusParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerPutUpgradeAgentsParams defines parameters for AgentControllerPutUpgradeAgents.
type AgentControllerPutUpgradeAgentsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), use the keyword `all` to select all agents
	AgentsList AgentsListAll `json:"agents_list"`

	// WPK repository
	WpkRepo *WpkRepo `json:"wpk_repo,omitempty"`

	// Wazuh version to upgrade to
	UpgradeVersion *UpgradeVersion `json:"upgrade_version,omitempty"`

	// Use http protocol. If it's false use https. By default the value is set to false
	UseHttp *UseHttp `json:"use_http,omitempty"`

	// Force upgrade
	Force *Force `json:"force,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Filter by OS platform
	OsPlatform *OsPlatform `json:"os.platform,omitempty"`

	// Filter by OS version
	OsVersion *OsVersion `json:"os.version,omitempty"`

	// Filter by OS name
	OsName *OsName `json:"os.name,omitempty"`

	// Filter by manager hostname where agents are connected to
	Manager *ManagerHost `json:"manager,omitempty"`

	// Filter by agents version using one of the following formats: 'X.Y.Z', 'vX.Y.Z', 'wazuh X.Y.Z' or 'wazuh vX.Y.Z'. For example: '4.4.0'
	Version *Version `json:"version,omitempty"`

	// Filter by group of agents
	Group *AgentGroup `json:"group,omitempty"`

	// Filter by node name
	NodeName *NodeName `json:"node_name,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by the IP used by the agent to communicate with the manager. If it's not available, it will have the same value as registerIP
	Ip *Ip `json:"ip,omitempty"`

	// Filter by the IP used when registering the agent
	RegisterIP *RegisterIP `json:"registerIP,omitempty"`
}

// AgentControllerPutUpgradeCustomAgentsParams defines parameters for AgentControllerPutUpgradeCustomAgents.
type AgentControllerPutUpgradeCustomAgentsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), use the keyword `all` to select all agents
	AgentsList AgentsListAll `json:"agents_list"`

	// Full path to the WPK file. The file must be on a folder on the Wazuh's installation directory (by default, <code>/var/ossec</code>)
	FilePath FilePath `json:"file_path"`

	// Installation script. Default is <code>upgrade.sh</code> or <code>upgrade.bat</code> for windows agents
	Installer *Installer `json:"installer,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Filter by OS platform
	OsPlatform *OsPlatform `json:"os.platform,omitempty"`

	// Filter by OS version
	OsVersion *OsVersion `json:"os.version,omitempty"`

	// Filter by OS name
	OsName *OsName `json:"os.name,omitempty"`

	// Filter by manager hostname where agents are connected to
	Manager *ManagerHost `json:"manager,omitempty"`

	// Filter by agents version using one of the following formats: 'X.Y.Z', 'vX.Y.Z', 'wazuh X.Y.Z' or 'wazuh vX.Y.Z'. For example: '4.4.0'
	Version *Version `json:"version,omitempty"`

	// Filter by group of agents
	Group *AgentGroup `json:"group,omitempty"`

	// Filter by node name
	NodeName *NodeName `json:"node_name,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by the IP used by the agent to communicate with the manager. If it's not available, it will have the same value as registerIP
	Ip *Ip `json:"ip,omitempty"`

	// Filter by the IP used when registering the agent
	RegisterIP *RegisterIP `json:"registerIP,omitempty"`
}

// AgentControllerGetAgentUpgradeParams defines parameters for AgentControllerGetAgentUpgrade.
type AgentControllerGetAgentUpgradeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Filter by OS platform
	OsPlatform *OsPlatform `json:"os.platform,omitempty"`

	// Filter by OS version
	OsVersion *OsVersion `json:"os.version,omitempty"`

	// Filter by OS name
	OsName *OsName `json:"os.name,omitempty"`

	// Filter by manager hostname where agents are connected to
	Manager *ManagerHost `json:"manager,omitempty"`

	// Filter by agents version using one of the following formats: 'X.Y.Z', 'vX.Y.Z', 'wazuh X.Y.Z' or 'wazuh vX.Y.Z'. For example: '4.4.0'
	Version *Version `json:"version,omitempty"`

	// Filter by group of agents
	Group *AgentGroup `json:"group,omitempty"`

	// Filter by node name
	NodeName *NodeName `json:"node_name,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by the IP used by the agent to communicate with the manager. If it's not available, it will have the same value as registerIP
	Ip *Ip `json:"ip,omitempty"`

	// Filter by the IP used when registering the agent
	RegisterIP *RegisterIP `json:"registerIP,omitempty"`
}

// AgentControllerGetAgentConfigParams defines parameters for AgentControllerGetAgentConfig.
type AgentControllerGetAgentConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerGetAgentConfigParamsComponent defines parameters for AgentControllerGetAgentConfig.
type AgentControllerGetAgentConfigParamsComponent string

// AgentControllerGetAgentConfigParamsConfiguration defines parameters for AgentControllerGetAgentConfig.
type AgentControllerGetAgentConfigParamsConfiguration string

// AgentControllerGetDaemonStatsParams defines parameters for AgentControllerGetDaemonStats.
type AgentControllerGetDaemonStatsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of daemon names (separated by comma), all daemons selected by default if not specified
	DaemonsList *DaemonsListAgents `json:"daemons_list,omitempty"`
}

// AgentControllerGetDaemonStatsParamsDaemonsList defines parameters for AgentControllerGetDaemonStats.
type AgentControllerGetDaemonStatsParamsDaemonsList string

// AgentControllerDeleteSingleAgentMultipleGroupsParams defines parameters for AgentControllerDeleteSingleAgentMultipleGroups.
type AgentControllerDeleteSingleAgentMultipleGroupsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of group IDs (separated by comma), all groups selected by default if not specified
	GroupsList *GroupsList `json:"groups_list,omitempty"`
}

// AgentControllerGetSyncAgentParams defines parameters for AgentControllerGetSyncAgent.
type AgentControllerGetSyncAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerDeleteSingleAgentSingleGroupParams defines parameters for AgentControllerDeleteSingleAgentSingleGroup.
type AgentControllerDeleteSingleAgentSingleGroupParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerPutAgentSingleGroupParams defines parameters for AgentControllerPutAgentSingleGroup.
type AgentControllerPutAgentSingleGroupParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Removes the agent from all groups to which it belongs and assigns it to the specified group
	ForceSingleGroup *ForceSingleGroup `json:"force_single_group,omitempty"`
}

// AgentControllerGetAgentKeyParams defines parameters for AgentControllerGetAgentKey.
type AgentControllerGetAgentKeyParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerRestartAgentParams defines parameters for AgentControllerRestartAgent.
type AgentControllerRestartAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerGetComponentStatsParams defines parameters for AgentControllerGetComponentStats.
type AgentControllerGetComponentStatsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerGetComponentStatsParamsComponent defines parameters for AgentControllerGetComponentStats.
type AgentControllerGetComponentStatsParamsComponent string

// CiscatControllerGetAgentsCiscatResultsParams defines parameters for CiscatControllerGetAgentsCiscatResults.
type CiscatControllerGetAgentsCiscatResultsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by benchmark type
	Benchmark *Benchmark `json:"benchmark,omitempty"`

	// Filter by evaluated profile
	Profile *Profile `json:"profile,omitempty"`

	// Filter by passed checks
	Pass *Pass `json:"pass,omitempty"`

	// Filter by failed checks
	Fail *Fail `json:"fail,omitempty"`

	// Filter by encountered errors
	Error *Error `json:"error,omitempty"`

	// Filter by not checked
	Notchecked *Notchecked `json:"notchecked,omitempty"`

	// Filter by unknown results
	Unknown *Unknown `json:"unknown,omitempty"`

	// Filter by final score
	Score *Score `json:"score,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`
}

// ClusterControllerGetApiConfigParams defines parameters for ClusterControllerGetApiConfig.
type ClusterControllerGetApiConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of node IDs (separated by comma), all nodes selected by default if not specified
	NodesList *NodesList `json:"nodes_list,omitempty"`
}

// ClusterControllerGetConfValidationParams defines parameters for ClusterControllerGetConfValidation.
type ClusterControllerGetConfValidationParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of node IDs (separated by comma), all nodes selected by default if not specified
	NodesList *NodesList `json:"nodes_list,omitempty"`
}

// ClusterControllerGetHealthcheckParams defines parameters for ClusterControllerGetHealthcheck.
type ClusterControllerGetHealthcheckParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of node IDs (separated by comma), all nodes selected by default if not specified
	NodesList *NodesList `json:"nodes_list,omitempty"`
}

// ClusterControllerGetConfigParams defines parameters for ClusterControllerGetConfig.
type ClusterControllerGetConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetClusterNodeParams defines parameters for ClusterControllerGetClusterNode.
type ClusterControllerGetClusterNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetClusterNodesParams defines parameters for ClusterControllerGetClusterNodes.
type ClusterControllerGetClusterNodesParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by node type
	Type *ClusterControllerGetClusterNodesParamsType `json:"type,omitempty"`

	// List of node IDs (separated by comma), all nodes selected by default if not specified
	NodesList *NodesList `json:"nodes_list,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// ClusterControllerGetClusterNodesParamsType defines parameters for ClusterControllerGetClusterNodes.
type ClusterControllerGetClusterNodesParamsType string

// ClusterControllerPutRestartParams defines parameters for ClusterControllerPutRestart.
type ClusterControllerPutRestartParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of node IDs (separated by comma), all nodes selected by default if not specified
	NodesList *NodesList `json:"nodes_list,omitempty"`
}

// ClusterControllerGetNodesRulesetSyncStatusParams defines parameters for ClusterControllerGetNodesRulesetSyncStatus.
type ClusterControllerGetNodesRulesetSyncStatusParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of node IDs (separated by comma), all nodes selected by default if not specified
	NodesList *NodesList `json:"nodes_list,omitempty"`
}

// ClusterControllerGetStatusParams defines parameters for ClusterControllerGetStatus.
type ClusterControllerGetStatusParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of node IDs (separated by comma), all nodes selected by default if not specified
	NodesList *NodesList `json:"nodes_list,omitempty"`
}

// ClusterControllerGetConfigurationNodeParams defines parameters for ClusterControllerGetConfigurationNode.
type ClusterControllerGetConfigurationNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Format response in plain text
	Raw *Raw `json:"raw,omitempty"`

	// Indicates the wazuh configuration section
	Section *ClusterControllerGetConfigurationNodeParamsSection `json:"section,omitempty"`

	// Indicate a section child. E.g, fields for *ruleset* section are: decoder_dir, rule_dir, etc
	Field *Field `json:"field,omitempty"`
}

// ClusterControllerGetConfigurationNodeParamsSection defines parameters for ClusterControllerGetConfigurationNode.
type ClusterControllerGetConfigurationNodeParamsSection string

// ClusterControllerUpdateConfigurationParams defines parameters for ClusterControllerUpdateConfiguration.
type ClusterControllerUpdateConfigurationParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetNodeConfigParams defines parameters for ClusterControllerGetNodeConfig.
type ClusterControllerGetNodeConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetNodeConfigParamsComponent defines parameters for ClusterControllerGetNodeConfig.
type ClusterControllerGetNodeConfigParamsComponent string

// ClusterControllerGetNodeConfigParamsConfiguration defines parameters for ClusterControllerGetNodeConfig.
type ClusterControllerGetNodeConfigParamsConfiguration string


// ClusterControllerGetDaemonStatsNodeParams defines parameters for ClusterControllerGetDaemonStatsNode.
type ClusterControllerGetDaemonStatsNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of daemon names (separated by comma), all daemons selected by default if not specified
	DaemonsList *DaemonsList `json:"daemons_list,omitempty"`
}

// ClusterControllerGetDaemonStatsNodeParamsDaemonsList defines parameters for ClusterControllerGetDaemonStatsNode.
type ClusterControllerGetDaemonStatsNodeParamsDaemonsList string

// ClusterControllerGetInfoNodeParams defines parameters for ClusterControllerGetInfoNode.
type ClusterControllerGetInfoNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetLogNodeParams defines parameters for ClusterControllerGetLogNode.
type ClusterControllerGetLogNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of lines to return.
	Limit *LogLines `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Wazuh component that logged the event
	Tag *ClusterControllerGetLogNodeParamsTag `json:"tag,omitempty"`

	// Filter by log level
	Level *ClusterControllerGetLogNodeParamsLevel `json:"level,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// ClusterControllerGetLogNodeParamsTag defines parameters for ClusterControllerGetLogNode.
type ClusterControllerGetLogNodeParamsTag string

// ClusterControllerGetLogNodeParamsLevel defines parameters for ClusterControllerGetLogNode.
type ClusterControllerGetLogNodeParamsLevel string

// ClusterControllerGetLogSummaryNodeParams defines parameters for ClusterControllerGetLogSummaryNode.
type ClusterControllerGetLogSummaryNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetStatsNodeParams defines parameters for ClusterControllerGetStatsNode.
type ClusterControllerGetStatsNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Date to obtain statistical information from. Format YYYY-MM-DD
	Date *Date `json:"date,omitempty"`
}

// ClusterControllerGetStatsAnalysisdNodeParams defines parameters for ClusterControllerGetStatsAnalysisdNode.
type ClusterControllerGetStatsAnalysisdNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetStatsHourlyNodeParams defines parameters for ClusterControllerGetStatsHourlyNode.
type ClusterControllerGetStatsHourlyNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetStatsRemotedNodeParams defines parameters for ClusterControllerGetStatsRemotedNode.
type ClusterControllerGetStatsRemotedNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetStatsWeeklyNodeParams defines parameters for ClusterControllerGetStatsWeeklyNode.
type ClusterControllerGetStatsWeeklyNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ClusterControllerGetStatusNodeParams defines parameters for ClusterControllerGetStatusNode.
type ClusterControllerGetStatusNodeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// DecoderControllerGetDecodersParams defines parameters for DecoderControllerGetDecoders.
type DecoderControllerGetDecodersParams struct {
	// Decoder name
	DecoderNames *DecoderName `json:"decoder_names,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Filter by filename
	Filename *Filename `json:"filename,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`

	// Filter by list status. Use commas to enter multiple statuses
	Status *DecoderControllerGetDecodersParamsStatus `json:"status,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// DecoderControllerGetDecodersParamsStatus defines parameters for DecoderControllerGetDecoders.
type DecoderControllerGetDecodersParamsStatus string

// DecoderControllerGetDecodersFilesParams defines parameters for DecoderControllerGetDecodersFiles.
type DecoderControllerGetDecodersFilesParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Filter by filename of one or more rule or decoder files.
	Filename *XmlFilename `json:"filename,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`

	// Filter by list status. Use commas to enter multiple statuses
	Status *DecoderControllerGetDecodersFilesParamsStatus `json:"status,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// DecoderControllerGetDecodersFilesParamsStatus defines parameters for DecoderControllerGetDecodersFiles.
type DecoderControllerGetDecodersFilesParamsStatus string

// DecoderControllerDeleteFileParams defines parameters for DecoderControllerDeleteFile.
type DecoderControllerDeleteFileParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`
}

// DecoderControllerGetFileParams defines parameters for DecoderControllerGetFile.
type DecoderControllerGetFileParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Format response in plain text
	Raw *Raw `json:"raw,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`
}

// DecoderControllerPutFileParams defines parameters for DecoderControllerPutFile.
type DecoderControllerPutFileParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// If set to false, an exception will be raised when updating contents of an already existing filename
	Overwrite *Overwrite `json:"overwrite,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`
}

// DecoderControllerGetDecodersParentsParams defines parameters for DecoderControllerGetDecodersParents.
type DecoderControllerGetDecodersParentsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`
}

// EventControllerForwardEventJSONBody defines parameters for EventControllerForwardEvent.
type EventControllerForwardEventJSONBody struct {
	// Bulk of events
	Events []string `json:"events"`
}

// EventControllerForwardEventParams defines parameters for EventControllerForwardEvent.
type EventControllerForwardEventParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}
// ExperimentalControllerGetCisCatResultsParams defines parameters for ExperimentalControllerGetCisCatResults.
type ExperimentalControllerGetCisCatResultsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by benchmark type
	Benchmark *Benchmark `json:"benchmark,omitempty"`

	// Filter by evaluated profile
	Profile *Profile `json:"profile,omitempty"`

	// Filter by passed checks
	Pass *Pass `json:"pass,omitempty"`

	// Filter by failed checks
	Fail *Fail `json:"fail,omitempty"`

	// Filter by encountered errors
	Error *Error `json:"error,omitempty"`

	// Filter by not checked
	Notchecked *Notchecked `json:"notchecked,omitempty"`

	// Filter by unknown results
	Unknown *Unknown `json:"unknown,omitempty"`

	// Filter by final score
	Score *Score `json:"score,omitempty"`
}

// ExperimentalControllerClearRootcheckDatabaseParams defines parameters for ExperimentalControllerClearRootcheckDatabase.
type ExperimentalControllerClearRootcheckDatabaseParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), use the keyword `all` to select all agents
	AgentsList AgentsListAll `json:"agents_list"`
}

// ExperimentalControllerClearSyscheckDatabaseParams defines parameters for ExperimentalControllerClearSyscheckDatabase.
type ExperimentalControllerClearSyscheckDatabaseParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), use the keyword `all` to select all agents
	AgentsList AgentsListAll `json:"agents_list"`
}

// ExperimentalControllerGetHardwareInfoParams defines parameters for ExperimentalControllerGetHardwareInfo.
type ExperimentalControllerGetHardwareInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by ram.free
	RamFree *RamFree `json:"ram.free,omitempty"`

	// Filter by ram.total
	RamTotal *RamTotal `json:"ram.total,omitempty"`

	// Filter by cpu.cores
	CpuCores *CpuCores `json:"cpu.cores,omitempty"`

	// Filter by cpu.mhz
	CpuMhz *CpuMhz `json:"cpu.mhz,omitempty"`

	// Filter by cpu.name
	CpuName *CpuName `json:"cpu.name,omitempty"`

	// Filter by board_serial
	BoardSerial *BoardSerial `json:"board_serial,omitempty"`
}

// ExperimentalControllerGetHotfixesInfoParams defines parameters for ExperimentalControllerGetHotfixesInfo.
type ExperimentalControllerGetHotfixesInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by hotfix
	Hotfix *Hotfix `json:"hotfix,omitempty"`
}

// ExperimentalControllerGetNetworkAddressInfoParams defines parameters for ExperimentalControllerGetNetworkAddressInfo.
type ExperimentalControllerGetNetworkAddressInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by IP protocol
	Proto *Proto `json:"proto,omitempty"`

	// Filter by IP address
	Address *Address `json:"address,omitempty"`

	// Filter by broadcast direction
	Broadcast *Broadcast `json:"broadcast,omitempty"`

	// Filter by netmask
	Netmask *Netmask `json:"netmask,omitempty"`
}

// ExperimentalControllerGetNetworkInterfaceInfoParams defines parameters for ExperimentalControllerGetNetworkInterfaceInfo.
type ExperimentalControllerGetNetworkInterfaceInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by adapter
	Adapter *Adapter `json:"adapter,omitempty"`

	// Type of network
	Type *TypeSyscollector `json:"type,omitempty"`

	// Filter by state
	State *State `json:"state,omitempty"`

	// Filter by mtu
	Mtu *Mtu `json:"mtu,omitempty"`

	// Filter by tx.packets
	TxPackets *TxPackets `json:"tx.packets,omitempty"`

	// Filter by rx.packets
	RxPackets *RxPackets `json:"rx.packets,omitempty"`

	// Filter by tx.bytes
	TxBytes *TxBytes `json:"tx.bytes,omitempty"`

	// Filter by rx.bytes
	RxBytes *RxBytes `json:"rx.bytes,omitempty"`

	// Filter by tx.errors
	TxErrors *TxErrors `json:"tx.errors,omitempty"`

	// Filter by rx.errors
	RxErrors *RxErrors `json:"rx.errors,omitempty"`

	// Filter by tx.dropped
	TxDropped *TxDropped `json:"tx.dropped,omitempty"`

	// Filter by rx.dropped
	RxDropped *RxDropped `json:"rx.dropped,omitempty"`
}

// ExperimentalControllerGetNetworkProtocolInfoParams defines parameters for ExperimentalControllerGetNetworkProtocolInfo.
type ExperimentalControllerGetNetworkProtocolInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by network interface
	Iface *Iface `json:"iface,omitempty"`

	// Type of network
	Type *TypeSyscollector `json:"type,omitempty"`

	// Filter by network gateway
	Gateway *Gateway `json:"gateway,omitempty"`

	// Filter by network dhcp (enabled or disabled)
	Dhcp *Dhcp `json:"dhcp,omitempty"`
}

// ExperimentalControllerGetOsInfoParams defines parameters for ExperimentalControllerGetOsInfo.
type ExperimentalControllerGetOsInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by OS name
	OsName *OsName `json:"os.name,omitempty"`

	// Filter by architecture
	Architecture *Architecture `json:"architecture,omitempty"`

	// Filter by OS version
	OsVersion *OsVersion `json:"os.version,omitempty"`

	// Filter by agents version
	Version *Version `json:"version,omitempty"`

	// Filter by release
	Release *Release `json:"release,omitempty"`
}

// ExperimentalControllerGetPackagesInfoParams defines parameters for ExperimentalControllerGetPackagesInfo.
type ExperimentalControllerGetPackagesInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by vendor
	Vendor *Vendor `json:"vendor,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by architecture
	Architecture *Architecture `json:"architecture,omitempty"`

	// Filter by file format. For example 'deb' will output deb files
	Format *FileFormat `json:"format,omitempty"`

	// Filter by package version
	Version *PackageVersion `json:"version,omitempty"`
}

// ExperimentalControllerGetPortsInfoParams defines parameters for ExperimentalControllerGetPortsInfo.
type ExperimentalControllerGetPortsInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by pid
	Pid *Pid `json:"pid,omitempty"`

	// Filter by protocol
	Protocol *Protocol `json:"protocol,omitempty"`

	// Filter by Local IP
	LocalIp *LocalIp `json:"local.ip,omitempty"`

	// Filter by Local Port
	LocalPort *LocalPort `json:"local.port,omitempty"`

	// Filter by Remote IP
	RemoteIp *RemoteIp `json:"remote.ip,omitempty"`

	// Filter by tx_queue
	TxQueue *TxQueue `json:"tx_queue,omitempty"`

	// Filter by state
	State *State `json:"state,omitempty"`

	// Filter by process name
	Process *Process `json:"process,omitempty"`
}

// ExperimentalControllerGetProcessesInfoParams defines parameters for ExperimentalControllerGetProcessesInfo.
type ExperimentalControllerGetProcessesInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by process pid
	Pid *ProcessPid `json:"pid,omitempty"`

	// Filter by process state
	State *ProcessState `json:"state,omitempty"`

	// Filter by process parent pid
	Ppid *Ppid `json:"ppid,omitempty"`

	// Filter by process egroup
	Egroup *Egroup `json:"egroup,omitempty"`

	// Filter by process euser
	Euser *Euser `json:"euser,omitempty"`

	// Filter by process fgroup
	Fgroup *Fgroup `json:"fgroup,omitempty"`

	// Filter by process name
	Name *ProcessName `json:"name,omitempty"`

	// Filter by process nlwp
	Nlwp *Nlwp `json:"nlwp,omitempty"`

	// Filter by process pgrp
	Pgrp *Pgrp `json:"pgrp,omitempty"`

	// Filter by process priority
	Priority *Priority `json:"priority,omitempty"`

	// Filter by process rgroup
	Rgroup *Rgroup `json:"rgroup,omitempty"`

	// Filter by process ruser
	Ruser *Ruser `json:"ruser,omitempty"`

	// Filter by process sgroup
	Sgroup *Sgroup `json:"sgroup,omitempty"`

	// Filter by process suser
	Suser *Suser `json:"suser,omitempty"`
}

// AgentControllerDeleteGroupsParams defines parameters for AgentControllerDeleteGroups.
type AgentControllerDeleteGroupsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of group IDs (separated by comma), use the keyword 'all' to select all groups
	GroupsList GroupsListAll `json:"groups_list"`
}

// AgentControllerGetListGroupParams defines parameters for AgentControllerGetListGroup.
type AgentControllerGetListGroupParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of group IDs (separated by comma), all groups selected by default if not specified
	GroupsList *GroupsList `json:"groups_list,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select algorithm to generate the returned checksums
	Hash *AgentControllerGetListGroupParamsHash `json:"hash,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// AgentControllerGetListGroupParamsHash defines parameters for AgentControllerGetListGroup.
type AgentControllerGetListGroupParamsHash string

// AgentControllerPostGroupJSONBody defines parameters for AgentControllerPostGroup.
type AgentControllerPostGroupJSONBody struct {
	// Group name. It can contain any of the characters between a-z, A-Z, 0-9, '_', '-' and '.'. Names '.' and '..' are restricted.
	GroupId string `json:"group_id"`
}

// AgentControllerPostGroupParams defines parameters for AgentControllerPostGroup.
type AgentControllerPostGroupParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerGetAgentsInGroupParams defines parameters for AgentControllerGetAgentsInGroup.
type AgentControllerGetAgentsInGroupParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Filter by agent status (use commas to enter multiple statuses)
	Status *StatusAgentParam `json:"status,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// AgentControllerGetAgentsInGroupParamsStatus defines parameters for AgentControllerGetAgentsInGroup.
type AgentControllerGetAgentsInGroupParamsStatus string

// AgentControllerGetGroupConfigParams defines parameters for AgentControllerGetGroupConfig.
type AgentControllerGetGroupConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`
}

// AgentControllerPutGroupConfigParams defines parameters for AgentControllerPutGroupConfig.
type AgentControllerPutGroupConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// AgentControllerGetGroupFilesParams defines parameters for AgentControllerGetGroupFiles.
type AgentControllerGetGroupFilesParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select algorithm to generate the returned checksums
	Hash *AgentControllerGetGroupFilesParamsHash `json:"hash,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// AgentControllerGetGroupFilesParamsHash defines parameters for AgentControllerGetGroupFiles.
type AgentControllerGetGroupFilesParamsHash string

// AgentControllerGetGroupFileJsonParams defines parameters for AgentControllerGetGroupFileJson.
type AgentControllerGetGroupFileJsonParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Type of file
	Type *TypeAgents `json:"type,omitempty"`
}

// AgentControllerGetGroupFileJsonParamsType defines parameters for AgentControllerGetGroupFileJson.
type AgentControllerGetGroupFileJsonParamsType string

// AgentControllerGetGroupFileXmlParams defines parameters for AgentControllerGetGroupFileXml.
type AgentControllerGetGroupFileXmlParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Type of file
	Type *TypeAgents `json:"type,omitempty"`
}

// AgentControllerGetGroupFileXmlParamsType defines parameters for AgentControllerGetGroupFileXml.
type AgentControllerGetGroupFileXmlParamsType string

// CdbListControllerGetListsParams defines parameters for CdbListControllerGetLists.
type CdbListControllerGetListsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`

	// Filter by filename
	Filename *Filename `json:"filename,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// CdbListControllerGetListsFilesParams defines parameters for CdbListControllerGetListsFiles.
type CdbListControllerGetListsFilesParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`

	// Filter by filename
	Filename *Filename `json:"filename,omitempty"`
}

// CdbListControllerDeleteFileParams defines parameters for CdbListControllerDeleteFile.
type CdbListControllerDeleteFileParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// CdbListControllerGetFileParams defines parameters for CdbListControllerGetFile.
type CdbListControllerGetFileParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Format response in plain text
	Raw *Raw `json:"raw,omitempty"`
}

// CdbListControllerPutFileParams defines parameters for CdbListControllerPutFile.
type CdbListControllerPutFileParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// If set to false, an exception will be raised when updating contents of an already existing filename
	Overwrite *Overwrite `json:"overwrite,omitempty"`
}

// LogtestControllerRunLogtestToolJSONBody defines parameters for LogtestControllerRunLogtestTool.
type LogtestControllerRunLogtestToolJSONBody LogtestRequest

// LogtestControllerRunLogtestToolParams defines parameters for LogtestControllerRunLogtestTool.
type LogtestControllerRunLogtestToolParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// LogtestControllerEndLogtestSessionParams defines parameters for LogtestControllerEndLogtestSession.
type LogtestControllerEndLogtestSessionParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetApiConfigParams defines parameters for ManagerControllerGetApiConfig.
type ManagerControllerGetApiConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetConfigurationParams defines parameters for ManagerControllerGetConfiguration.
type ManagerControllerGetConfigurationParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Format response in plain text
	Raw *Raw `json:"raw,omitempty"`

	// Indicates the wazuh configuration section
	Section *ManagerControllerGetConfigurationParamsSection `json:"section,omitempty"`

	// Indicate a section child. E.g, fields for *ruleset* section are: decoder_dir, rule_dir, etc
	Field *Field `json:"field,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// ManagerControllerGetConfigurationParamsSection defines parameters for ManagerControllerGetConfiguration.
type ManagerControllerGetConfigurationParamsSection string

// ManagerControllerUpdateConfigurationParams defines parameters for ManagerControllerUpdateConfiguration.
type ManagerControllerUpdateConfigurationParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetConfValidationParams defines parameters for ManagerControllerGetConfValidation.
type ManagerControllerGetConfValidationParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetManagerConfigOndemandParams defines parameters for ManagerControllerGetManagerConfigOndemand.
type ManagerControllerGetManagerConfigOndemandParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetManagerConfigOndemandParamsComponent defines parameters for ManagerControllerGetManagerConfigOndemand.
type ManagerControllerGetManagerConfigOndemandParamsComponent string

// ManagerControllerGetManagerConfigOndemandParamsConfiguration defines parameters for ManagerControllerGetManagerConfigOndemand.
type ManagerControllerGetManagerConfigOndemandParamsConfiguration string

// ManagerControllerGetDaemonStatsParams defines parameters for ManagerControllerGetDaemonStats.
type ManagerControllerGetDaemonStatsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of daemon names (separated by comma), all daemons selected by default if not specified
	DaemonsList *DaemonsList `json:"daemons_list,omitempty"`
}

// ManagerControllerGetDaemonStatsParamsDaemonsList defines parameters for ManagerControllerGetDaemonStats.
type ManagerControllerGetDaemonStatsParamsDaemonsList string
// ManagerControllerGetInfoParams defines parameters for ManagerControllerGetInfo.
type ManagerControllerGetInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetLogParams defines parameters for ManagerControllerGetLog.
type ManagerControllerGetLogParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of lines to return.
	Limit *LogLines `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Wazuh component that logged the event
	Tag *Tag `json:"tag,omitempty"`

	// Filter by log level
	Level *ManagerControllerGetLogParamsLevel `json:"level,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// ManagerControllerGetLogParamsLevel defines parameters for ManagerControllerGetLog.
type ManagerControllerGetLogParamsLevel string

// ManagerControllerGetLogSummaryParams defines parameters for ManagerControllerGetLogSummary.
type ManagerControllerGetLogSummaryParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerPutRestartParams defines parameters for ManagerControllerPutRestart.
type ManagerControllerPutRestartParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetStatsParams defines parameters for ManagerControllerGetStats.
type ManagerControllerGetStatsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Date to obtain statistical information from. Format YYYY-MM-DD
	Date *Date `json:"date,omitempty"`
}

// ManagerControllerGetStatsAnalysisdParams defines parameters for ManagerControllerGetStatsAnalysisd.
type ManagerControllerGetStatsAnalysisdParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetStatsHourlyParams defines parameters for ManagerControllerGetStatsHourly.
type ManagerControllerGetStatsHourlyParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetStatsRemotedParams defines parameters for ManagerControllerGetStatsRemoted.
type ManagerControllerGetStatsRemotedParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetStatsWeeklyParams defines parameters for ManagerControllerGetStatsWeekly.
type ManagerControllerGetStatsWeeklyParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerGetStatusParams defines parameters for ManagerControllerGetStatus.
type ManagerControllerGetStatusParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// ManagerControllerCheckAvailableVersionParams defines parameters for ManagerControllerCheckAvailableVersion.
type ManagerControllerCheckAvailableVersionParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Force query to CTI service
	ForceQuery *ForceQuery `json:"force_query,omitempty"`
}

// MitreControllerGetGroupsParams defines parameters for MitreControllerGetGroups.
type MitreControllerGetGroupsParams struct {
	// List of MITRE's group IDs (separated by comma)
	GroupIds *MitreGroupIds `json:"group_ids,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// MitreControllerGetMetadataParams defines parameters for MitreControllerGetMetadata.
type MitreControllerGetMetadataParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// MitreControllerGetMitigationsParams defines parameters for MitreControllerGetMitigations.
type MitreControllerGetMitigationsParams struct {
	// List of MITRE's mitigations IDs (separated by comma)
	MitigationIds *MitreMitigationIds `json:"mitigation_ids,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// MitreControllerGetReferencesParams defines parameters for MitreControllerGetReferences.
type MitreControllerGetReferencesParams struct {
	// List of MITRE's references IDs (separated by comma)
	ReferenceIds *MitreReferenceIds `json:"reference_ids,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`
}

// MitreControllerGetSoftwareParams defines parameters for MitreControllerGetSoftware.
type MitreControllerGetSoftwareParams struct {
	// List of MITRE's software IDs (separated by comma)
	SoftwareIds *MitreSoftwareIds `json:"software_ids,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// MitreControllerGetTacticsParams defines parameters for MitreControllerGetTactics.
type MitreControllerGetTacticsParams struct {
	// List of MITRE's tactics IDs (separated by comma)
	TacticIds *MitreTacticIds `json:"tactic_ids,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// MitreControllerGetTechniquesParams defines parameters for MitreControllerGetTechniques.
type MitreControllerGetTechniquesParams struct {
	// List of MITRE's techniques IDs (separated by comma)
	TechniqueIds *MitreTechniqueIds `json:"technique_ids,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// OverviewControllerGetOverviewAgentsParams defines parameters for OverviewControllerGetOverviewAgents.
type OverviewControllerGetOverviewAgentsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// RootcheckControllerPutRootcheckParams defines parameters for RootcheckControllerPutRootcheck.
type RootcheckControllerPutRootcheckParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`
}

// RootcheckControllerDeleteRootcheckParams defines parameters for RootcheckControllerDeleteRootcheck.
type RootcheckControllerDeleteRootcheckParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// RootcheckControllerGetRootcheckAgentParams defines parameters for RootcheckControllerGetRootcheckAgent.
type RootcheckControllerGetRootcheckAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`

	// Filter by status
	Status *Status `json:"status,omitempty"`

	// Filter by PCI_DSS requirement name
	PciDss *PciDss `json:"pci_dss,omitempty"`

	// Filter by CIS requirement
	Cis *Cis `json:"cis,omitempty"`
}

// RootcheckControllerGetLastScanAgentParams defines parameters for RootcheckControllerGetLastScanAgent.
type RootcheckControllerGetLastScanAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// RuleControllerGetRulesParams defines parameters for RuleControllerGetRules.
type RuleControllerGetRulesParams struct {
	// List of rule IDs
	RuleIds *RuleIds `json:"rule_ids,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Filter by list status. Use commas to enter multiple statuses
	Status *RuleControllerGetRulesParamsStatus `json:"status,omitempty"`

	// Filter by rule group
	Group *Group `json:"group,omitempty"`

	// Filter by rule level. Can be a single level (4) or an interval (2-4)
	Level *Level `json:"level,omitempty"`

	// Filter by filename
	Filename *Filename `json:"filename,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`

	// Filter by PCI_DSS requirement name
	PciDss *PciDss `json:"pci_dss,omitempty"`

	// Filter by GDPR requirement
	Gdpr *Gdpr `json:"gdpr,omitempty"`

	// Filter by GPG13 requirement
	Gpg13 *Gpg13 `json:"gpg13,omitempty"`

	// Filter by HIPAA requirement
	Hipaa *Hipaa `json:"hipaa,omitempty"`

	// Filter by NIST-800-53 requirement
	Nist80053 *Nist80053 `json:"nist-800-53,omitempty"`

	// Filters by TSC requirement
	Tsc *Tsc `json:"tsc,omitempty"`

	// Filters by MITRE technique ID
	Mitre *Mitre `json:"mitre,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// RuleControllerGetRulesParamsStatus defines parameters for RuleControllerGetRules.
type RuleControllerGetRulesParamsStatus string

// RuleControllerGetRulesFilesParams defines parameters for RuleControllerGetRulesFiles.
type RuleControllerGetRulesFilesParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`

	// Filter by filename of one or more rule or decoder files.
	Filename *XmlFilename `json:"filename,omitempty"`

	// Filter by list status. Use commas to enter multiple statuses
	Status *RuleControllerGetRulesFilesParamsStatus `json:"status,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// RuleControllerGetRulesFilesParamsStatus defines parameters for RuleControllerGetRulesFiles.
type RuleControllerGetRulesFilesParamsStatus string

// RuleControllerDeleteFileParams defines parameters for RuleControllerDeleteFile.
type RuleControllerDeleteFileParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`
}

// RuleControllerGetFileParams defines parameters for RuleControllerGetFile.
type RuleControllerGetFileParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Format response in plain text
	Raw *Raw `json:"raw,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`
}

// RuleControllerPutFileParams defines parameters for RuleControllerPutFile.
type RuleControllerPutFileParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// If set to false, an exception will be raised when updating contents of an already existing filename
	Overwrite *Overwrite `json:"overwrite,omitempty"`

	// Filter by relative directory name
	RelativeDirname *GetDirnamesPath `json:"relative_dirname,omitempty"`
}

// RuleControllerGetRulesGroupsParams defines parameters for RuleControllerGetRulesGroups.
type RuleControllerGetRulesGroupsParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`
}

// RuleControllerGetRulesRequirementParams defines parameters for RuleControllerGetRulesRequirement.
type RuleControllerGetRulesRequirementParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`
}

// RuleControllerGetRulesRequirementParamsRequirement defines parameters for RuleControllerGetRulesRequirement.
type RuleControllerGetRulesRequirementParamsRequirement string

// ScaControllerGetScaAgentParams defines parameters for ScaControllerGetScaAgent.
type ScaControllerGetScaAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Filter by policy name
	Name *ScaName `json:"name,omitempty"`

	// Filter by policy description
	Description *Description `json:"description,omitempty"`

	// Filter by references
	References *References `json:"references,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// ScaControllerGetScaChecksParams defines parameters for ScaControllerGetScaChecks.
type ScaControllerGetScaChecksParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Filter by title
	Title *Title `json:"title,omitempty"`

	// Filter by policy description
	Description *Description `json:"description,omitempty"`

	// Filter by rationale
	Rationale *Rationale `json:"rationale,omitempty"`

	// Filter by remediation
	Remediation *Remediation `json:"remediation,omitempty"`

	// Filter by command
	Command *Command `json:"command,omitempty"`

	// Filter by status
	Status *Status `json:"status,omitempty"`

	// Filter by reason
	Reason *Reason `json:"reason,omitempty"`

	// Filter by full path
	File *FullPathFilter `json:"file,omitempty"`

	// Filter by process name
	Process *Process `json:"process,omitempty"`

	// Filter by directory
	Directory *Directory `json:"directory,omitempty"`

	// Filter by registry
	Registry *Registry `json:"registry,omitempty"`

	// Filter by references
	References *References `json:"references,omitempty"`

	// Filter by result
	Result *Result `json:"result,omitempty"`

	// Filter by condition
	Condition *Condition `json:"condition,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SecurityControllerGetRbacActionsParams defines parameters for SecurityControllerGetRbacActions.
type SecurityControllerGetRbacActionsParams struct {
	// Look for the RBAC actions which are related to the specified endpoint
	Endpoint *Endpoint `json:"endpoint,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`
}

// SecurityControllerDeleteSecurityConfigParams defines parameters for SecurityControllerDeleteSecurityConfig.
type SecurityControllerDeleteSecurityConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerGetSecurityConfigParams defines parameters for SecurityControllerGetSecurityConfig.
type SecurityControllerGetSecurityConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerPutSecurityConfigJSONBody defines parameters for SecurityControllerPutSecurityConfig.
type SecurityControllerPutSecurityConfigJSONBody SecurityConfiguration

// SecurityControllerPutSecurityConfigParams defines parameters for SecurityControllerPutSecurityConfig.
type SecurityControllerPutSecurityConfigParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerRemovePoliciesParams defines parameters for SecurityControllerRemovePolicies.
type SecurityControllerRemovePoliciesParams struct {
	// List of policy IDs (separated by comma), use the keyword 'all' to select all policies
	PolicyIds PolicyIdsRbacDelete `json:"policy_ids"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerGetPoliciesParams defines parameters for SecurityControllerGetPolicies.
type SecurityControllerGetPoliciesParams struct {
	// List of policy IDs
	PolicyIds *PolicyIdsRbac `json:"policy_ids,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SecurityControllerAddPolicyJSONBody defines parameters for SecurityControllerAddPolicy.
type SecurityControllerAddPolicyJSONBody PoliciesRequest

// SecurityControllerAddPolicyParams defines parameters for SecurityControllerAddPolicy.
type SecurityControllerAddPolicyParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerUpdatePolicyJSONBody defines parameters for SecurityControllerUpdatePolicy.
type SecurityControllerUpdatePolicyJSONBody PoliciesRequestNoRequired

// SecurityControllerUpdatePolicyParams defines parameters for SecurityControllerUpdatePolicy.
type SecurityControllerUpdatePolicyParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerGetRbacResourcesParams defines parameters for SecurityControllerGetRbacResources.
type SecurityControllerGetRbacResourcesParams struct {
	// List of current RBAC's resources.
	Resource *SecurityControllerGetRbacResourcesParamsResource `json:"resource,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`
}

// SecurityControllerGetRbacResourcesParamsResource defines parameters for SecurityControllerGetRbacResources.
type SecurityControllerGetRbacResourcesParamsResource string

// SecurityControllerRemoveRolesParams defines parameters for SecurityControllerRemoveRoles.
type SecurityControllerRemoveRolesParams struct {
	// List of role IDs (separated by comma), use the keyword 'all' to select all roles
	RoleIds RoleIdsDelete `json:"role_ids"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerGetRolesParams defines parameters for SecurityControllerGetRoles.
type SecurityControllerGetRolesParams struct {
	// List of role IDs (separated by comma)
	RoleIds *RoleIds `json:"role_ids,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SecurityControllerAddRoleJSONBody defines parameters for SecurityControllerAddRole.
type SecurityControllerAddRoleJSONBody RolesRequest

// SecurityControllerAddRoleParams defines parameters for SecurityControllerAddRole.
type SecurityControllerAddRoleParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerUpdateRoleJSONBody defines parameters for SecurityControllerUpdateRole.
type SecurityControllerUpdateRoleJSONBody RolesRequestNoRequired

// SecurityControllerUpdateRoleParams defines parameters for SecurityControllerUpdateRole.
type SecurityControllerUpdateRoleParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerRemoveRolePolicyParams defines parameters for SecurityControllerRemoveRolePolicy.
type SecurityControllerRemoveRolePolicyParams struct {
	// List of policy IDs (separated by comma), use the keyword 'all' to select all policies
	PolicyIds PolicyIdsRbacDelete `json:"policy_ids"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerSetRolePolicyParams defines parameters for SecurityControllerSetRolePolicy.
type SecurityControllerSetRolePolicyParams struct {
	// List of policy IDs
	PolicyIds PolicyIdsRbacRequired `json:"policy_ids"`

	// Security position for roles/policies
	Position *SecurityPosition `json:"position,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerRemoveRoleRuleParams defines parameters for SecurityControllerRemoveRoleRule.
type SecurityControllerRemoveRoleRuleParams struct {
	// List of rule IDs (separated by comma), use the keyword 'all' to select all rules
	RuleIds SecurityRuleIdsDelete `json:"rule_ids"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerSetRoleRuleParams defines parameters for SecurityControllerSetRoleRule.
type SecurityControllerSetRoleRuleParams struct {
	// List of rule IDs (separated by comma)
	RuleIds SecurityRuleIdsRequired `json:"rule_ids"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerRemoveRulesParams defines parameters for SecurityControllerRemoveRules.
type SecurityControllerRemoveRulesParams struct {
	// List of rule IDs (separated by comma), use the keyword 'all' to select all rules
	RuleIds SecurityRuleIdsDelete `json:"rule_ids"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerGetRulesParams defines parameters for SecurityControllerGetRules.
type SecurityControllerGetRulesParams struct {
	// List of rule IDs (separated by comma)
	RuleIds *SecurityRuleIds `json:"rule_ids,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SecurityControllerAddRuleJSONBody defines parameters for SecurityControllerAddRule.
type SecurityControllerAddRuleJSONBody SecurityRulesRequest

// SecurityControllerAddRuleParams defines parameters for SecurityControllerAddRule.
type SecurityControllerAddRuleParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerUpdateRuleJSONBody defines parameters for SecurityControllerUpdateRule.
type SecurityControllerUpdateRuleJSONBody SecurityRulesRequestNoRequired

// SecurityControllerUpdateRuleParams defines parameters for SecurityControllerUpdateRule.
type SecurityControllerUpdateRuleParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerDeprecatedLoginUserParams defines parameters for SecurityControllerDeprecatedLoginUser.
type SecurityControllerDeprecatedLoginUserParams struct {
	// Format response in plain text
	Raw *Raw `json:"raw,omitempty"`
}

// SecurityControllerLoginUserParams defines parameters for SecurityControllerLoginUser.
type SecurityControllerLoginUserParams struct {
	// Format response in plain text
	Raw *Raw `json:"raw,omitempty"`
}

// SecurityControllerRunAsLoginJSONBody defines parameters for SecurityControllerRunAsLogin.
type SecurityControllerRunAsLoginJSONBody map[string]interface{}

// SecurityControllerRunAsLoginParams defines parameters for SecurityControllerRunAsLogin.
type SecurityControllerRunAsLoginParams struct {
	// Format response in plain text
	Raw *Raw `json:"raw,omitempty"`
}

// SecurityControllerDeleteUsersParams defines parameters for SecurityControllerDeleteUsers.
type SecurityControllerDeleteUsersParams struct {
	// List of user IDs (separated by comma), use the keyword 'all' to select all users
	UserIds UserIdsDelete `json:"user_ids"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerGetUsersParams defines parameters for SecurityControllerGetUsers.
type SecurityControllerGetUsersParams struct {
	// List of user IDs (separated by comma)
	UserIds *UserIds `json:"user_ids,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SecurityControllerCreateUserJSONBody defines parameters for SecurityControllerCreateUser.
type SecurityControllerCreateUserJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// SecurityControllerCreateUserParams defines parameters for SecurityControllerCreateUser.
type SecurityControllerCreateUserParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerGetUserMeParams defines parameters for SecurityControllerGetUserMe.
type SecurityControllerGetUserMeParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerGetUserMePoliciesParams defines parameters for SecurityControllerGetUserMePolicies.
type SecurityControllerGetUserMePoliciesParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`
}

// SecurityControllerUpdateUserJSONBody defines parameters for SecurityControllerUpdateUser.
type SecurityControllerUpdateUserJSONBody struct {
	Password *string `json:"password,omitempty"`
}

// SecurityControllerUpdateUserParams defines parameters for SecurityControllerUpdateUser.
type SecurityControllerUpdateUserParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerRemoveUserRoleParams defines parameters for SecurityControllerRemoveUserRole.
type SecurityControllerRemoveUserRoleParams struct {
	// List of role IDs (separated by comma), use the keyword 'all' to select all roles
	RoleIds RoleIdsDelete `json:"role_ids"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerSetUserRoleParams defines parameters for SecurityControllerSetUserRole.
type SecurityControllerSetUserRoleParams struct {
	// List of role IDs (separated by comma)
	RoleIds RoleIdsRequired `json:"role_ids"`

	// Security position for roles/policies
	Position *SecurityPosition `json:"position,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SecurityControllerEditRunAsParams defines parameters for SecurityControllerEditRunAs.
type SecurityControllerEditRunAsParams struct {
	// Value for the allow_run_as flag
	AllowRunAs *AllowRunAs `json:"allow_run_as,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SyscheckControllerPutSyscheckParams defines parameters for SyscheckControllerPutSyscheck.
type SyscheckControllerPutSyscheckParams struct {
	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SyscheckControllerDeleteSyscheckAgentParams defines parameters for SyscheckControllerDeleteSyscheckAgent.
type SyscheckControllerDeleteSyscheckAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SyscheckControllerGetSyscheckAgentParams defines parameters for SyscheckControllerGetSyscheckAgent.
type SyscheckControllerGetSyscheckAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by full path
	File *FullPathFilter `json:"file,omitempty"`

	// Filter by architecture
	Arch *SyscheckControllerGetSyscheckAgentParamsArch `json:"arch,omitempty"`

	// Filter by value name
	ValueName *ValueName `json:"value.name,omitempty"`

	// Filter by value type
	ValueType *ValueType `json:"value.type,omitempty"`

	// Filter by file type. Registry_key and registry_value types are only available in Windows agents
	Type *SyscheckControllerGetSyscheckAgentParamsType `json:"type,omitempty"`

	// Return a summary grouping by filename
	Summary *Summary `json:"summary,omitempty"`

	// Filter files with the specified MD5 checksum
	Md5 *Md5 `json:"md5,omitempty"`

	// Filter files with the specified SHA1 checksum
	Sha1 *Sha1 `json:"sha1,omitempty"`

	// Filter files with the specified SHA256 checksum
	Sha256 *Sha256 `json:"sha256,omitempty"`

	// Filter files with the specified hash (md5, sha256 or sha1)
	Hash *Hashfilter `json:"hash,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`
}

// SyscheckControllerGetSyscheckAgentParamsArch defines parameters for SyscheckControllerGetSyscheckAgent.
type SyscheckControllerGetSyscheckAgentParamsArch string

// SyscheckControllerGetSyscheckAgentParamsType defines parameters for SyscheckControllerGetSyscheckAgent.
type SyscheckControllerGetSyscheckAgentParamsType string

// SyscheckControllerGetLastScanAgentParams defines parameters for SyscheckControllerGetLastScanAgent.
type SyscheckControllerGetLastScanAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// SyscollectorControllerGetHardwareInfoParams defines parameters for SyscollectorControllerGetHardwareInfo.
type SyscollectorControllerGetHardwareInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`
}

// SyscollectorControllerGetHotfixInfoParams defines parameters for SyscollectorControllerGetHotfixInfo.
type SyscollectorControllerGetHotfixInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by hotfix
	Hotfix *Hotfix `json:"hotfix,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SyscollectorControllerGetNetworkAddressInfoParams defines parameters for SyscollectorControllerGetNetworkAddressInfo.
type SyscollectorControllerGetNetworkAddressInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by network interface
	Iface *Iface `json:"iface,omitempty"`

	// Filter by IP protocol
	Proto *Proto `json:"proto,omitempty"`

	// Filter by IP address
	Address *Address `json:"address,omitempty"`

	// Filter by broadcast direction
	Broadcast *Broadcast `json:"broadcast,omitempty"`

	// Filter by netmask
	Netmask *Netmask `json:"netmask,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SyscollectorControllerGetNetworkInterfaceInfoParams defines parameters for SyscollectorControllerGetNetworkInterfaceInfo.
type SyscollectorControllerGetNetworkInterfaceInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by adapter
	Adapter *Adapter `json:"adapter,omitempty"`

	// Type of interface
	Type *Typesys `json:"type,omitempty"`

	// Filter by state
	State *State `json:"state,omitempty"`

	// Filter by mtu
	Mtu *Mtu `json:"mtu,omitempty"`

	// Filter by tx.packets
	TxPackets *TxPackets `json:"tx.packets,omitempty"`

	// Filter by rx.packets
	RxPackets *RxPackets `json:"rx.packets,omitempty"`

	// Filter by tx.bytes
	TxBytes *TxBytes `json:"tx.bytes,omitempty"`

	// Filter by rx.bytes
	RxBytes *RxBytes `json:"rx.bytes,omitempty"`

	// Filter by tx.errors
	TxErrors *TxErrors `json:"tx.errors,omitempty"`

	// Filter by rx.errors
	RxErrors *RxErrors `json:"rx.errors,omitempty"`

	// Filter by tx.dropped
	TxDropped *TxDropped `json:"tx.dropped,omitempty"`

	// Filter by rx.dropped
	RxDropped *RxDropped `json:"rx.dropped,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SyscollectorControllerGetNetworkProtocolInfoParams defines parameters for SyscollectorControllerGetNetworkProtocolInfo.
type SyscollectorControllerGetNetworkProtocolInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by network interface
	Iface *Iface `json:"iface,omitempty"`

	// Type of network
	Type *TypeSyscollector `json:"type,omitempty"`

	// Filter by network gateway
	Gateway *Gateway `json:"gateway,omitempty"`

	// Filter by network dhcp (enabled or disabled)
	Dhcp *Dhcp `json:"dhcp,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SyscollectorControllerGetOsInfoParams defines parameters for SyscollectorControllerGetOsInfo.
type SyscollectorControllerGetOsInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`
}

// SyscollectorControllerGetPackagesInfoParams defines parameters for SyscollectorControllerGetPackagesInfo.
type SyscollectorControllerGetPackagesInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by vendor
	Vendor *Vendor `json:"vendor,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by architecture
	Architecture *Architecture `json:"architecture,omitempty"`

	// Filter by file format. For example 'deb' will output deb files
	Format *FileFormat `json:"format,omitempty"`

	// Filter by package version
	Version *PackageVersion `json:"version,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SyscollectorControllerGetPortsInfoParams defines parameters for SyscollectorControllerGetPortsInfo.
type SyscollectorControllerGetPortsInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by pid
	Pid *Pid `json:"pid,omitempty"`

	// Filter by protocol
	Protocol *Protocol `json:"protocol,omitempty"`

	// Filter by Local IP
	LocalIp *LocalIp `json:"local.ip,omitempty"`

	// Filter by Local Port
	LocalPort *LocalPort `json:"local.port,omitempty"`

	// Filter by Remote IP
	RemoteIp *RemoteIp `json:"remote.ip,omitempty"`

	// Filter by tx_queue
	TxQueue *TxQueue `json:"tx_queue,omitempty"`

	// Filter by state
	State *State `json:"state,omitempty"`

	// Filter by process name
	Process *Process `json:"process,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// SyscollectorControllerGetProcessesInfoParams defines parameters for SyscollectorControllerGetProcessesInfo.
type SyscollectorControllerGetProcessesInfoParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Filter by process pid
	Pid *ProcessPid `json:"pid,omitempty"`

	// Filter by process state
	State *ProcessState `json:"state,omitempty"`

	// Filter by process parent pid
	Ppid *Ppid `json:"ppid,omitempty"`

	// Filter by process egroup
	Egroup *Egroup `json:"egroup,omitempty"`

	// Filter by process euser
	Euser *Euser `json:"euser,omitempty"`

	// Filter by process fgroup
	Fgroup *Fgroup `json:"fgroup,omitempty"`

	// Filter by process name
	Name *ProcessName `json:"name,omitempty"`

	// Filter by process nlwp
	Nlwp *Nlwp `json:"nlwp,omitempty"`

	// Filter by process pgrp
	Pgrp *Pgrp `json:"pgrp,omitempty"`

	// Filter by process priority
	Priority *Priority `json:"priority,omitempty"`

	// Filter by process rgroup
	Rgroup *Rgroup `json:"rgroup,omitempty"`

	// Filter by process ruser
	Ruser *Ruser `json:"ruser,omitempty"`

	// Filter by process sgroup
	Sgroup *Sgroup `json:"sgroup,omitempty"`

	// Filter by process suser
	Suser *Suser `json:"suser,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`
}

// TaskControllerGetTasksStatusParams defines parameters for TaskControllerGetTasksStatus.
type TaskControllerGetTasksStatusParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// List of agent IDs (separated by comma), all agents selected by default if not specified
	AgentsList *AgentsList `json:"agents_list,omitempty"`

	// List of task IDs (separated by comma)
	TasksList *TasksList `json:"tasks_list,omitempty"`

	// Filter by command
	Command *Command `json:"command,omitempty"`

	// Show results filtered by node
	Node *Node `json:"node,omitempty"`

	// Show results filtered by module
	Module *Module `json:"module,omitempty"`

	// Filter by status
	Status *Status `json:"status,omitempty"`
}

// VulnerabilityControllerGetVulnerabilityAgentParams defines parameters for VulnerabilityControllerGetVulnerabilityAgent.
type VulnerabilityControllerGetVulnerabilityAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// First element to return in the collection
	Offset *Offset `json:"offset,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`

	// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Sort *Sort `json:"sort,omitempty"`

	// Look for elements containing the specified string. To obtain a complementary search, use '-' at the beginning
	Search *Search `json:"search,omitempty"`

	// Select which fields to return (separated by comma). Use '.' for nested fields. For example, '{field1: field2}' may be selected with 'field1.field2'
	Select *Select `json:"select,omitempty"`

	// Query to filter results by. For example q=&quot;status=active&quot;
	Q *Query `json:"q,omitempty"`

	// Look for distinct values.
	Distinct *Distinct `json:"distinct,omitempty"`

	// Filter by architecture
	Architecture *Architecture `json:"architecture,omitempty"`

	// Filter by CVE
	Cve *Cve `json:"cve,omitempty"`

	// Filter by name
	Name *Name `json:"name,omitempty"`

	// Filter by CVE version
	Version *CveVersion `json:"version,omitempty"`

	// Filter by CVE type
	Type *VulnerabilityControllerGetVulnerabilityAgentParamsType `json:"type,omitempty"`

	// Filter by CVE status
	Status *VulnerabilityControllerGetVulnerabilityAgentParamsStatus `json:"status,omitempty"`

	// Filter by CVE severity
	Severity *CveSeverity `json:"severity,omitempty"`
}

// VulnerabilityControllerGetVulnerabilityAgentParamsType defines parameters for VulnerabilityControllerGetVulnerabilityAgent.
type VulnerabilityControllerGetVulnerabilityAgentParamsType string

// VulnerabilityControllerGetVulnerabilityAgentParamsStatus defines parameters for VulnerabilityControllerGetVulnerabilityAgent.
type VulnerabilityControllerGetVulnerabilityAgentParamsStatus string

// VulnerabilityControllerGetLastScanAgentParams defines parameters for VulnerabilityControllerGetLastScanAgent.
type VulnerabilityControllerGetLastScanAgentParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`
}

// VulnerabilityControllerGetVulnerabilitiesFieldSummaryParams defines parameters for VulnerabilityControllerGetVulnerabilitiesFieldSummary.
type VulnerabilityControllerGetVulnerabilitiesFieldSummaryParams struct {
	// Show results in human-readable format
	Pretty *Pretty `json:"pretty,omitempty"`

	// Disable timeout response
	WaitForComplete *WaitForComplete `json:"wait_for_complete,omitempty"`

	// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
	Limit *Limit `json:"limit,omitempty"`
}

// VulnerabilityControllerGetVulnerabilitiesFieldSummaryParamsField defines parameters for VulnerabilityControllerGetVulnerabilitiesFieldSummary.
type VulnerabilityControllerGetVulnerabilitiesFieldSummaryParamsField string

// ActiveResponseControllerRunCommandJSONRequestBody defines body for ActiveResponseControllerRunCommand for application/json ContentType.
type ActiveResponseControllerRunCommandJSONRequestBody ActiveResponseControllerRunCommandJSONBody

// AgentControllerAddAgentJSONRequestBody defines body for AgentControllerAddAgent for application/json ContentType.
type AgentControllerAddAgentJSONRequestBody AgentControllerAddAgentJSONBody

// AgentControllerInsertAgentJSONRequestBody defines body for AgentControllerInsertAgent for application/json ContentType.
type AgentControllerInsertAgentJSONRequestBody AgentControllerInsertAgentJSONBody

// EventControllerForwardEventJSONRequestBody defines body for EventControllerForwardEvent for application/json ContentType.
type EventControllerForwardEventJSONRequestBody EventControllerForwardEventJSONBody

// AgentControllerPostGroupJSONRequestBody defines body for AgentControllerPostGroup for application/json ContentType.
type AgentControllerPostGroupJSONRequestBody AgentControllerPostGroupJSONBody

// LogtestControllerRunLogtestToolJSONRequestBody defines body for LogtestControllerRunLogtestTool for application/json ContentType.
type LogtestControllerRunLogtestToolJSONRequestBody LogtestControllerRunLogtestToolJSONBody

// SecurityControllerPutSecurityConfigJSONRequestBody defines body for SecurityControllerPutSecurityConfig for application/json ContentType.
type SecurityControllerPutSecurityConfigJSONRequestBody SecurityControllerPutSecurityConfigJSONBody

// SecurityControllerAddPolicyJSONRequestBody defines body for SecurityControllerAddPolicy for application/json ContentType.
type SecurityControllerAddPolicyJSONRequestBody SecurityControllerAddPolicyJSONBody

// SecurityControllerUpdatePolicyJSONRequestBody defines body for SecurityControllerUpdatePolicy for application/json ContentType.
type SecurityControllerUpdatePolicyJSONRequestBody SecurityControllerUpdatePolicyJSONBody

// SecurityControllerAddRoleJSONRequestBody defines body for SecurityControllerAddRole for application/json ContentType.
type SecurityControllerAddRoleJSONRequestBody SecurityControllerAddRoleJSONBody

// SecurityControllerUpdateRoleJSONRequestBody defines body for SecurityControllerUpdateRole for application/json ContentType.
type SecurityControllerUpdateRoleJSONRequestBody SecurityControllerUpdateRoleJSONBody

// SecurityControllerAddRuleJSONRequestBody defines body for SecurityControllerAddRule for application/json ContentType.
type SecurityControllerAddRuleJSONRequestBody SecurityControllerAddRuleJSONBody

// SecurityControllerUpdateRuleJSONRequestBody defines body for SecurityControllerUpdateRule for application/json ContentType.
type SecurityControllerUpdateRuleJSONRequestBody SecurityControllerUpdateRuleJSONBody

// SecurityControllerRunAsLoginJSONRequestBody defines body for SecurityControllerRunAsLogin for application/json ContentType.
type SecurityControllerRunAsLoginJSONRequestBody SecurityControllerRunAsLoginJSONBody

// SecurityControllerCreateUserJSONRequestBody defines body for SecurityControllerCreateUser for application/json ContentType.
type SecurityControllerCreateUserJSONRequestBody SecurityControllerCreateUserJSONBody

// SecurityControllerUpdateUserJSONRequestBody defines body for SecurityControllerUpdateUser for application/json ContentType.
type SecurityControllerUpdateUserJSONRequestBody SecurityControllerUpdateUserJSONBody

// Getter for additional properties for ApiError_DapiErrors. Returns the specified
// element and whether it was found
func (a ApiError_DapiErrors) Get(fieldName string) (value struct {
	Error   *string `json:"error,omitempty"`
	Logfile *string `json:"logfile,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApiError_DapiErrors
func (a *ApiError_DapiErrors) Set(fieldName string, value struct {
	Error   *string `json:"error,omitempty"`
	Logfile *string `json:"logfile,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Error   *string `json:"error,omitempty"`
			Logfile *string `json:"logfile,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApiError_DapiErrors to handle AdditionalProperties
func (a *ApiError_DapiErrors) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Error   *string `json:"error,omitempty"`
			Logfile *string `json:"logfile,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Error   *string `json:"error,omitempty"`
				Logfile *string `json:"logfile,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApiError_DapiErrors to handle AdditionalProperties
func (a ApiError_DapiErrors) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GroupDelete. Returns the specified
// element and whether it was found
func (a GroupDelete) Get(fieldName string) (value []interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GroupDelete
func (a *GroupDelete) Set(fieldName string, value []interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GroupDelete to handle AdditionalProperties
func (a *GroupDelete) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal []interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GroupDelete to handle AdditionalProperties
func (a GroupDelete) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

/*
// Getter for additional properties for SimpleApiError_Error. Returns the specified
// element and whether it was found
func (a SimpleApiError_Error) Get(fieldName string) (value struct {
	Code        *int32  `json:"code,omitempty"`
	Message     *string `json:"message,omitempty"`
	Remediation *string `json:"remediation,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimpleApiError_Error
func (a *SimpleApiError_Error) Set(fieldName string, value struct {
	Code        *int32  `json:"code,omitempty"`
	Message     *string `json:"message,omitempty"`
	Remediation *string `json:"remediation,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Code        *int32  `json:"code,omitempty"`
			Message     *string `json:"message,omitempty"`
			Remediation *string `json:"remediation,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimpleApiError_Error to handle AdditionalProperties
func (a *SimpleApiError_Error) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Code        *int32  `json:"code,omitempty"`
			Message     *string `json:"message,omitempty"`
			Remediation *string `json:"remediation,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Code        *int32  `json:"code,omitempty"`
				Message     *string `json:"message,omitempty"`
				Remediation *string `json:"remediation,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimpleApiError_Error to handle AdditionalProperties
func (a SimpleApiError_Error) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
*/
